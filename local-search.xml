<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>并发编程的三大特性</title>
    <link href="/2022/09/23/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/09/23/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java内存模型JMM-Java-Memory-Model"><a href="#Java内存模型JMM-Java-Memory-Model" class="headerlink" title="Java内存模型JMM(Java Memory Model)"></a>Java内存模型JMM(Java Memory Model)</h1><h3 id="JMM结构图"><a href="#JMM结构图" class="headerlink" title="JMM结构图:"></a>JMM结构图:</h3><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202209231635634.webp" alt="JMM模型控制图" style="zoom: 67%;" /><h3 id="JMM与Java内存区域概念解析"><a href="#JMM与Java内存区域概念解析" class="headerlink" title="JMM与Java内存区域概念解析:"></a>JMM与Java内存区域概念解析:</h3><p>JVM内存结构和Java虚拟机的运行时区域相关,JVM在运行时如何分区存储程序数据,例如堆用来存放对象实例.</p><p>JMM 和 Java并发编程相关,抽象类线程与主内存之间的关系,例如线程间的共享变量必须存储到主内存中.</p><h3 id="JMM中的主内存和本地内存-工作内存"><a href="#JMM中的主内存和本地内存-工作内存" class="headerlink" title="JMM中的主内存和本地内存(工作内存):"></a>JMM中的主内存和本地内存(工作内存):</h3><p>主内存:用于存储共享变量,所有线程创建的实例对象都存放在主内存中,不管该实例对象是成员变量还是方法中的本地变量.</p><p>本地内存:每个内存都有一个私有的本地内存来存储共享变量的副本,并且每个线程只可以访问自己的本地内存不可以访问其他线程的本地内存.</p><h3 id="JMM操作流程图"><a href="#JMM操作流程图" class="headerlink" title="JMM操作流程图:"></a>JMM操作流程图:</h3><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202209231622518.webp" alt="JMM操作流程图" style="zoom: 67%;" /><h2 id="并发编程三大特性"><a href="#并发编程三大特性" class="headerlink" title="并发编程三大特性:"></a>并发编程三大特性:</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性:"></a>原子性:</h3><p>解释:一次操作或者多次操作要么全部执行,要么受到影响全部都不执行.</p><p>实现:在Java中,我们可以使用<strong>synchronize</strong>和<strong>Lock</strong>或者<strong>原子类</strong>来保证原子性不被破坏.</p><p>synchronize和各种Lock都是通过上锁的来保证任何时刻当前代码块只有一个线程访问.</p><p>原子类则是会用CAS(compare and swap)操作(也有可能会用到volatile和final关键字)来保证原子操作.</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性:"></a>可见性:</h3><p>解释:当一个线程对共享变量进行了修改,那么另外的线程都是可以立刻查看到修改后的共享变量值.</p><p>实现:我们可以使用synchronize,volatile以及各种Lock实现可见性.</p><p>当我们用volatile关键字来修饰变量是,就是在指示JVM,这个变量是共享不稳定的,每一次使用它都要到主存中读取,而非是使用工作内存(本地内存)的共享变量副本.</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性:"></a>有序性:</h3><p>解释:由于指令重排序的存在,代码的执行顺序未必都是按照编写时的顺寻.</p><p>实现:在java中使用volatile关键字可以禁止代码进行重排序优化.</p><h2 id="happens-before常见原则有哪些"><a href="#happens-before常见原则有哪些" class="headerlink" title="happens-before常见原则有哪些?"></a>happens-before常见原则有哪些?</h2><p>1.程序顺序规则</p><p>2.解锁规则</p><p>3.volatile变量规则</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql学习笔记(2)</title>
    <link href="/2022/09/18/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <url>/2022/09/18/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="MVCC部分名词解释"><a href="#MVCC部分名词解释" class="headerlink" title="MVCC部分名词解释"></a>MVCC部分名词解释</h1><p>记录给自己看,会比较乱,望谅解.</p><h3 id="隐藏列"><a href="#隐藏列" class="headerlink" title="隐藏列"></a>隐藏列</h3><ul><li>对于InnoDB存储引擎，每一行记录都有两个隐藏列<strong>trx_id</strong>、<strong>roll_pointer</strong>，如果表中没有主键和非NULL唯一键时，则还会有第三个隐藏的主键列<strong>row_id</strong>。</li></ul><h3 id="版本链"><a href="#版本链" class="headerlink" title="版本链"></a>版本链</h3><ul><li><p>多个事务并行操作某一行数据时，不同事务对该行数据的修改会产生多个版本，然后通过回滚指针（roll_pointer），连成一个链表，这个链表就称为<strong>版本链</strong>。如下：</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202209181854965.png" alt="image-20220918185442529"></p><p>通过版本链，我们就可以看出<strong>事务版本号、表格隐藏的列和undo log</strong>它们之间的关系。</p></li></ul><h3 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h3><ul><li>它是事务执行SQL语句时，产生的读视图。实际上在InnoDB中，每个SQL语句执行前都会得到一个ReadView。</li><li>它主要是用来做可见性判断的，即判断当前事务可见哪个版本的数据</li></ul><h3 id="读已提交和可重复读的readView更新是有区别的"><a href="#读已提交和可重复读的readView更新是有区别的" class="headerlink" title="读已提交和可重复读的readView更新是有区别的"></a>读已提交和可重复读的readView更新是有区别的</h3><ul><li><p>READ COMMITTED(读已提交)</p><p>每次读数据前都生成一个ReadView</p></li><li><p>REPEATABLE READ(可重复读)</p><p>在第一次读数据时生成一个ReadView</p></li></ul><h3 id="ReadView里面都有啥"><a href="#ReadView里面都有啥" class="headerlink" title="ReadView里面都有啥?"></a>ReadView里面都有啥?</h3><ul><li><p><strong>m_ids:当前系统中那些活跃(未提交)的读写事务ID, 它数据结构为一个List。</strong></p></li><li><p>min_limit_id:表示在生成ReadView时，当前系统中活跃的读写事务中最小的事务id，即m_ids中的最小值。</p></li><li><p>max_limit_id:表示生成ReadView时，系统中应该分配给下一个事务的id值。</p></li><li><p>creator_trx_id: 创建当前read view的事务ID</p></li></ul><p><strong>InnoDB通过Gap-Lock(间隙锁)在可重复读的基础上解决了幻读</strong></p><p><a href="https://juejin.cn/post/7016165148020703246">参考链接:看一遍就理解：MVCC原理详解</a></p><p><a href="https://www.bilibili.com/video/BV1W64y1u761?p=44&vd_source=1fb1e3c636db747e05f4582c307a55be&t=68.0">复习回顾时如有疑惑请点击</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:HashMap的一点知识</title>
    <link href="/2022/09/15/HashMap%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/09/15/HashMap%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="HashMap的一点知识"><a href="#HashMap的一点知识" class="headerlink" title="HashMap的一点知识"></a>HashMap的一点知识</h1><p>HashMap是一个存储key-value键值对的容器,key唯一,value不唯一</p><p>其内部的数据结构采用的是散列表,即数组加链表,取长补短,实现查询效率无限接近O(1)</p><h2 id="为了达到查询效率接近O-1-需要做的处理"><a href="#为了达到查询效率接近O-1-需要做的处理" class="headerlink" title="为了达到查询效率接近O(1)需要做的处理"></a>为了达到查询效率接近O(1)需要做的处理</h2><h3 id="1-如何减少哈希冲突-元素足够散列"><a href="#1-如何减少哈希冲突-元素足够散列" class="headerlink" title="1.如何减少哈希冲突(元素足够散列)?"></a>1.如何减少哈希冲突(元素足够散列)?</h3><ul><li>干扰函数的使用<ul><li>将元素hash值进行高低位的异或,使得参与运算的hash值同时具备原hash值高位与低位的特征,增大随机性<ul><li>右移16位&gt;&gt;&gt;16,为啥能增大随机性:举个例子,老师点名,班级有三个同学,那你一定很慌,但如果班级里有三千个,那你肯定不慌了,数字越大随机性越大</li></ul></li></ul></li><li>散列数组为2的倍数的长度<ul><li>会出现0111,除高位以外全是1的特征,为了散列,同时还提高了计算hash值的效率</li></ul></li></ul><h3 id="2-数组越小-碰撞越大-数组越大-碰撞越小-时间和空间如何取舍"><a href="#2-数组越小-碰撞越大-数组越大-碰撞越小-时间和空间如何取舍" class="headerlink" title="2.数组越小,碰撞越大,数组越大,碰撞越小,时间和空间如何取舍?"></a>2.数组越小,碰撞越大,数组越大,碰撞越小,时间和空间如何取舍?</h3><ul><li>数组定义足够大,数组的大小为int类型约40亿**(不现实)**</li><li>合适的时机对数组进行扩容(扩容因子为0.75)</li></ul><h3 id="3-默认通过拉链法处理哈希冲突-但链表过长怎么办"><a href="#3-默认通过拉链法处理哈希冲突-但链表过长怎么办" class="headerlink" title="3.默认通过拉链法处理哈希冲突,但链表过长怎么办?"></a>3.默认通过<strong>拉链法</strong>处理哈希冲突,但链表过长怎么办?</h3><ul><li>超过8,采用数组+自平衡的红黑树,查询效率接近O(logn)</li><li>回到6时,回到采用数组+链表的结构</li></ul><h2 id="JDK8对hashmap做了那些优化"><a href="#JDK8对hashmap做了那些优化" class="headerlink" title="JDK8对hashmap做了那些优化?"></a>JDK8对hashmap做了那些优化?</h2><p>1.数组+链表改成了数据+链表或红黑树</p><p>2.量表插入方式头插法改尾插法</p><p>3.扩容的时候.JDK7对原数组中的元素进行重新hash定位在新数组当中的位置,1.8采用更简单的判断逻辑:位置不变或者索引+旧容量大小</p><p>4.JDK7判断是否需要扩容再插入,JDK8先插入再判断是否扩容</p><p>5.JDK7死循环,数据丢失,数据覆盖的问题,JDK8采用尾插法可避免死循环这一问题,但数据丢失以及数据覆盖未解决,<strong>毕竟是线程不安全的数据结构</strong>.</p><p>[参考链接:HashMap这次是真的懂了，扰动函数、负载因子、扩容拆分全搞定 - 知乎 (zhihu.com)](<a href="https://zhuanlan.zhihu.com/p/309991114#:~:text=%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0">https://zhuanlan.zhihu.com/p/309991114#:~:text=扰动函数</a> 在HashMap存放元素时候有这样一段代码来处理哈希值，这是java 8的散列值扰动函数，用于优化散列效果； static final int hash (Object,()) ^ (h &gt;&gt;&gt; 16)%3B } 2.1 为什么使用扰动函数)</p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电影&lt;&lt;花束般的恋爱&gt;&gt;对白</title>
    <link href="/2022/09/12/%E7%94%B5%E5%BD%B1%E8%8A%B1%E6%9D%9F%E8%88%AC%E7%9A%84%E6%81%8B%E7%88%B1%E5%AF%B9%E7%99%BD/"/>
    <url>/2022/09/12/%E7%94%B5%E5%BD%B1%E8%8A%B1%E6%9D%9F%E8%88%AC%E7%9A%84%E6%81%8B%E7%88%B1%E5%AF%B9%E7%99%BD/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="579876309e5aaa3a29a19574ff17f8250133cd09a5d3654d34eec963ef93cae2">ba8c35434f82bdb0b8749538e49486c541ac37556674ee9d1b84fe637280abec1b9e808c48dda49fa697627a84da76dcc3e26835aabf92f640090efbc1023de6396ce5f1bb1780e24714d768825c3b044c01f457b955e65f4bb2e197b098057a422177c6753b95064f0f75fc7cb22e666d8493251ab17359694f4aacbdc22f18d128748c21ac5792ed6a9e3a27e25dde690807d678be8295fe14b9c2a32465c1929d0d8a932d2412e0867254dd50f40c8efbb018c7d627954c5322b1f8e80f53fba1b986a610b388ce91f65ae99f7496388b3b718e18ce91c2e52a32fecfeabd317649106866ebff98c1452f796b2a7e11f50da52d96174667d07d86314a705c310d047bb26dc139c617dc1614f85edd47af791e87866aad2b5f9037a6206b3bce3bb97adf9899072cca6b87482c01c624e3b5bce1021458cb5c59af466c7eed3ab8c8154f09f1ff0e3159839f3d79161fdd34f0116fba3f494df69bc335679df3c51c9626cc2cfd7754b6f013a7619bca472a0b76982261ed0ff7d9ec3a31cc28949d868f5c3e9b5d888bf18886eaed83081c02103d94743c6082ff07644178b4d6b599b78c7e33cf8600f065c9f997948af0fe79f88531b99ebb05404b907a7e4da033db4282a482d43b704b6a69a3907b19d8e09706683a04e31c5c8b033d2732dc4f3e9ac0b3fbf4d67640bc140d41f6485bcc7c0a0fdda9beb0f847e650bf63abb54443e24ee2c9e99f850166292cb00d8af8d80fbf021caee4e9b4941cda85ef70c72472334680070c4fd04da3e8bf76305d155963c33300775a48c2f8c0517d89f49c40ab1ce26a5511b923561eadc24aa16fb72fbef7ac11da0e299368e1c550b2244406cf0969d31ad96de9f8ec0a4fa5c32a5fc0f788eff4cb0456ba1c1076c715b060a63d27bd9b14e72138ef9b6b54da713cbdce4744db9945213898de62597e4ff527d29e0ba3781ec86645ea79dfedd736d90bd987fe8f73bd61464bbd283259e07ccdb15e3b45d49111cbed4a4f0bf69921cdb700bdc2ea60174922697dba267530bf5c6b52f63f19a5bf62a4d329512163b2ccdb069e245775fcf86a4c164429e714e89dc26bede9c3957efdaa42658c902d2a565b4fa5711c9d9bcdda83021b81523aab967ad82eb47ded55c60dd3d23e389e38170f4a3bfe9473f393fc811d8ae7fea71ebf08a7f2a9c242f653539665a39b02e484f8faf3c4332f0f6e790fe8478246e1d99933102770f9e555a719ae978f90998895f5bd7ba371df33ce89aa1f7468487098cbae68c20075b3b529881e7bf97a781107bd0cdf48d7fe05a41aa908a909c2a651a08cb5e2d66c04e843e5a7647e7b940ef098efefb13736586d3b92f116901c4314e4c12ed8147f33260238e8bbd22ba95092ac696afeb47c12c1005b90576d16279fd8e15a771e8dcef53ab70d8d2d1fac4926e62c1a559e370b2885a98bc9aa2541d3fe1dce6640bb03a705b6908737f484c2526b67002e1188a28651b8e780ff0ff03d8a6e8a7abd94faa557f15bed203e65d4fc2bdff2a77b654f4f5d8391730d40d421290bd91c2ebd68b6f4ec49b5f9c96fae00d0e3973fc1bf9f110dd15f7b40a7fff86a5fd7b96f2f759cdc7368cdebf6db1eda3e60270339209f64e32249ba0fda38cd82eda67fbb9b3644fe87bc83b549007577d1c5bd783fed120957ef4be3688e7a149da15f24b22fae2b5b7f24ae9f58b100cd831a8ee6b42810f209c56048e214427fe39e09daf6543226b4c3f77df3729b795e8ffbc09a5cc9b32a57537fc9270c138daef9e850f33520a9d35d06c053a6c8c4235b7e31a7c24729370b4bb2d3cfcb9ee5dad6948935a0aa3e60071c4e480895dafa7e13515616e44c22e024c5c5fc6630de407662860cab2462031a8932749d54bfe63bb592a9744d29fd22a5539603e5dec4eba2fb67a91a89bb0080c70ab6bf36080abe16ea46246e9414eebef8ca27f6ab99673e4f5b6b9a1e9e866ff4a22eeaf7ca3dec0556ed5335f1c6204a695734c5111eebfbcf88a585268c9df2b2bafe871b50161281774c416b450fa560443fb6de426353975cddcc09c64bd8ff76c96251990779536c7a12464aab88e183dd2de873436ccc81a485d29864df243b25bff0802a1682866408022de04f810a8c5371dfda166399d14cadebb38faae2bef179db38ef3058bd7add52ba6a2b6a28ddcefcbbd695b72db5e9a2d4915b19fe3610ef80050501751e65f8071df7710ab7a50585914450f29591123bdceda740d2a88406fd0a20a2635d684e27e56a8d2ad67fad7a61ba01e63f49ef7c3da3b094acbccf2ac10bbc97eff64db744db07a7a8960ef167593ef8b6dcf8f5e87362b7c06fd2370195b37fef1b7542b0fb8935e17de81217fcbf4439f4ed3c370caabd9154484075a4742471640d8c22cdda36f88df8eb28f0ab2f7743305f3df6fea8616d1580fb0f7c33329f84448ab6ef9490c782522157d50b569cccc69dade05b65b796cc2fdc4ffd6be810d326ee7394f2f7db8033c4694c7d809dd28e9665dca2dfc62e5b3190318299191bac2070c3aba0b168a9d36129041322e33e566cd75bd9fd4d95c9e390882461d7014046342df250b6457f86f1c12b91c8f237b638fe77b10bd84009b3416978043c269f8046a1020c000eb24bc874cbc14ffa2c924d7e4ff54b1c0b3f451422ca39eb05f80920a24f8959dd36bf027b04505ecd90e030962dd5f7b76d622251f0300c5f76c68ec6cec92f13db2c6ca2eee627e09df19a726b034245ef9584093b1deadc31db707dd5f88b30767f66a79587baf7d259194a522ce91d9a400f7d26d34dea642acf9a0f48c07d8a2eb9a6667bd0432016b68c99ecc2ca77496219f88b58a08ff10a44e444ed168e4e6c3da6d7fbd317be3d2fa1e23c3d84f6837df45e74e6367ee15df0ea7d48c743e129fbe3c798a0d3ae6e7c10bdba8cfe6005d2355cf5f7b5de898a5a6c04a11e743128138ec9b57b18b2e25a75698db8e7aba58e90de053453aff451be771b67808b4213d974790e8d211ba8bfb4c2f17fb55f6afdfa5aa15da506b882179debb88c7d9185df441cf82a93b9552ae4998eaab0d023c88a40f27f0fe32759ce50d839276a2473c0155d36d14715608dcda4f2726dfc57bea83b9ddc4d4e1d5b501d166473f14c2b9c366b71c2873be816f092249fe31a99809da77051c7a47dd78a282a5a523b028a56c076f6a251f276834e254cde8a121d2a6a5449b35fa5cce8a2d33380f192284c02e278987ef7f420f7269c850ee10017fdfbd71b8cf3ae76607d02f740069d7a14ee04c93d3ba62c6e1f817f5019ea1097b5d4b62f3be54880eeb9d869dc49b6ac30d628ebd63efeaba1702a1b46c04d5f71e125e1ce59d30590f505b733217f2bb002491f3c3c435fc2775d67d3883a09b0ed53027ff104f26869dee5383c8709cb08ac9ccd2ab3862f36431eac00a52642701bde686b82d6fdd735502d58eb5431cccfd4bf4528358ff70f5accce468092e5ac625c0701f0369d8e79bdfc5d8b76758680d1e9cf1516871845d7c1565cf35864e1f79db656b3831194b8ef03f62a6d7f0c2593c5bb4ca11e8625b99a2640e32b878e60f2bc8be9c01da5dd251f8dc79cb86bf43822aee16656d0a5bc687625e1e3e15f2cb3128c11533299ee6f91bc45c8c751234f97f021fa39b0d8b12cbf541759f89b6f15a31462e2acefe2cb9f83a138d41210e0e7ed5df6cc62d9e59647d59bd66acbadc28515ab20d2cb73bea296e6563cfd24e216d9d9aca4fafb654db0ce14361ef893b9c9ca73e638c1afb5c10bddbb19e86ad8c51c0f7e0b82e911fc5c0b7e2301315383f7dd2e16f73c4314b59fdfb7b774c8d19c01495ea56be87244a36fd2feb5788d2335041c76af7b487c9874a905eaa57c8311542e26f4d1fe12ae35b75e60ef725831fc255b9d102c00a09ae48c1ba17725f745d4c0f985d783532fc9e06975b4e157203329b121eac4f203c2de625beefe32c083e16f77dd339a6c973fc65e382b30d678121c74f083892d7341c9c464c51865e16d06751abe80e774b09a8cc57077901e5029517ead6a34a15d944fb00b84c41fd6c64b960deb56715a30e425c2790bcb6371d3fb88ea277ee3dd88d5d2ba677ef8bf9a669b07999f3971d9953021dfa6622898f16dea011366940221f1d4eee8b6fa9ff0f651deb77fd59e452a2964520386543cc4211f0303bebafad2b366f67cb06030cd51f26c0573f2b33fb3a82507446dcd31b147384aa2c70799640c386abbc9b86f91b44dd6a983e734e34424e5ddafa7cda7bf3aebd6da58281145e2b5448ec0fe8e6412109efa686073089d254a853f825aad72bb618f0850e49817fa84fd32c639b961207c1aa5950dc1fe176f9cce12b5f9ad9f2b0b6e3636740ef6900f2edf766b0b089087dc5c629f043bba0fcfce41cd1c2a0ddc78ad5edd70c3b24a33f209aaa761bf5505ecad17de5638ea171c7c2bee3b26e875c8177b1e1cb5ca95c4e97009190ed1a354f649ece5e3621b7cc80d225b08fd4ba680046059bf4e1b27b1eb8f40a78e1db67cbc5f49aa1da300cfd98d02694256d032610df090216c31fa6e1586b891ca54b898881589c8df8a9461e19c7f427f5b58977799c8ff49bcdaad475042a3019ae2c51f5ff660198d3c0da2441846f06037e40ee398d8b486ce18b449e3ea844ae2caee38b9480698c5fd267835685822e1725a29887983f29b2da3915afe7be67840818bb05bbb2688efe735873206e5567cb536e70d3f8efeb63970902277f0e8f6db3510bd9e5a2aa7362d9f06fec5b42dc6a66f08af437c308ab671b6c6d40474024287b4248e7ffafc56b8dd6a1659a1c86e949c7bd35824e979a8740bcfca8512de67d6f3accefc3b2fc8f9dd57c486b9dbdb8597869444fe32676b00d515374dc9fb0f4f87de5f717f0fe2f34ae0666918a12fa607b2c6bddeaacf769c2bd1e742ee8fa5462759854d2441932e08423d79784f7224558d0bf0fd2fb6a329c7a03b78b8c87a1848b971fbad9c45a05449fbc16a89e41b0105e2c13388d58f7d62cd9f05364fdc2cd586ab5837a6f0e756f8b176123e69deb8a7bd643e574d4d23d64dc5c9a3a627c01990c8b2aa3694e77a02731270f596ce55721e19dbaa2dbf1a46fd16456d630a9fee2746dae71b57190f2a4418d5ec0c1f23bc7af365f616370b9b2cee8d0f4da96978eb2e9bad180a6405226769f0267e583c09ea8f914b919f1c8e8dba978f48fb7d8ecb59865cc2960c9e5e51607b6e5911e5ca15384648cd950129d4317aa271256d4813eefaa383b378d366424e39b04b5b580dda5cf51e3805351a4ffa663e645077e91f4439a96efd01afdbdc1bd712c046597f91d4c3c924c18cef8e816110589908bcef4e9ba0eed565c662309bc6e7a1538df6139af22ea148e53505afbf67992c5de6790f9a19950348e9a37a71019ba6faefdd5c9c3ea623cf8bc133330771ea1973c2234d143a99fa1f755e32c41717c1a0bb4269759bcb869117f21144783f9edea8be75121c4f0800b6e1ba69ccccd36132a5c9b0aef6eb9994d6f58fef1e62e963b5ea3c335c3584cbe3a2028f29d5a4200d71deb3e1ee92c7b8716eb746c93127b1c3c147357150a2bb04422af202a8ee09863079f8964a15ddedd2ee0e3c980c0ecd8cc8bd893b88c7c4c6e2b382f2b21bc9db7cdcfd198c0b585019969b8bf0db5d2826e8d4ca40934de17c18c1ea7c348a3745c850e40787a0aaa4155a3e6535c3e04b9994883b065aacc008576713a369fcbdac43160c04b0de7e4a0505cd46928fea2499d7508e9a9817eef7c8c1ba9736f1fc35da430a3fde00e64550b753dbacd2b022b3b936aecea0682f59fa248882008ff5b554219f718092096347ec0d78b730f7d6fde4adf9a66ff75f6e2128026de074adbd120f77fccc6b6618b588b80ae5616ed8cb4202af4b7911656bf3ad30a816d4784afee713be7e6db25430573a28ac9e0cba808223e7f884253b0d24dbe323b5826c566ce67532ab827c132879eb29331991c6c0a2c3bf122d08065c6f649d8f0624f76a230272698a0fa8df0891ed862f2a9230b97dc3d12162c1ffab403fd1a9935396f277c7b1022838a306fd2217eab13b4817b0d753b0b100eb1233e611bed8a410d50ca12ea33d6a723a81ea08b59bf77d2dbe5f1fe26abafe58e868696e54b12d10ce8c9162fec32686c3d070ef1b0b2b35cacaeee219ef80cc6356e55ee8db99190e506820ea7be6a456ead61d08f708a36a2e996f9594bcce19fc12427bbb45a39de450a1a9f99474a4f2f03ea0809f29cf2b71b6cbac74d701622e214f5d09b553a6d523e77817a6ba7677c26b834167eca0ec6cf28b03fd2a4b5c83eca1c9e13926394e9108a03637c5bee3ef7bc25f5343a16b241743b690d70aa90392f6a4932b110ec662df1d72f93790b609b0c64dafbf8c74253fb7a6cc370146445ae5066a5bc004a2c6e75a07dac0ad5848d634467c84b44bee2c14acc8d98710cd2a2ff98873f51edad77a2fdbcfcbdcef4dd42f405a82ffee70733d520b6c7ebdf38429011af1b5058b44017c65fe1ea08c7c546a012be335cf4e18c45acc206210fdb9b5eab1b8d3179fdad634094888ddf6f407be16838c1449c1b52633af722fb34ea1a3ed2a7334b984c0968b031057b7fb821acb3de2f586beca872bfa0b53e8e1137cc6f2787bc281da402bccc2aba4cae50097f5951afc86de789ce1a9ada7b19bc230565e2b6809a59d7f3ecc0590933eed1ed484ecc72082bf8f21c779f29b1f80a2d24144d64486d0007a7158cc47912bd3f3ce433504cc12898a8b28ceab1c53a155d05a29f1803b4bf41e8bdc7582d89aff443917304bd0c6a2a6e0d98141abcc1c111bac6598117e40d9d885fc664847353c8060869e687c141479544d94aa173b7daf08201712deaf4ee10166b3e3c1aee6b68d17c0c561b0d4106cb41adce8e92ac4b0f86d6f9489f3eb32145180ae611345fdf55ddc1850a54610dcb795304a417d4113421339ae7ee77dd8f55c577bf7ab2bbfd7e70068599f49c0412560a00284c764c588b4a2bc7cac94af7509f1c4c23a1150cb199eb74387fad293c2d30605daaf5b7c096cb3d5aa5e1358cbf00b1185c3f5400fd8034e46b5ac5fc75f74ee06cf2d9b7c542b5b629b685bb18f035563362c606b62ca63834418dfcf706f71ea4afd2a30c76f54428b9f2072da8097f5d7ba54b2bf074662037217e07a8892dd2ec3f156ffa3816d9d61d36c73580b0ade83934147a107a20b470fb2d0db0df32810eaa1527e7b666c5e140e069b4b491aaad58809b69882cc41c7e820536e290d4940a401afcdc8ddd06784b8997b0e259ec37be535d9c4b4993600edc888b9e2f527cbe2de95b2eb5a1bda0f51ab569d73559d2a32ad3a6a9a2d41c74e9f6e0d8c7cfca44c8c05dc99a34e6d1be7c774cdcd56f0ba238d3f89afbaac3753763bc6a4e59a642743164cb2b1a24dce63b8df926b15c6906bf7f64916404c7f6ef59c68e1110a54b3810e6feba2a921b262cd736993ca976eb59fa09d4684a75d09492895c3bc5673219c1dd236a717ee5139cee98fef7d6aa237598842fad27f188d910decc8c89b711b5082b81728c970da0afca190e1c08570ec9b898dc11321d3a50d6aa10a193de2e83d51a48214a402c9176d0069d0ddb2d7ae7cfb6c448fcc8d4307fa202dcc2312391670daaefdea5fee74c3de58340c2cda8ced34b1fe939069701c509f879c1d192e63ece7689502c157b7eb2affd44ebb1724a04c3516ceb7d8a12464b6ea55991ba8c509c954a82f756c282d24fcd11988911a4508466998ac33fe28894e782711485fa57d87186b8d24e335a210e884d140fa7888656457df1ad43ef4c02ebd48b6a475509582e8c30686395f812a816149f8ede4be1b0c919a34891800b2428eca69217fa6fa80c57183f4375d3c76c98ece76690db3f167e93f8b173d7aa674800dc6b21d70b2c9a9e781dd384a1dae65860fafdfcbd1e9dae22864d8b076707209dc9b868463ee3d22655eb4006bb89d8bc4cb4b891bed8683129c5037e9cee90f21e2a090a71c33f770e4af00d8952ae370670e6cfbcb4c0827085643a69f77b88db66b82df7dde677ba6a8ca656eb3522f798e34366981469844b2f06af661986479fdcc2e05c15f04da68c533f790537c086cedf6a27eb5f993cbd0013bd3ff530e24bbc2f02dd8da7be04593dd5f8713448e2cfbaaef8a8faa8173e3363a94c91048e4ac84ec1f0cb6c18091a08adecfdf1b8e2d483a19e809165a92f13cc253ee921227d27b916b558aaeb7a55c7416c936403ac9f199fa5739a0c01dba8e6c3e52497ee5f7f6e39a29b810fb3f314472f9b4c7b7e0893cbb0a2df5788a85f8a30a6288898ed7fc7a0904d21f0ca59cfb4ba8f9c3455974d711e0a6e83098be176ae7b4ac7827ea66c5a8878aa5f4053a26271486aca0e6dd4250bbcde295afad16d96fc74e1a0f7112000df4b9cfdd003d2b4cd406ac0ea673dabe7c09700f6689923983fc8921ca840bd3ba3b10d28e16e32802b100c3433582a4004a846c30c5656ba190febe940488f383ebdc91d84a71792487fd701f12de8f4ef2b9b2d7384597f5aef9256eb11f6c384efa38e9c3500bcfd9d34d1c9fce3331b4c94ab571901e821a5a6504cdeaaa51380b7ce01836dea34c3defb4f07360330965c93caba3d51391737f06b9f5790c1fc7710a2fec5f7818c2ad4b577094129b36a5673f7b1cafbb6e04203bb978d537a7150baadc66fd703a3081e5bf2689cbb7943a3fee7af72ddcb028195ce73a1c4c8f0f856160ed5330a61065afd11af26a982386a803cb796bcef66c1706382e75f5d539bb00d0205ca54c2bb686f15532911eefbc1581ec5fa7b032b6a25aa09994844c9036832df5d01470a8e7d5722e9f6fd39a8a82074e48f840fab8a19c6d77c18d2816958dbd5970621452ac1596f1efc8939b7dd4d8876d9b53aa5372fbc925fb6acf879d2d62756e9dbd6252bd096cd58f391c7c1e40f9c207f5085a719061e70f23ee2c91433809d7a2be9fe8179f79358e398adf7a912337979d39ce4bcef7861415f5d9e0472a6d9330d827e1ce5a4bf6f68132d331839ddac89c390d8c1ff8a830147c6bd0c01ac8ea93bb02111cbfe243d4e56f9e44bc7df17609a4eed384304a6129e2110e101c92d7915c2493cb13f718bac90035943113bf7bb8145e474fbfdcc041a0692f9cb4f3940cbc34be31b0c5f22001ebdbd1d1bf8b03e3afeca022e0c13da7c871d496589793eecd8a18f7da2cc05f0f00ee518a96063dbb4288b4eded4773cbd91f3b2606367853328ae8c72af18d40258e9163ff19b2a14dd4a2e46ae37085d521b95550a57ab95e6251253dfce05ec9f8c7842b009bed1d9b224eab55ad50477cfade6ad9021f73ee1e154aa3e657f7a368c5200e8c006fdfab402eba5890f9d58901954fa3cad191446876f98de2ba4faf57169dffd3fc4aeb09c59a7de04513c12a92578208ac29eff83bdcfdc5fb8e7a8a54b89e46e0daabead90b3099f0e4333afd1b6b9ba4b19eab0df13a8d8cc5381a6fc5f58b37f9e0232acbcaea88a04e913fbd916c0864ec717231d07d915e8a69f8b5c8c756c8fe82b969ec6a60e60a1580144b159d130ba650d51a0957f90debd3714ba4d601bd782236e51a9e0752bf04e40d5ff3fd002d557cdcf9c0c71777cd3becd97bad431a6ea26c18ddd305ec03045fd3498ebad0b142132ab1ac0f509b037371320be3bde277afd7a9640d12a1ec4781534015bf1ea3d214dc21eff3d9b9e4addf029802a62341ca6fcd8e5a36df9eed488b3ee36f968acac483e5bee25fdc73f4cd49b8caa1a362708bd865db06668e10f390bd079c827db0fdff93a676d7734ff85d39e937deb8a15a5b26d06dd43d87064781f703686f68d6fb050ed3c6dea332a029e6f8f4dccab4c2286568cfeec333d9abb013a987fa6608a655d3bfcfd0529694ac7ef6fe26e0948019aee1bebcc639f08c97f81cba339213393cec551a5d1760bd1b0f9863373b29210bbd397c99151266ad20b857ce3933b7c2a84cda9970f2ed2b0f49134f8fb24e0c46abe1bc8aa805a4899ccf4a44a00414b5fe548e6c302153ffa3d825e19136609cdede8d3b5cfb10696d6b541f6b89f634a311972601d3eea2819cad8c168493e43b249e3dc96f70dc7bdd5842e6840e82437e6688f291a6e12c14b442166969049bdd2fa870c9b1a78dcb2fb47dc706b345ee02f34dfafa77a18d389064b49b3501e7f3aead97a2fd8c99f9e4f3d828ea6e044e896e3f82d5c07e82795c79086bf1efb58ccbe764877f349ca802c2fd48644a556a31168bd4585943978abb4193719cfa8cb2144dde6278e39696c9a43439fc6e4a38220704b15ee4f5f52ac8c27fb318317e53a59e72d066110faf7aca0e4f6c3d1916a9866b18ec33306bcdc9344dbbe2cf9a21d0f5b0c405dc9964a494a3cc1222acc43c2acf9629c07357fd82dd554379cf4d1bbcb3476b78530ddc0998dd710016723f44c88990e46a7095ff00e328998478d2f4364cf86e91e1186eef8fa17295ce0d8e0bc29fcb54bafcca21432f9beb31dd0b2d184e728ea84265b59d6c944fc6f80dec5c63acc7fb57a397dbf8ed95df29f3c6d9d0ca32980fbe46d55b22fd69923b9c8c17486385b5a753410c233ee2aa85e48a237c25be758b49414f1165cb171b4475d2ddb76db78e8c09d365433e311711d8a17ab5e0fa7577a7fdf57a86ef4afa94a77f885dc97760180326bf3f521cf0aeea16be9ffd5645a776e746bb336e04bcd62d982ffe7817d5b5684302e9972792032cb3f023f259c8ce9b37d8435645197d6790e89528777d9f7d0875617cdd9654cf927c400d0a704bb341441cd87309bd4373b4725689db3e130e9f16358c8e41134e9df11fed46ac3be2ee78da2daf48d115406f747680916b2366c6dd0d59474d3f282fcc3b2224ec44f48384134457c0cd05d2ff83556526fd2dd77c11568c03ec2855f53f223e9e6e0647b410bbfdcfd4e5798d036defbff3174b11fe2dc69334245bf07c18afad4e6a935e9558cb1415a0dcd661a298b064952a8911855f3559690b8bf33bdf735becadc573c8bbefd0aa918937492f388380b8acccc3a2b41fdf3d309cd6dc767c2341494cde1436c104a7d7f09651f60ba98a8e2467cfc68600720cf1978dd411e07afd3f4dc09b2c47fb1807b02be731c004c05236b20a3c79f7b169fcc4d7e7a8cf135c4b4fa7ff3e07f4dc247ec71823030aebae8829d4ab7bf99841fd6f970c29872e3d326d9a1bcf1a8cbd716f0b561e3739e314967e2280ef40cec471d16f3297742a24f40ed0a26971e23b6335643ed0c96d2a073aa5768152d65be72e0c739f50e2832c21074a8210130ee9a562ce912a9dbc4658cc69b87c3f110edd0cb533b96b42f71b2b76ea438864f2952019bd21672958c85c339ada42483d96771e6bba285c32ccf1bd044a3bf5aa79e978aa1e591914a3c42b9c1c88a122b36c0f1f705a19ca27420806c272735b28562b20984e1a564cefee77cd677ab369c93be8cb85174d61b4a36b6e999361ef46e296205f96a89f8aff881b1e9dac05b9eda4d6004194dde20b2d8c7ca82b7b52d896fd7841108fa997f30eead9addc873325b5ad5b425fff9b2c1ee224a2a24be203f06834bed4f78d4e454cc50450d26ae6e37fd0632b7e7d1e18453e550af097ae04eb9ef1b07a6b467cc00a6b4f4309b1de08163341863947858644ce77c5df3aa2c5fa7fd47e7acd26aa3a9c16c91fbda14c615de7bd5a7a9bf8772449b5d995f11b7f1d4a30324b06f06c7ba0648c67a3b7712a4c43e452a35d6ee87a3ec136bdb16da8d51fd7f4daa9819334518a82f4d9d7827821d4ca22f426845cbd04aac928f1e697d7d1e11b47b06f8792162fad180dc5142ca1bcd93025df5a12f2c9556b8876f9d41a27b5b0ef79c9bcba45</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>摘抄</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>摘抄</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每周一炼:链表(2)</title>
    <link href="/2022/09/09/%E6%AF%8F%E5%91%A8%E4%B8%80%E7%82%BC(%E9%93%BE%E8%A1%A82)/"/>
    <url>/2022/09/09/%E6%AF%8F%E5%91%A8%E4%B8%80%E7%82%BC(%E9%93%BE%E8%A1%A82)/</url>
    
    <content type="html"><![CDATA[<h1 id="每周一炼-链表-2"><a href="#每周一炼-链表-2" class="headerlink" title="每周一炼:链表(2)"></a>每周一炼:链表(2)</h1><h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">参考文章:代码随想录 (programmercarl.com)一个非常不错的网站,强烈推荐</a></p><p>有一段时间没有写算法了,今天又重拾这个习惯,希望可以坚持下去.</p><p>我的算法基础比较薄弱,就先从最简单最基础的数据结构–链表的开始.</p><h3 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻:"></a>前瞻:</h3><p>1.链表的反转</p><p>2.采用临时节点tem进行标记可能会丢失的节点</p><p>3.循环移动两个快慢指针</p><p>4.两两交换链表中的节点</p><p>4.本期题目:</p><ul><li><h4 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h4></li><li><h4 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h4></li></ul><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><p>反转链表</p><p>采用双指针中快慢指针的方法,之前有介绍</p><p>本质上是采用<strong>循环</strong>不断移动pre,cur指针</p><p>要考虑的问题有:</p><p>1.将head.next指向前一个节点,那么原先的head.next会丢失</p><p>所以要用临时tem节点指向head.next</p><p>2.pre,cur的移动顺序</p><p>等待pre节点被cur.next保存,将pre指向cur节点,cur指向下一个节点即之前用tem临时保存的节点</p><h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><h3 id="206-反转链表-1"><a href="#206-反转链表-1" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h3><p>好理解的双指针<br>定义两个快慢指针： pre 和 cur ,cur在前(右边),pre在后(左边)<br>每次让 pre 的 next 指向 cur ，实现一次局部反转<br>局部反转完成之后，pre和 cur 同时步进一<br>循环上述过程</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tem</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">null</span>)&#123;<br><br>            tem = cur.next;<span class="hljs-comment">// 保存下一个节点,将head.next指向前一个节点,那么原先的head.next会丢失所以要用临时tem节点指向head.next</span><br>            cur.next = pre;<span class="hljs-comment">//已保存,这一步就将将head.next指向前一个节点,即pre节点,head.next用cur.next代替</span><br>            pre = cur;<br>            cur = tem;<span class="hljs-comment">//循环移动两个快慢指针</span><br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="24-两两交换链表中的节点-1"><a href="#24-两两交换链表中的节点-1" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h3><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：head = [<span class="hljs-number">1,2,3,4</span>]<br>输出：[<span class="hljs-number">2,1,4,3</span>]<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1]</span><br>输出：<span class="hljs-comment">[1]</span><br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span><br>输出：<span class="hljs-string">[2,1,4,3,5]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<span class="hljs-comment">//注释以链表head = [1,2,3,4,5]为例</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        dummyNode.next = head;<span class="hljs-comment">//虚拟头节点还是指向head吧</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> dummyNode;<br><br>        <span class="hljs-keyword">while</span> (prev.next != <span class="hljs-literal">null</span> &amp;&amp; prev.next.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next.next;<span class="hljs-comment">//临时存储 3 节点,因为2-&gt;3需要改为2-&gt;1,改之前标记一下,不然会丢失3节点</span><br>            prev.next = head.next;<span class="hljs-comment">//很重要的一步,分两种情况.1.第一次:将虚拟节点(以及pre节点)-&gt;2;第二次将从上一次的1-&gt;3改为1-&gt;4.</span><br>            head.next.next = head;<span class="hljs-comment">//已经临时存储了节点3,这一步就是将2-&gt;3改为2-&gt;1</span><br>            head.next = temp;<span class="hljs-comment">//第一次1-&gt;3,由于我们需要的是1-&gt;4,在下一次循环中改成1-&gt;4,也就是往上数两行的代码所做的操作</span><br>            prev = head;<span class="hljs-comment">//第一次步进一,之后步进二</span><br>            head=head.next;<span class="hljs-comment">//由于head.next = temp,temp= head.next.next,无论是第一次还是之后都是步进二</span><br><br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyNode.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="合"><a href="#合" class="headerlink" title="合"></a>合</h2><p>链表虽然是数据结构中最基础的知识点,但也是最重要的知识点,在今后的图,数中我们总会能看到他们的身影的.</p><p>有关链表的操作请记住一下几点:</p><p>1.了解快慢指针在链表中的意义,上面两题都可以看到他们的身影</p><p>2.很多情况下链表离不开循环也离不开快慢指针</p><p>3.ListNode 节点的含义不要乱了,别名(一个节点的两个名字),你可以把节点名可以当作地址</p><p>3.注意画图的方式-&gt; —-</p>]]></content>
    
    
    <categories>
      
      <category>每周一炼</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:从集合类关系来了解集合</title>
    <link href="/2022/09/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%83%A4(%E4%BB%8E%E9%9B%86%E5%90%88%E7%B1%BB%E5%85%B3%E7%B3%BB%E4%BA%86%E8%A7%A3%E9%9B%86%E5%90%88)/"/>
    <url>/2022/09/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%83%A4(%E4%BB%8E%E9%9B%86%E5%90%88%E7%B1%BB%E5%85%B3%E7%B3%BB%E4%BA%86%E8%A7%A3%E9%9B%86%E5%90%88)/</url>
    
    <content type="html"><![CDATA[<h1 id="从集合类关系来了解集合"><a href="#从集合类关系来了解集合" class="headerlink" title="从集合类关系来了解集合"></a>从集合类<strong>关系</strong>来了解集合</h1><p>前瞻:</p><p>1.如何看Java类图</p><p>2.Java集合类简介</p><p>ps:我们暂时不去区分集合与容器的差别</p><h2 id="查看Java类图"><a href="#查看Java类图" class="headerlink" title="查看Java类图"></a>查看Java类图</h2><p>下面提到的的IDEA这些功能，可以帮助你学习和查看类关系，了解诸如主流框架源码之类知识.</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202209070851391.png" alt="image-20220907085137058"></p><p>上述操作就可以查看到集合类ArrayList类是如何实现的</p><p>实线表示继承关系</p><p>虚线表示实现接口</p><p>蓝色表示继承或实现的是类</p><p>绿色表示继承或实现的是接口</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202209070854753.png" alt="image-20220907085452569"></p><p>展示详细信息:</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202209070925970.png" alt="image-20220907092519948"></p><p>按住Alt键可以放大</p><p>此外,你还想新加进一个类,查看他们的关系</p><p>右键选择Add Class to Diagram</p><p>当然,有时候你会发现新加进来的类和原图直接没有连线,意味着他们直接没有联系</p><h2 id="Java集合类简介"><a href="#Java集合类简介" class="headerlink" title="Java集合类简介"></a>Java集合类简介</h2><p>在 Java 中，集合大致可以分为两大体系，一个是 <strong>Collection</strong>，另一个是 <strong>Map</strong>，都位于<code>java.util</code>包下,且都有一个共同的父接口Iterator</p><ul><li><strong>Collection ：主要由 List、Set、Queue 三大接口组成</strong><ul><li><strong>List 代表有序、重复的集合</strong></li><li><strong>Set代表无序、不可重复的集合</strong></li><li><strong>Queue 体系集合，代表队列集合</strong></li></ul></li><li><strong>Map：代表有映射关系的键值对集合。</strong></li></ul><p>Iterator接口:</p><p>功能:用于遍历集合中元素的接口</p><p>主要方法:hashNext(),next(),remove()三种方法</p><p>Java集合类图:</p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202209071055373.jpg" alt="容器类" style="zoom: 50%;" /><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202209071056455.jpg" alt="Map容器类图" style="zoom: 50%;" /><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h2><p>​                <a href="http://www.justdojava.com/2020/01/17/java-collection-17/">集合知识全系列回顾 (参考的这篇文章写的是真的好,而且图也很直观,搞得我都觉得我没必要写下去了,建议去看看,下一篇就从集合类的应用发展来写吧)</a></p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每周一炼:链表(1)</title>
    <link href="/2022/09/06/%E6%AF%8F%E5%91%A8%E4%B8%80%E7%82%BC(%E9%93%BE%E8%A1%A81)/"/>
    <url>/2022/09/06/%E6%AF%8F%E5%91%A8%E4%B8%80%E7%82%BC(%E9%93%BE%E8%A1%A81)/</url>
    
    <content type="html"><![CDATA[<h1 id="每周一炼-链表-1"><a href="#每周一炼-链表-1" class="headerlink" title="每周一炼:链表(1)"></a>每周一炼:链表(1)</h1><h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">参考文章:代码随想录 (programmercarl.com)一个非常不错的网站,强烈推荐</a></p><p>有一段时间没有写算法了,今天又重拾这个习惯,希望可以坚持下去.</p><p>我的算法基础比较薄弱,就先从最简单最基础的数据结构–链表的开始.</p><h3 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻:"></a>前瞻:</h3><p>1.链表的定义</p><p>2.链表虚拟头节点的重要性及应用</p><p>3.链表常用操作</p><ul><li>add<ul><li>size改变</li><li>定位被添加节点前一个节点<ul><li>循环{pre &#x3D; pre.next;}</li></ul></li><li>准备被添加节点<ul><li>ListNode addNode &#x3D; new ListNode(val);</li></ul></li><li>被添加节点指向下一个节点<ul><li>addNode.next &#x3D; pre.next;</li></ul></li><li>前置节点pre指向被添加节点<ul><li>pre.next &#x3D; addNode;</li></ul></li></ul></li><li>delete<ul><li>pre.next &#x3D; pre.next.next;</li></ul></li><li>get<ul><li>也是循环</li></ul></li></ul><p>共同点:链表经常会和循环绑定,毕竟你要访问中间的一个节点总是要遍历它前面的节点,这就经常要通过循环实现</p><p>4.本期题目:</p><ul><li><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素 - 力扣（LeetCode）</a></li><li><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表 - 力扣（LeetCode）</a></li></ul><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><h3 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义:"></a>链表的定义:</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-comment">// 结点的值</span><br>    <span class="hljs-type">int</span> val;<br><br>    <span class="hljs-comment">// 下一个结点</span><br>    ListNode next;<br><br>    <span class="hljs-comment">// 节点的构造函数(无参)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListNode</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 节点的构造函数(有一个参数)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListNode</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>    &#125;<br><br>    <span class="hljs-comment">// 节点的构造函数(有两个参数)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListNode</span><span class="hljs-params">(<span class="hljs-type">int</span> val, ListNode next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="虚拟头节点"><a href="#虚拟头节点" class="headerlink" title="虚拟头节点:"></a>虚拟头节点:</h3><p>给链表设置一个虚拟头节点,在很多时候可以简化代码.</p><p>以移除链表节点为例:</p><p>如果被移除的时中间的某一个节点</p><p>这里以链表 1 4 2 4 来举例，移除元素4。</p><p>你只要将pre.next指向pre.next.next(pre节点是被移除节点的前一个节点)</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202209071521724.png" alt="image-20220907152138396"></p><p>但如果是移除头节点,那就没有pre节点</p><p>你要做的是把指向第一个节点的指针指向第二个:head &#x3D; head.next</p><p>也就是我们要特别考虑头节点,显然我们更期待更普适性的方法–那就是我们定义一个虚拟头节点dummyHead</p><p>所以dummyHead的意义在于:对同一种操作统一代码逻辑</p><h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><h3 id="203-移除链表元素-力扣（LeetCode）"><a href="#203-移除链表元素-力扣（LeetCode）" class="headerlink" title="203. 移除链表元素 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素 - 力扣（LeetCode）</a></h3><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,6,3,4,5,6]</span>, val = <span class="hljs-number">6</span><br>输出：<span class="hljs-string">[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span>, val = 1<br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[7,7,7,7]</span>, val = 7<br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p>不采用虚拟头节点:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>          <span class="hljs-comment">//删除头节点时另作考虑</span><br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">null</span>&amp;&amp;head.val == val) &#123;head = head.next;&#125;<br>        <br>        <br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<span class="hljs-comment">//切记这一个步骤在删除头节点之后</span><br>      <br>        <span class="hljs-comment">//删除非头结点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//确保被删除节点后面还有节点</span><br>        <span class="hljs-keyword">while</span>(prev.next!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(prev.next.val == val) prev.next = prev.next.next;<br>            <span class="hljs-keyword">else</span> prev = prev.next;<br>        &#125;<br><br>    <span class="hljs-keyword">return</span> head;<br>      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>采用虚拟头节点:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-comment">//虚拟头结点</span><br>        ListNode dummyNode=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        dummyNode.next=head;<br>        ListNode prev=dummyNode;<br>        <span class="hljs-comment">//确保当前结点后还有结点</span><br>        <span class="hljs-keyword">while</span>(prev.next!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(prev.next.val==val)&#123;<br>                prev.next=prev.next.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                prev=prev.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyNode.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="707-设计链表-力扣（LeetCode）"><a href="#707-设计链表-力扣（LeetCode）" class="headerlink" title="707. 设计链表 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表 - 力扣（LeetCode）</a></h3><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针&#x2F;引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p><p>在链表类中实现这些功能：</p><p>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。<br>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。<br>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。<br>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。<br>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyLinkedList</span> <span class="hljs-variable">linkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLinkedList</span>();<br>linkedList.addAtHead(<span class="hljs-number">1</span>);<br>linkedList.addAtTail(<span class="hljs-number">3</span>);<br>linkedList.addAtIndex(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);   <span class="hljs-comment">//链表变为1-&gt; 2-&gt; 3</span><br>linkedList.get(<span class="hljs-number">1</span>);            <span class="hljs-comment">//返回2</span><br>linkedList.deleteAtIndex(<span class="hljs-number">1</span>);  <span class="hljs-comment">//现在链表是1-&gt; 3</span><br>linkedList.get(<span class="hljs-number">1</span>);            <span class="hljs-comment">//返回3</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//链表经常会和循环绑定,毕竟你要访问中间的一个节点总是要遍历它前面的节点,这就经常要通过循环实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode next;<br>    ListNode()&#123;<br><br>    &#125;<br>    ListNode(<span class="hljs-type">int</span> val)&#123;<br>        <span class="hljs-built_in">this</span>.val = val;<span class="hljs-comment">//你要我说你什么好呢,这都能写反</span><br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br>    <span class="hljs-type">int</span> size;<br>    ListNode pummyHead;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span>&#123;<br>        size = <span class="hljs-number">0</span>;<br>        pummyHead = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br><br><br><br>    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>||index&gt;=size)<span class="hljs-comment">//包含虚拟头节点,size比测试用例的size大一位</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>      <span class="hljs-comment">/*  for(int i = 0;i&lt;index;i++)&#123;</span><br><span class="hljs-comment">            pummyHead = pummyHead.next;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return pummyHead.val;这么写每一次调用get方法你的</span><br><span class="hljs-comment">        pummyHead会改变成你get的那个元素</span><br><span class="hljs-comment">        所以,请复制一个pummyHead再去操作*/</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">currentNode</span> <span class="hljs-operator">=</span> pummyHead;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;=index;i++)&#123;<br>        currentNode = currentNode.next;<br>    &#125;<br>        <span class="hljs-keyword">return</span> currentNode.val;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(<span class="hljs-number">0</span>,val);<span class="hljs-comment">//在index为0的地址add,直接调用addAtIndex</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(size,val);<span class="hljs-comment">//在index为size的地址add,直接调用addAtIndex</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span>(index &gt; size) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span>) &#123;index = <span class="hljs-number">0</span>;&#125;<br>        <br>        size = size+<span class="hljs-number">1</span>;<span class="hljs-comment">//添加一个节点,size需要+1</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> pummyHead;<span class="hljs-comment">//再复制一个虚拟头节点用于操作</span><br><br>        <span class="hljs-comment">//定位前一个节点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;index;i++)&#123;<span class="hljs-comment">//注意这里时i&lt;index上面时&lt;=,因为此时你要定位添加节点前的一个节点</span><br>            pre = pre.next;<br>        &#125;<br>        <span class="hljs-comment">//准备被添加的节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">addNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>        <span class="hljs-comment">//经典添加节点操作</span><br>        addNode.next = pre.next;<br>        pre.next = addNode;<br><br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>||index&gt;=size) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">//索引有效</span><br>        <span class="hljs-comment">//删除一个节点,size-1</span><br>        size = size-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> pummyHead;<span class="hljs-comment">//定义一个临时虚拟头节点,用于改成被删除节点的临时前置节点</span><br>        <span class="hljs-comment">//定位前一个节点</span><br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;index;i++)&#123;<span class="hljs-comment">//注意这里时i&lt;index上面时&lt;=,因为此时你要定位添加节点前的一个节点</span><br>            pre = pre.next;<br>        &#125;<br>        <span class="hljs-comment">//经典删除操作</span><br>        pre.next = pre.next.next;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MyLinkedList obj = new MyLinkedList();</span><br><span class="hljs-comment"> * int param_1 = obj.get(index);</span><br><span class="hljs-comment"> * obj.addAtHead(val);</span><br><span class="hljs-comment"> * obj.addAtTail(val);</span><br><span class="hljs-comment"> * obj.addAtIndex(index,val);</span><br><span class="hljs-comment"> * obj.deleteAtIndex(index);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="合"><a href="#合" class="headerlink" title="合"></a>合</h2><p>链表虽然是数据结构中最基础的知识点,但也是最重要的知识点,在今后的图,数中我们总会能看到他们的身影的.</p><p>有关链表的操作请记住一下几点:</p><p>1.了解虚拟头节点的意义</p><p>2.链表离不开循环</p><p>3.对链表中的第n个node进行操作(增删之类),请前定位到此节点的前一个节点.</p><p>4.对链表的操作会使得head节点指向的位置变动,所以请用pre,currentNode等节点复制一下head节点,然后对复制得到的节点操作,不要在原head上操作</p>]]></content>
    
    
    <categories>
      
      <category>每周一炼</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity - WebSecurityConfigurerAdapter 过时问题</title>
    <link href="/2022/09/04/SpringSecurity%E4%B8%ADWebSecurityConfigurerAdapter%E8%BF%87%E6%97%B6%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/04/SpringSecurity%E4%B8%ADWebSecurityConfigurerAdapter%E8%BF%87%E6%97%B6%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity-WebSecurityConfigurerAdapter-过时问题"><a href="#SpringSecurity-WebSecurityConfigurerAdapter-过时问题" class="headerlink" title="SpringSecurity - WebSecurityConfigurerAdapter 过时问题"></a>SpringSecurity - WebSecurityConfigurerAdapter 过时问题</h1><p><strong><a href="https://www.bilibili.com/video/BV1xL4y1H7Tq?spm_id_from=333.999.0.0">参考链接 哔哩哔哩Java SSM 教程,推荐b站up主:青空の霞光,笔记很多部分也都是引用他的教程</a></strong></p><p>最近在看SpringSecurity的教程,在了解到了SpringSecurity的配置文件SecurityConfiguration通常会 extends  WebSecurityConfigurerAdapter</p><p>然而最新版本的Springboot(2.7.3)版本集成SpringSecurity时继续采用 extends WebSecurityConfigurerAdapter会发现WebSecurityConfigurerAdapter类以过时(打上了@Deprecate的注解),过时虽然可以继续使用,但还是有必要了解新的解决方案.</p><p>首先,作为萌新,我觉得还是有必要先对WebSecurityConfigurerAdapter在SecurityConfiguration中的应用做一些总结归纳,之后再谈如何替换.</p><p>Spring Security的配置类SecurityConfiguration通常要继承WebSecurityConfigurerAdapter,为的就是重写她的三个configure方法,这三个方法名相同,但形参不同,应用场景也不同,可以说,掌握了这三个方法的使用也就是掌握了Spring Security的配置类SecurityConfiguration<strong>为何要</strong>继承WebSecurityConfigurerAdapter.</p><p>在Spring Security的配置类SecurityConfiguration中继承WebSecurityConfigurerAdapter,并重写三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-comment">//configure(AuthenticationManagerBuilder)用于通过允许AuthenticationProvider容易地添加来建立认证机制。也就是说用来记录账号，密码，角色信息。简言之:身份认证</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-comment">//configure(HttpSecurity)允许基于选择匹配在资源级配置基于网络的安全性。以下示例将以/ admin /开头的网址限制为具有ADMIN角色的用户，并声明任何其他网址需要成功验证。也就是对角色的权限——所能访问的路径做出限制.简言之:权限认证</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//configure(WebSecurity)用于影响全局安全性(配置资源，设置调试模式，通过实现自定义防火墙定义拒绝请求)的配置设置。一般用于配置全局的某些通用事物，例如静态资源等</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用场景:</p><p> public void configure(AuthenticationManagerBuilder auth) throws Exception</p><p>身份认证:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       auth<br>               .userDetailsService(service)<span class="hljs-comment">//通过service获取的信息</span><br>               .passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>());<span class="hljs-comment">//来验证密码</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>protected void configure(HttpSecurity http) throws Exception</p><p>权限认证:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       http<br>               .authorizeRequests()   <span class="hljs-comment">//首先需要配置哪些请求会被拦截，哪些请求必须具有什么角色才能访问</span><br>               .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/static/**&quot;</span>).permitAll()    <span class="hljs-comment">//静态资源，使用permitAll来运行任何人访问（注意一定要放在前面）</span><br>               .antMatchers(<span class="hljs-string">&quot;/index&quot;</span>).hasAnyRole(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>               .anyRequest().hasRole(<span class="hljs-string">&quot;admin&quot;</span>)<br>               .and()<br>               .formLogin()       <span class="hljs-comment">//配置Form表单登陆</span><br>               .loginPage(<span class="hljs-string">&quot;/login&quot;</span>)       <span class="hljs-comment">//登陆页面地址（GET）</span><br>               .loginProcessingUrl(<span class="hljs-string">&quot;/doLogin&quot;</span>)    <span class="hljs-comment">//form表单提交地址（POST）</span><br>               .defaultSuccessUrl(<span class="hljs-string">&quot;/index&quot;</span>,<span class="hljs-literal">true</span>)    <span class="hljs-comment">//登陆成功后跳转的页面，也可以通过Handler实现高度自定义</span><br>               .permitAll()   <span class="hljs-comment">//登陆页面也需要允许所有人访问</span><br>               .and()<br>               .csrf().disable();<br>   &#125;<br></code></pre></td></tr></table></figure><p>public void configure(WebSecurity web) throws Exception</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     web.ignoring().antMatchers(<span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;/js/**&quot;</span>);<span class="hljs-comment">//configure(WebSecurity)用于影响全局安全性(配置资源，设置调试模式如是否debug配置，通过实现自定义防火墙定义拒绝请求如全局HttpFirewall配置)的配置设置。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>似乎 configure(HttpSecurity http)和configure(WebSecurity web)差不多</p><p>前者主要是配置 Spring Security 中的过滤器链，后者则主要是配置一些路径放行规则。</p><p>现在这挖个坑,有时间会看一下这三个的源码分析.</p><p>介绍完了WebSecurityConfigurerAdapter中要重写的三个方法,我们对这个类的功能有了大致了解,那么我们该如何把过时的它替换呢?<br>我们需要知道SpringSecurity的一些原理,看官方文档:</p><blockquote><p>Spring Security’s Servlet support is based on Servlet <code>Filter</code>s, so it is helpful to look at the role of <code>Filter</code>s generally first. The picture below shows the typical layering of the handlers for a single HTTP request.</p></blockquote><p>Spring Security的Servlet 基于 Servlet Filters</p><blockquote><p><a href="https://docs.spring.io/spring-security/site/docs/5.7.3/api/org/springframework/security/web/SecurityFilterChain.html"><code>SecurityFilterChain</code></a> is used by <a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-filterchainproxy">FilterChainProxy</a> to determine which Spring Security <code>Filter</code>s should be invoked for this request.</p></blockquote><h3 id="配置HttpSecurity"><a href="#配置HttpSecurity" class="headerlink" title="配置HttpSecurity:"></a>配置HttpSecurity:</h3><h4 id="旧的配置"><a href="#旧的配置" class="headerlink" title="旧的配置:"></a>旧的配置:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>            .antMatcher(<span class="hljs-string">&quot;/**&quot;</span>)<br>            .authorizeRequests(authorize -&gt; authorize<br>                    .anyRequest().authenticated()<br>            );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="新的配置：自定义-Filters"><a href="#新的配置：自定义-Filters" class="headerlink" title="新的配置：自定义 Filters"></a>新的配置：自定义 <code>Filters</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfig</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    httpSecurity.authorizeRequests()<br>            .anyRequest().authenticated()<br>            .and()<br>            .formLogin()<br>            .disable()<br>            .csrf()<br>            .disable();<br>    <span class="hljs-keyword">return</span> httpSecurity.build();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置-WebSecurity"><a href="#配置-WebSecurity" class="headerlink" title="配置 WebSecurity"></a>配置 WebSecurity</h3><p>新版本通过配置 <code>WebSecurityCustomizer</code> Bean 来配置 <code>WebSecurity</code></p><h4 id="旧的配置-1"><a href="#旧的配置-1" class="headerlink" title="旧的配置:"></a>旧的配置:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        web.ignoring().antMatchers(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="新的配置"><a href="#新的配置" class="headerlink" title="新的配置:"></a>新的配置:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebSecurityCustomizer <span class="hljs-title function_">webSecurityCustomizer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> web -&gt; web.ignoring().antMatchers(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>参考链接:</p><h4 id="Spring-Security的三个configure方法"><a href="#Spring-Security的三个configure方法" class="headerlink" title="Spring Security的三个configure方法"></a><a href="https://www.cnblogs.com/woyujiezhen/p/13049979.html">Spring Security的三个configure方法</a></h4><p><a href="https://cloud.tencent.com/developer/article/1972872">重要:Spring Security即将弃用配置类WebSecurityConfigurerAdapter - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity学习笔记(4)</title>
    <link href="/2022/09/02/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)/"/>
    <url>/2022/09/02/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity学习笔记-4"><a href="#SpringSecurity学习笔记-4" class="headerlink" title="SpringSecurity学习笔记(4)"></a>SpringSecurity学习笔记(4)</h1><p><strong><a href="https://www.bilibili.com/video/BV1xL4y1H7Tq?spm_id_from=333.999.0.0">参考链接 哔哩哔哩Java SSM 教程,推荐b站up主:青空の霞光,笔记很多部分也都是引用他的教程</a></strong></p><h2 id="记住我"><a href="#记住我" class="headerlink" title="记住我:"></a>记住我:</h2><p>授权视频中讲解到了两种方式–基于内存,基于数据库</p><p>我是这样理解的:</p><p>这里的记住我并非是单纯的记住密码,而是让第一次登录被记住的对象以后直接跳过登录界面,即使关闭浏览器后,你再一次输入&#x2F;index页面,也可以直接访问.</p><p>大致原理是我们第一次登录时会携带Token,登录成功tomcat服务器也会获得这个Token,浏览器端的Token一般会保存在Cookie中,服务器端也会保存一份,但有两种方式.</p><p>服务器存储Token有两种方式:</p><ul><li>服务器内存(重启服务器后会丢失,记住我功能失效)</li><li>数据库(基于JDBC,重启服务器仍有效)</li></ul><h3 id="服务器内存存储Token"><a href="#服务器内存存储Token" class="headerlink" title="服务器内存存储Token:"></a>服务器内存存储Token:</h3><p>SecurityConfiguration中配置:</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs java">.and()<span class="hljs-comment">//看情况自己判断是否需要.and()</span><br>.rememberMe()   <span class="hljs-comment">//开启记住我功能</span><br>.rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>)  <span class="hljs-comment">//登陆请求表单中需要携带的参数，如果携带，那么本次登陆会被记住,&quot;remember&quot;要和前端记住我的选框名相同</span><br>.tokenRepository(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryTokenRepositoryImpl</span>())  <span class="hljs-comment">//这里使用的是直接在内存中保存的TokenRepository实现</span><br>  <span class="hljs-comment">//TokenRepository有很多种实现，InMemoryTokenRepositoryImpl直接基于Map实现的，缺点就是占内存、服务器重启后记住我功能将失效</span><br>  <span class="hljs-comment">//后面我们还会讲解如何使用数据库来持久化保存Token信息</span><br><br></code></pre></td></tr></table></figure><p>接着我们需要在前端修改一下记住我勾选框的名称，将名称修改与上面一致，如果上面没有配置名称，那么默认使用”remember-me”作为名称：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-checkbox&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在我们启动服务器，在登陆时勾选记住我勾选框，观察Cookie的变化。</p><p>虽然现在已经可以实现记住我功能了，但是还有一定的缺陷，如果服务器重新启动（因为Token信息全部存在HashMap中，也就是存在内存中），那么所有记录的Token信息将全部丢失，这时即使浏览器携带了之前的Token也无法恢复之前登陆的身份。</p><p>我们可以将Token信息记录全部存放到数据库中（学习了Redis之后还可以放到Redis服务器中）利用数据库的持久化存储机制，即使服务器重新启动，所有的Token信息也不会丢失，配置数据库存储也很简单：</p><h3 id="数据库表格存储Token"><a href="#数据库表格存储Token" class="headerlink" title="数据库表格存储Token:"></a>数据库表格存储Token:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">.rememberMe()<br>.rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>)<br>.tokenRepository(repository)<span class="hljs-comment">//这里的配置参数改为repository,会报红,我们需要创建repository实例</span><br>.tokenValiditySeconds(<span class="hljs-number">7</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>);<span class="hljs-comment">//设置记住密码的时间为7天</span><br></code></pre></td></tr></table></figure><p>注入repository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>PersistentTokenRepository repository;<br></code></pre></td></tr></table></figure><p>但我们还没有写过return 实例repository的返回方法,也没有把它注册为bean,所以接下来我们来把他注册为bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> PersistentTokenRepository <span class="hljs-title function_">jdbcRepository</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSource dataSource)</span>&#123;<span class="hljs-comment">//dataSource和之前创建数据库时的元数据一样</span><br>       <span class="hljs-type">JdbcTokenRepositoryImpl</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenRepositoryImpl</span>();<span class="hljs-comment">//new 一个repository实例,使用基于JDBC的实现</span><br>       repository.setDataSource(dataSource);<span class="hljs-comment">////配置数据源</span><br>       repository.setCreateTableOnStartup(<span class="hljs-literal">true</span>);<span class="hljs-comment">//启动时自动创建用于存储Token的表（建议第一次启动之后删除该行,不然非首次启动会报错)</span><br>       <span class="hljs-keyword">return</span> repository;<br>   &#125;<br></code></pre></td></tr></table></figure><p>稍后服务器启动我们可以观察一下数据库，如果出现名为<code>persistent_logins</code>的表，那么证明配置没有问题。</p><p>当我们登陆并勾选了记住我之后，那么数据库中会新增一条Token记录。</p><h2 id="简单回顾一下"><a href="#简单回顾一下" class="headerlink" title="简单回顾一下:"></a>简单回顾一下:</h2><ul><li><p>基于服务器内存</p><p>只要记住这三行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">.rememberMe()   <span class="hljs-comment">//开启记住我功能</span><br>.rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>)  <span class="hljs-comment">//登陆请求表单中需要携带的参数，如果携带，那么本次登陆会被记住,&quot;remember&quot;要和前端记住我的选框名相同</span><br>.tokenRepository(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryTokenRepositoryImpl</span>())  <span class="hljs-comment">//这里使用的是直接在内存中保存的TokenRepository实现</span><br></code></pre></td></tr></table></figure></li><li><p>基于数据库</p><ul><li><p>差不多的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">.rememberMe()<br>.rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>)<br>.tokenRepository(repository)<span class="hljs-comment">//这里的配置参数改为repository,会报红,我们需要创建repository实例</span><br></code></pre></td></tr></table></figure></li><li><p>repository注册为bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> PersistentTokenRepository <span class="hljs-title function_">jdbcRepository</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSource dataSource)</span>&#123;<span class="hljs-comment">//dataSource和之前创建数据库时的元数据一样</span><br>       <span class="hljs-type">JdbcTokenRepositoryImpl</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenRepositoryImpl</span>();<span class="hljs-comment">//new 一个repository实例,使用基于JDBC的实现</span><br>       repository.setDataSource(dataSource);<span class="hljs-comment">////配置数据源</span><br>       repository.setCreateTableOnStartup(<span class="hljs-literal">true</span>);<span class="hljs-comment">//启动时自动创建用于存储Token的表（建议第一次启动之后删除该行,不然非首次启动会报错)</span><br>       <span class="hljs-keyword">return</span> repository;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>注入repository</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>PersistentTokenRepository repository;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity学习笔记(3)</title>
    <link href="/2022/09/01/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/"/>
    <url>/2022/09/01/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity学习笔记-3"><a href="#SpringSecurity学习笔记-3" class="headerlink" title="SpringSecurity学习笔记(3)"></a>SpringSecurity学习笔记(3)</h1><p><strong><a href="https://www.bilibili.com/video/BV1xL4y1H7Tq?spm_id_from=333.999.0.0">参考链接 哔哩哔哩Java SSM 教程,推荐b站up主:青空の霞光,笔记很多部分也都是引用他的教程</a></strong></p><h2 id="授权"><a href="#授权" class="headerlink" title="授权:"></a>授权:</h2><p>授权视频中讲解到了三种方式–基于角色,基于权限,使用注解</p><p>我是这样理解的:</p><p>授权主要有两种方式:</p><ul><li>基于角色</li><li>基于权限</li></ul><p>每种方式又都有两种解决方案,也就是代码写法,分为</p><ul><li>配置SecurityConfiguration</li><li>配置注解</li></ul><p>相对来说,第二种更为灵活,更为符合”约定大于配置”的Spring思想</p><h3 id="基于角色"><a href="#基于角色" class="headerlink" title="基于角色:"></a>基于角色:</h3><p>根据用户属于哪个角色来决定是否可以访问某个路径</p><p>以常见的聊天软件QQ举例,一般有这群主,管理员,群成员等角色,每种角色的权限也会不同,例如</p><ul><li>群主：<code>/login</code>、<code>/logout</code>、<code>/chat</code>、<code>/edit</code>、<code>/delete</code>、<code>/upgrade</code></li><li>管理员：<code>/login</code>、<code>/logout</code>、<code>/chat</code>、<code>/edit</code></li><li>普通群成员：<code>/login</code>、<code>/logout</code>、<code>/chat</code></li></ul><p>现在我们希望创建两个角色，普通用户和管理员，普通用户只能访问index页面，而管理员可以访问任何页面。</p><ul><li><p>修改数据库表格</p><p>首先我们需要对数据库中的角色表进行一些修改，添加一个用户角色字段，并创建一个新的用户，Test用户的角色为user，而Admin用户的角色为admin。</p></li><li><p>配置SpringSecurity</p><p>也就是在SecurityConfiguration中给角色添加权限.决定哪些角色可以访问哪些页面：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java">http<br>        .authorizeRequests()<br>        .antMatchers(<span class="hljs-string">&quot;/static/**&quot;</span>).permitAll()<br>  .antMatchers(<span class="hljs-string">&quot;/index&quot;</span>).hasAnyRole(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>)   <span class="hljs-comment">//index页面可以由user或admin访问</span><br>        .anyRequest().hasRole(<span class="hljs-string">&quot;admin&quot;</span>)   <span class="hljs-comment">//除了上面以外的所有内容，只能是admin访问</span><br></code></pre></td></tr></table></figure><ul><li><p>修改一下验证逻辑</p><p>首先创建一个实体类用于表示数据库中的用户名、密码和角色,为下面getRole做准备：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthUser</span> &#123;<br>    String username;<br>    String password;<br>    String role;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>修改一下Mapper</p><p>使他返回的不只是密码,而是一个实体user,我们可以通过user.getRole获取到角色权限：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from users where username = #&#123;username&#125;&quot;)</span><br>    AuthUser <span class="hljs-title function_">getPasswordByUsername</span><span class="hljs-params">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>修改Service：</p><p>通过这一步,我们就可以获取整个user的信息,包括角色,密码,用户名,有了角色,就可以通过之前给角色配置的权限进行路径访问权限判断了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>    <span class="hljs-type">AuthUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getPasswordByUsername(s);<br>    <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;登录失败，用户名或密码错误！&quot;</span>);<br>    <span class="hljs-keyword">return</span> User<br>            .withUsername(user.getUsername())<br>            .password(user.getPassword())<br>            .roles(user.getRole())<br>            .build();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>尝试登陆</p><p>访问一下<code>/index</code>和<code>/admin</code>两个页面,发现已经配置成功</p></li></ul><h3 id="基于权限"><a href="#基于权限" class="headerlink" title="基于权限:"></a>基于权限:</h3><p>基于权限其实和基于角色类似,就是在代码上有两点不同</p><ul><li><p>给权限而不是给角色</p><p>修改Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>    <span class="hljs-type">AuthUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getPasswordByUsername(s);<br>    <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;登录失败，用户名或密码错误！&quot;</span>);<br>    <span class="hljs-keyword">return</span> User<br>            .withUsername(user.getUsername())<br>            .password(user.getPassword())<br>            .authorities(<span class="hljs-string">&quot;page:index&quot;</span>)<span class="hljs-comment">//给权限而不是给角色</span><br>            .build();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>判断有什么权限而不是判断是什么角色</p><p>基于权限的授权与角色类似，需要以<code>hasAnyAuthority</code>或<code>hasAuthority</code>进行判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.anyRequest().hasAnyAuthority(<span class="hljs-string">&quot;page:index&quot;</span>)<span class="hljs-comment">//判断有什么权限而不是判断是什么角色</span><br></code></pre></td></tr></table></figure></li></ul><p>授权主要就是以上两种方式,但是上面我们都是通过配置文件判断有什么权限的,前面我们提过还有另一种方法,通过<strong>注解配置</strong>,这一种方式<strong>更为灵活</strong>,</p><p>个人认为前一种通过配置文件的方案更为简单,但还是很有必要掌握后一种,毕竟Spring的思想就是约定大于配置.</p><h3 id="使用注解判断权限"><a href="#使用注解判断权限" class="headerlink" title="使用注解判断权限"></a>使用注解判断权限</h3><p>除了直接配置以外，我们还可以以注解形式直接配置，首先需要在配置类（注意这里是在Mvc的配置类上添加，因为这里只针对Controller进行过滤，所有的Controller是由Mvc配置类进行注册的，如果需要为Service或其他Bean也启用权限判断，则需要在Security的配置类上添加）上开启：</p><ul><li><p>在父级配置类开启:</p><p>相比之前的直接配置,我们可以采用注解配置,<strong>父级配置类</strong>指的是在Mvc的配置类上添加，因为这里只针对Controller进行过滤，所有的Controller是由Mvc配置类进行注册的，如果需要为Service或其他Bean也启用权限判断，则需要在Security的配置类上添加</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<span class="hljs-comment">//这里也要在Mvc配置类上添加上面一行的注释,这一行是为了后面再service用权限判断做的准备</span><br></code></pre></td></tr></table></figure><ul><li>在添加权限验证的请求映射上添加注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(&quot;hasRole(&#x27;user&#x27;)&quot;)</span>   <span class="hljs-comment">//判断是否为user角色，只有此角色才可以访问,或者也可以判断hasAnyAuthority(&quot;page:index&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过添加<code>@PreAuthorize</code>注解，在<strong>方法执行之前</strong>判断判断权限，如果没有对应的权限或是对应的角色，将无法访问页面。</p><p>这里其实是使用了SpEL表达式，相当于可以执行一些逻辑再得到结果，而不是直接传值，官方文档地址：<a href="https://docs.spring.io/spring-framework/docs/5.2.13.RELEASE/spring-framework-reference/core.html#expressions%EF%BC%8C%E5%86%85%E5%AE%B9%E6%AF%94%E8%BE%83%E5%A4%9A%EF%BC%8C%E4%B8%8D%E6%98%AF%E9%87%8D%E7%82%B9%EF%BC%8C%E8%BF%99%E9%87%8C%E5%B0%B1%E4%B8%8D%E5%86%8D%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E3%80%82">https://docs.spring.io/spring-framework/docs/5.2.13.RELEASE/spring-framework-reference/core.html#expressions，内容比较多，不是重点，这里就不再详细介绍了。</a></p><p>同样的还有<code>@PostAuthorize</code>注解，但是它是在<strong>方法执行之后</strong>再进行拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostAuthorize(&quot;hasRole(&#x27;user&#x27;)&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>坑(1),这里有个坑,采用注解配置后,项目运行地址中不会直接跳转到localhost:8080&#x2F;BookManager&#x2F;,而不是之前的localhost:8080&#x2F;BookManager&#x2F;login</p><p>而且以user角色登录后,无法访问<a href="http://localhost:8080/BookManager/all-product.html,%E6%98%BE%E7%A4%BA404">http://localhost:8080/BookManager/all-product.html,显示404</a></p><p>以admin角色登录后,无法访问<a href="http://localhost:8080/BookManager/all-product.html,%E6%98%BE%E7%A4%BA404">http://localhost:8080/BookManager/all-product.html,显示404</a></p><p>就像之前我们配置文件时权限认证的代码一般只好写在SecurityConfiguration,属于文件级,而通过注释配置是方法级的,可以直接配置在方法前.</p><p>新建一个SimpleService用于验证下面这句话</p><blockquote><p>除了Controller以外，只要是由Spring管理的Bean都可以使用注解形式来控制权限，只要不具备访问权限，那么就无法执行方法并且会返回403页面。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleService</span> &#123;<br><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasAnyRole(&#x27;user&#x27;)&quot;)</span><span class="hljs-comment">//通过注释配置是方法级的,可以直接配置在方法前,其他类调用这个方法是会判断调用者是否有权限或者属于有权限的角色</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;成功执行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意Service是由根容器进行注册<strong>，需要在Security配置类上添加<code>@EnableGlobalMethodSecurity</code>注解才可以生效</strong>。</p><h2 id="简单回顾一下"><a href="#简单回顾一下" class="headerlink" title="简单回顾一下:"></a>简单回顾一下:</h2><ul><li><p>SecurityConfiguration配置角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">.antMatchers(<span class="hljs-string">&quot;/static/**&quot;</span>).permitAll()<br>.antMatchers(<span class="hljs-string">&quot;/index&quot;</span>).hasAnyRole(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>)   <span class="hljs-comment">//index页面可以由user或admin访问</span><br>.anyRequest().hasRole(<span class="hljs-string">&quot;admin&quot;</span>)   <span class="hljs-comment">//除了上面以外的所有内容，只能是admin访问</span><br></code></pre></td></tr></table></figure></li><li><p>创建实体类,注意要包含role</p></li><li><p>修改mapper映射,这一次不只是查询出密码,而是查询出user对象</p></li><li><p>修改service,上一步查询出user对象,这一步通过getRole获取角色</p></li></ul><h3 id="回顾补充"><a href="#回顾补充" class="headerlink" title="回顾补充:"></a>回顾补充:</h3><p>​    暂无</p><h2 id="排坑指南"><a href="#排坑指南" class="headerlink" title="排坑指南:"></a>排坑指南:</h2><p>坑(1) </p><p>暂未解决</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>风吹过的记忆</title>
    <link href="/2022/08/29/%E5%A4%A7%E5%9B%9B%E5%BC%80%E5%AD%A6%E7%A2%8E%E7%A2%8E%E5%BF%B5(%E9%A3%8E%E5%90%B9%E8%BF%87%E7%9A%84%E5%9B%9E%E5%BF%86)/"/>
    <url>/2022/08/29/%E5%A4%A7%E5%9B%9B%E5%BC%80%E5%AD%A6%E7%A2%8E%E7%A2%8E%E5%BF%B5(%E9%A3%8E%E5%90%B9%E8%BF%87%E7%9A%84%E5%9B%9E%E5%BF%86)/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="694ee83d32b80747d631147efb7a37d728e3de00bd8d092e9480319e64a924e3">ba8c35434f82bdb0b8749538e49486c5da028ce91debb97f934530fba916217c146e3faa051987891d7264e977ed9855254a82a324dad16d098eeac330bbb44a550e2142a20082bc3ff54ab64ac9e8d5d2c188d5e15f96508bed35df9cc4804a1e8084ff317faedeeae53475a91c05c673cc6d014a7beaa6056bcfbddf9fc1aa2738eed86e6280c4c5ffe0de52c3c2370a588177ce5110cd8cc20c57785013d533b405816bb3aaa25a5906efedc35113cab3431a112602b265f0afae68ad6bff86805b2e11908acfa44623be5ceae0e02d9febe04c5fd75a3dbef7950928f4791ebfe2068b7146919e765bd68a8e017ce0e8155b71d9f533583759d5b7d1d81002aee8fa421a6241ec3958e499dc70e6c987ba2015745ea49651b608a29aff71b02458ed6cfa027e9c616afa26baf62d4bdbdb95cde9f28eeca3eeec05d3c18b956702a362b1721bca9dc3f6caf0fa484dc9372ef51a1f00931c49eacf94e9b2bfd5119f180d76bd867b8d8756009e4093ee0c3073f648447bf1f26d277c195fe6d005ad2afa354f7a8abcb1809f5b460b5679ae53cdc610832b7f28ca5729e0ad02150bea31bf5b7286c251c8e97ed7c5386f8347841564af93d15bffb3a35d7cd328fe2d1adbc5ea6d10c49d989fb7e95fb14a94eafac57fa407858f60f11e7aed557d9e39f94a20a1e8c7f0de449e5d766df1590ac6447831cd74943417906b21a229f3eb1f67f2e7891039a6db5bf99b81cd84c4e0568ae024911b37a2886b4eb48f2854b563fc18b99733e57fc7d888600d50283069667a255d3f75ac02d5e2b93f12559bc6990f1984f01e20911a565df13ae10f217feecd79732c4ec247ce39aa7ad4fe3ea06e34de880fdc86b40a7a03a24e4970d626b9d6ebb299110512eb3d1c2eea7b6887a89d9ff43296d371af21069449d644d2faac02beebd67e7565b5e526b45664f384bd88e3bf052fd373059ff1fd83ffc32f04a25b822fd73736d5b0e53e8ec804fb5116166abcde3a3797059782af04de6aaaacb9889a362ac81a94075f7c66e547e2503d26a21921334712090bcd11b53007dbe9322a95197f1c6483a8781cf9eb29f07e349538b2763ae27bc1dda2fa4c70b8e3a452f5a631a2218e9598a6677e328395af550003990f34e11f384acc282d528926f2234524dbf040988c6bc814b67d1d5c17f3fe6a742ff5a3bb49c3cf1a3b0b2c54e8431eac041d680a70095ee4c8e9a38d002d4a99469a963ce69acdfe5d9010a17b74c771fd3dd4ab2c27a09913887f249448ad4b5eaee79e9c310b1a4515f0357d130efed10e831b926020d4ce7e50f598b4b6740c64eb6e215008b95e90b37f182dead53968f3ec4e80f92547a10ee27e65f905b9199fc1c88d856d93d01b3d8226b929029af143279a7b0ca0ecc26df5371a4ff17b1ef4de7826f8cab7ae862d1decf4ded582f1a0c23ee235255768bb60453007ea5ca364ad80225e93d0031ecbc24438db8a0ee006a93b0eea70f1cb29a87f67a8c4b2f599d0ced5de2917182f9e7b5ba631a79a7e9fba1c1560d8d1539a0847699d3910386abd2cfb010ee5bf588a8378ca171e6f9ec9014b55f604f3f4c09b75007a8a6ee272141c6156a77773a81846695656982562e2b146a7a5e5b8c9a3c90e26180f6f27ed8e8f97d0a0d62f70e3023b3d8070e03742749f9310bd8cb2b9cd7702335a3a96127eb154f7667406a3d21058e17f06eed901b9381d6017c58588f6671a0475d6aae4c8d04d396247803a0919d8d8474c4fb22f9f0bc024939d33d5ae98a280884b8f3e9065365e527e4042227a98b25fde659ebc189176d81bf373ed8ae9fc7c1e36a1dfa1162cc0ddd9e2a238f38c8c27574fe703f0cfad3e7a5bea51b3a8dc81dda7bcb21ba3c3a8212cb29e17662505c88c29efa4310e1974683aebd3465b918ccf4650cb02640bb012be1b05bb066d888a03d61de0fa28ea702c125eb928b6a9b05dd03991b7be34f9aacb4f8521f360cfd13262f4a275ed81358f35293ec388c40283f3e97cd268c4c1c0a79fea18f68cbd8bda7183b6cd944aebe3f160b1bc8fafb18d2d8762d008b19bfaf486f51af5dff1ff0cb056e8cd6dc49a8056c0b5b7840ebde1c0b1b2625cacd64677291b9e5870475401b9fad53de9c714bc38688da86d0520d602b7e0f929f1395eba6364eac4b5864c706e519f154ffb9eac99cb71ec15feafc9e392e1873c526f775b48a4750ff1b8a54054e77600c42e389848dab93d6daba62e73316ebd31828794c71cee8bef8a986f3ceb9ce0ec750d6701b64deff0dbb2d392f873920cf8ff769dcde2e2ed71e07490238b8d8a0af3ad8782e35063436c607aa374eaf9f6d93d620e15e45de54c2837371bf56523d308f507faf2c416ed958dbf4dcb775b58b29174b19c617f1a5d25822dc474a99edbd4fc6ed3746ef950b1f9ac0252ee1a6f283922444d9456b14fd1d1952b013fc2cf50c35ca71ff0e43db15245151fd7e48774e9cff0625030302c44846a2fc84aa9bba69b72896450dd6123e31b86febe46399758225a035de09ccba8b762c57e01098a26b32a66b4d14e9b0d56d2c353402229962d6f30c33820fdcfd2e97002db217d03d033a2065baf0ce82b8a4bb3d6ec33730e60ea4e98db79007452f10dd1273db72189c4726f4e4ff6621083a30c48bb55866997cc852eb9ec9c76df11d0298cef8c3e4b76fa88ba36861ca93fa89c9da2d4e9da38b37e83707f59fe819ec5989b0924b09f5b9addd5bc207c762a27642e422622675faf03b2edf96a0e83b8b95a239ecd1df6771710a759f08a21a4b01771417b9f8d74be4c180602f3df0eb3702c5c978b1a18bb3025ac9f647982c1a9ae397285f339e3ffa7a56d5faad1f473f0cd4f46c0050100c90e9a94dae9a777080bba65116de22dc91373d4d6253b41ade8fb9efefe97e372003f32a83d1f73eb9ab1270d5f2c5b7785170c55db8ec4d1573ad2553108f2088fb2ab4d59b1d784ffab2c39f4ac82f0cef1ece6349c811d3b75d7ffdc6a3423bd502efe23d2207404ec218a6aaba5ecfba74fc8b1a3d04bd95d51c722c49109f6582b2206a8461b9e0f015773648154dc2c00adcdda07cb66a76119fc67cd2efde5493efb937787139d73fe09445936adb2b7e4108a7e7ef7598cabe25fe9fe3c44a2ebe5b1588fb1b1b8dd97010d82b5bc2f92611576d5bcf7e917e7f6bc5728f60341688d95a492f157bc0431f64eef32121f82884f8a025e7807f85a5e2afcd76ee380a4e82fce279204291601e6935563bfbcf9437baf8da44028edfd8b537afb75ce7933d785e5d00c911258efabff1b7033300e19aa7372c3a4a2f60437fd63c65e2c01290a49310524ebb150a0625828702cfc50f04b913da3464391a06f68e64dd99e5c530fc2da6ec9348145cec40c7d40472a44602bc5bd3efe7e39d7544e0d04c128cdf8020ef85bddbf95b691691a66310b3f346d391ce8b2795d917d3dd90be5cbd2e6a90f4dd84275812ce238b9e300cdf4aafc629f0f03ece1c06b3b24d1ba2e3b361ee1733e8a217b88eb06b3ec832932d34ae3361d52cec939c7b4a8b6fd685781c612c4deae8145d482bf91506803a897821c0c9041c374fbe12044f0e16d0a5234a496e12d983543d000ee0c3d0ed65d20d8bb3fe31b513980adf35450ebbd6a1103449ac6c8bbd1922d15833319bff37330be15992001fd8cca69b83085959ecc49674f92e21dce31da</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity学习笔记(2)</title>
    <link href="/2022/08/28/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <url>/2022/08/28/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity学习笔记-2"><a href="#SpringSecurity学习笔记-2" class="headerlink" title="SpringSecurity学习笔记(2)"></a>SpringSecurity学习笔记(2)</h1><p><strong><a href="https://www.bilibili.com/video/BV1xL4y1H7Tq?spm_id_from=333.999.0.0">参考链接 哔哩哔哩Java SSM 教程,推荐b站up主:青空の霞光,笔记很多部分也都是引用他的教程</a></strong></p><h2 id="认证"><a href="#认证" class="headerlink" title="认证:"></a>认证:</h2><p>认证视频中讲解到了两种方式–直接认证与数据库认证</p><p>顾名思义,直接认证就是直接将用户名与密码写死在了代码中</p><p>数据库认证就是需要通过service层调用mapper层中的Select语句访问数据库进行认证</p><h3 id="直接认证"><a href="#直接认证" class="headerlink" title="直接认证:"></a>直接认证:</h3><p>我们今后必然不太会采用这种写死密码方式,但偶尔我们为了验证当前代码是否能够正确执行时,会通过这一种简单的方式来验证.此外,<strong>为了顺带讲解密码校验</strong>这一知识点,所以在这里我们简单提一下.</p><h4 id="关于密码校验"><a href="#关于密码校验" class="headerlink" title="关于密码校验:"></a>关于密码校验:</h4><p>正常情况下,我们不会将用户的密码明文存储到数据库中,如果一旦数据库泄露密码则直接暴露,我们会对用户的密码做简单加密,这里我常看到的加密方式主要是MD5</p><blockquote><p>SpringSecurity的密码校验自然也不是直接使用原文进行比较，而是使用加密算法将密码进行加密（更准确地说应该进行Hash处理，此过程是不可逆的，无法解密），最后将用户提供的密码以同样的方式加密后与密文进行比较。对于我们来说，用户提供的密码属于隐私信息，直接明文存储并不好，而且如果数据库内容被窃取，那么所有用户的密码将全部泄露，这是我们不希望看到的结果，我们需要一种既能隐藏用户密码也能完成认证的机制，而Hash处理就是一种很好的解决方案，通过将用户的密码进行Hash值计算，计算出来的结果无法还原为原文，如果需要验证是否与此密码一致，那么需要以同样的方式加密再比较两个Hash值是否一致，这样就很好的保证了用户密码的安全性。</p></blockquote><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimages.10qianwan.com%2F10qianwan%2F20180223%2Fb_1_201802231459287319.jpg&refer=http%3A%2F%2Fimages.10qianwan.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1643122575&t=da2d04d86d4869d3054fb9a861ad1824" alt="点击查看源网页" style="zoom: 67%;" /><p>既然我们需要通过SpringSecurity验证进行用户认证,那么则要对Security进行配置</p><p>SecurityConfiguration:</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();  <span class="hljs-comment">//这里使用SpringSecurity提供的BCryptPasswordEncoder</span><br>    auth<br>            .inMemoryAuthentication() <span class="hljs-comment">//直接验证方式，之后会讲解使用数据库验证</span><br>            .passwordEncoder(encoder) <span class="hljs-comment">//密码加密器</span><br>            .withUser(<span class="hljs-string">&quot;test&quot;</span>)   <span class="hljs-comment">//用户名</span><br>            .password(encoder.encode(<span class="hljs-string">&quot;123456&quot;</span>))   <span class="hljs-comment">//这里需要填写加密后的密码</span><br>            .roles(<span class="hljs-string">&quot;user&quot;</span>);   <span class="hljs-comment">//用户的角色（之后讲解）</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里的configure方法,下面也会用到,但两者</p></blockquote><h3 id="数据库认证"><a href="#数据库认证" class="headerlink" title="数据库认证:"></a>数据库认证:</h3><p>这是我们之后有关登录验证采用的必要方法.</p><p>我们说过数据库中的密码是密文,我们我们直接输入进去,所以我们可以利用SpringSecurity写一个测试类将12345这个密码加密打印到控制台再复制到数据库中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>        System.out.println(encoder.encode(<span class="hljs-string">&quot;123456&quot;</span>));<span class="hljs-comment">//我们可以复制打印的结果到数据库中</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserAuthService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAuthService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    UserMapper mapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> mapper.getPasswordByUsername(s);  <span class="hljs-comment">//从数据库根据用户名获取密码</span><br>        <span class="hljs-keyword">if</span>(password == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;登录失败，用户名或密码错误！&quot;</span>);<br>        <span class="hljs-keyword">return</span> User   <span class="hljs-comment">//这里需要返回UserDetails，SpringSecurity会根据给定的信息进行比对</span><br>                .withUsername(s)<br>                .password(password)   <span class="hljs-comment">//直接从数据库取的密码</span><br>                .roles(<span class="hljs-string">&quot;user&quot;</span>)   <span class="hljs-comment">//用户角色</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码调用了getPasswordByUsername这个方法我们还没有定义</p><p>所以别忘记Service层需要调用Mapper中getPasswordByUsername定义的Select语句</p><p>创建mapper层</p><ul><li><p>interface:UserMapper</p></li><li><p>&#96;&#96;&#96;java<br>@Mapper<br>public interface UserMapper {</p><div class="code-wrapper"><pre><code class="hljs">@Select(&quot;select password from users where username = #&#123;username&#125;&quot;)String getPasswordByUsername(String username);</code></pre></div><p>}</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br>    <br><br>**别忘记在<span class="hljs-type">RootConfiguration</span>中配置注解**<br><br><span class="hljs-meta">@MapperScan</span>(<span class="hljs-string">&quot;book.manager.mapper&quot;</span>)<br><br>并提醒一下之前我们曾在这配置过<br><br><span class="hljs-meta">@ComponentScans</span>(&#123;<br>        <span class="hljs-meta">@ComponentScan</span>(<span class="hljs-string">&quot;book.manager.service&quot;</span>)<br>&#125;)<br><br>最后我们需要再修改一下<span class="hljs-type">Security</span>配置：<br><br>我们的<span class="hljs-type">Security</span>配置是放在了<span class="hljs-type">SecurityConfiguration</span>中的<br><br><span class="hljs-type">SecurityConfiguration</span>:<br><br>```java<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   这是直接认证时的代码,这里可以直接删除或者像我这样注释掉</span><br><span class="hljs-comment">   @Override</span><br><span class="hljs-comment">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="hljs-comment">        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();  //这里使用SpringSecurity提供的BCryptPasswordEncoder</span><br><span class="hljs-comment">        auth</span><br><span class="hljs-comment">                .inMemoryAuthentication() //直接验证方式，之后会讲解使用数据库验证</span><br><span class="hljs-comment">                .passwordEncoder(encoder) //密码加密器</span><br><span class="hljs-comment">                .withUser(&quot;test&quot;)   //用户名</span><br><span class="hljs-comment">                .password(encoder.encode(&quot;123456&quot;))   //这里需要填写加密后的密码</span><br><span class="hljs-comment">                .roles(&quot;user&quot;);   //用户的角色（之后讲解）</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-type">UserAuthService</span> service;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void configure(<span class="hljs-type">AuthenticationManagerBuilder</span> auth) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>        auth<br>                .userDetailsService(service)   <span class="hljs-comment">//使用自定义的Service实现类进行验证</span><br>                .passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-type">BCryptPasswordEncoder</span>());   <span class="hljs-comment">//依然使用BCryptPasswordEncoder</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><p>既然要进行数据库认证,必然要解决的就是连接数据库,然后才可以查询数据库.</p><h4 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库:"></a>链接数据库:</h4><p>和之前一样,我们需要在RootConfiguration中配置一下Mybatis和数据源：</p><p>数据库名:study</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScans(&#123;</span><br><span class="hljs-meta">        @ComponentScan(&quot;book.manager.service&quot;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@MapperScan(&quot;book.manager.mapper&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RootConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HikariDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/study&quot;</span>);<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        bean.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如上代码以及下图,之前我们提到过有关RootConfiguration和ServletConfiguration的区别</p><p><img src="https://img2018.cnblogs.com/blog/738818/201906/738818-20190617214214614-761905677.png" alt="img"></p><p>总结:有关service,datasources联想到Root</p></blockquote><h2 id="简单回顾一下"><a href="#简单回顾一下" class="headerlink" title="简单回顾一下:"></a>简单回顾一下:</h2><h3 id="SecurityConfiguration"><a href="#SecurityConfiguration" class="headerlink" title="SecurityConfiguration:"></a>SecurityConfiguration:</h3><p>功能:配置SpringSecurity,以达到区别直接认证或者数据库认证的效果</p><p>继承或接口:extends WebSecurityConfigurerAdapter</p><p>代码组成:</p><ul><li>被重写的一个方法,直接认证和数据库认证都需要重写此方法,只是数据库认证此方法还会调用service层,service层又会调用mapper层访问数据库<ul><li>protected void configure(AuthenticationManagerBuilder auth) throws Exception</li></ul></li></ul><p>注意要点:</p><ul><li><p>注解:</p><ul><li><p>@Resource</p><p>UserAuthService service;&#x2F;&#x2F;前面学的知识嗷,这样就不需要自己new实例了</p></li><li><p>@Configuration</p></li><li><p>@EnableWebSecurity</p></li></ul></li><li><p>提醒:</p><ul><li>被重写的configure其实有两个可选,当我们要选择Websecurity开头的,另一个HttpSecurity现在用不到,后续可能会用到</li></ul></li></ul><h3 id="UserAuthService"><a href="#UserAuthService" class="headerlink" title="UserAuthService:"></a>UserAuthService:</h3><p>功能:上面提到protected void configure方法会调用service层,这里service层做简单的业务处理</p><ul><li>从数据库根据用户名获取密码</li><li>判断密码是否为空</li><li>判断密码是否正确</li><li>判断用户类型</li><li>.build()</li></ul><p>继承或接口:implements UserDetailsService(重点)</p><p>代码组成:</p><ul><li><p>通过@Resource注解自动注册mapper实例</p></li><li><p>重写public UserDetails loadUserByUsername(String s)方法</p><ul><li><p>形参s代表传入的用户名,通过用户名查密码</p></li><li><p>最后需要返回UserDetails，SpringSecurity会根据给定的信息进行比对</p><ul><li><div class="code-wrapper"><pre><code class="java">return User   //这里需要返回UserDetails，SpringSecurity会根据给定的信息进行比对        .withUsername(s)        .password(password)   //直接从数据库取的密码        .roles(&quot;user&quot;)   //用户角色        .build();</code></pre></div></li></ul></li></ul></li></ul><p>注意要点:</p><ul><li><p>注解:</p><ul><li>@Service</li><li>@Resource</li></ul></li><li><p>提醒:用到mapper层,记得去写</p></li></ul><h3 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper:"></a>UserMapper:</h3><p>功能:数据映射层</p><p>继承或接口:本身就是interface接口</p><p>代码组成:</p><ul><li>方法 String getPasswordByUsername(String username);</li></ul><p>注意要点: </p><ul><li>String getPasswordByUsername(String username)使用了@Select注解</li></ul><p>注解:</p><ul><li>@Select(“select password from users where username &#x3D; #{username}”)</li></ul><h3 id="RootConfiguration"><a href="#RootConfiguration" class="headerlink" title="RootConfiguration:"></a>RootConfiguration:</h3><p>功能:各类配置</p><ul><li>配置ComponentScan</li><li>配置MapperScan</li><li>配置数据库</li></ul><p>继承或接口:暂无</p><p>代码组成:</p><ul><li>两个被注册为@Bean的方法,老生常谈了,链接数据库基本直接复制这个方法就行</li><li>public DataSource dataSource</li><li>public SqlSessionFactoryBean sqlSessionFactoryBean(@Autowired DataSource dataSource)</li></ul><p>注意要点:配置类本身需要添加注解@Configuration别忘记了</p><p>注解:</p><ul><li>@Configuration</li><li>@ComponentScans</li><li>@MapperScan</li><li>@Bean</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity学习笔记(1)</title>
    <link href="/2022/08/27/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <url>/2022/08/27/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity学习笔记-1"><a href="#SpringSecurity学习笔记-1" class="headerlink" title="SpringSecurity学习笔记(1)"></a>SpringSecurity学习笔记(1)</h1><p><strong><a href="https://www.bilibili.com/video/BV1xL4y1H7Tq?spm_id_from=333.999.0.0">参考链接 哔哩哔哩Java SSM 教程,推荐b站up主:青空の霞光,笔记很多部分也都是引用他的教程</a></strong></p><p>通过图书管理系统了解SpringSecurity</p><p>  SpringSecurity是一个基于(spring)开发的非常强大的(  权限验证   ) 框架，其核心功能包括：</p><ul><li>认证 （用户登录）</li><li>授权 （此用户能够做哪些事情）</li><li>攻击防护 （防止伪造身份攻击）</li></ul><p>我们为什么需要使用更加专业的全新验证框架，还要从CSRF说起。</p><h2 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h2><p>全称()</p><p>我们想必都经历过这样一种情况,突然的某一天收到一条好友发来的链接,或者在某个深夜,你在找学习资料时,进入一个网站,也会看到一些钓鱼链接,点击之后可能一些不好的事情就会发生,那么这些钓鱼链接的工作又是什么呢?</p><p>了解其中的原理,我们需要知道一个前提:</p><p>当我们访问某个服务器时,往往会生成对应的名为JSESSION的cookie,这里面可能保存着一些重要信息,比如你的账号密码,通常记住密码这个功能也是可以用到这个cookie实现的.而这个Cookie的生命周期,一般你只要不关闭浏览器,他就会一直保存.</p><p>现在，我们的服务器新增了一个转账的接口，用户登录之后，只需要使用POST请求携带需要转账的金额和转账人访问此接口就可以进行转账操作：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/pay&quot;, method = RequestMethod.POST, produces = &quot;text/html;charset=utf-8&quot;)</span> <span class="hljs-comment">//这里要设置一下produces不然会乱码</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">pay</span><span class="hljs-params">(String account,</span><br><span class="hljs-params">                  <span class="hljs-type">int</span> amount,</span><br><span class="hljs-params">                  <span class="hljs-meta">@SessionAttribute(&quot;login&quot;)</span> Boolean isLogin)</span>&#123;<br>    <span class="hljs-keyword">if</span> (isLogin) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;成功转账 ￥&quot;</span>+amount+<span class="hljs-string">&quot; 给：&quot;</span>+account;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转账失败，您没有登陆！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么，大家有没有想过这样一个问题，我们为了搜索学习资料时可能一不小心访问了一个恶意网站，而此网站携带了这样一段内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我是(恶)学(意)习网站<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>对不起，您还没有充值本站的学习会员，请先充值后再观看学习视频<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/mvc/pay&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hacker&quot;</span> <span class="hljs-attr">hidden</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;amount&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;666666&quot;</span> <span class="hljs-attr">hidden</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我充值会员，观看完整视频&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意这个页面并不是我们官方提供的页面，而是不法分子搭建的恶意网站。我们发现此页面中有一个表单，但是表单中的两个输入框被<strong>隐藏</strong>了，而我们看到的只有一个按钮，我们不知道这是一个表单，也不知道表单会提交给那个地址，这时整个页面就非常有迷惑性了。如果我们点击此按钮，那么整个表单的数据会以POST的形式发送给我们的服务端（会携带之前登陆我们网站的Cookie信息），但是这里很明显是另一个网站跳转，通过这样的方式，恶意网站就成功地在我们毫不知情的情况下引导我们执行了转账操作，当你发现上当受骗时，钱已经被转走了。</p><p>这样的漏洞是不可被接受的,那么SpringSecurity就可以用来解决这个问题.</p><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><p>首先我们需要搭建一个图书管理系统的大致框架.静态文件我们采用直接导入他人写好的模板就行,后端部分先把简单的框架搭好就可以.</p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目:"></a>新建项目:</h3><p>项目类型选项:Java EnterPrise</p><p>项目模板:web应用程序</p><p>应用程序服务器:Tomcat9.0</p><p>组:book.manager</p><p>项目名:BookManager</p><p>进入项目后删除默认jsp文件,配置文件,以及HelloServlet文件,我们采用全注解方式</p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖:"></a>导入依赖:</h3><p>友情提醒:今后我们一个项目中可能会导入大量的依赖,数量一旦多起来,看起来也会眼花缭乱,因此,建议将不同的一类进行分类,简单注释其内容.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 建议为各个依赖进行分类，到后期我们的项目可能会导入很多依赖，添加注释会大幅度提高阅读效率 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  Spring框架依赖  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--由此可见,此处导入了有关SpringSecurity的两个依赖,第二个是关于SpringSecurity的配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  持久层框架依赖  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zaxxer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>HikariCP<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--  //我们需要使用ThymeleafViewResolver作为视图解析器，并解析我们的HTML页面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.14.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  其他工具框架依赖：Lombok、Slf4j  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-jdk14<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  ServletAPI  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  JUnit依赖  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来我们先把几个包创建好</p><h3 id="初始化包-initializer"><a href="#初始化包-initializer" class="headerlink" title="初始化包:initializer"></a>初始化包:initializer</h3><ul><li><h4 id="MvcInitializer"><a href="#MvcInitializer" class="headerlink" title="MvcInitializer"></a>MvcInitializer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manager.initializer;<br><br><span class="hljs-keyword">import</span> book.manager.config.MvcConfiguration;<br><span class="hljs-keyword">import</span> book.manager.config.RootConfiguration;<br><span class="hljs-keyword">import</span> book.manager.config.SecurityConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;RootConfiguration.class, SecurityConfiguration.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;MvcConfiguration.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="控制层包-controller"><a href="#控制层包-controller" class="headerlink" title="控制层包:controller"></a>控制层包:controller</h3><ul><li><h4 id="PageController"><a href="#PageController" class="headerlink" title="PageController"></a>PageController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manager.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 专用于处理页面响应的控制器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="配置包-config"><a href="#配置包-config" class="headerlink" title="配置包:config"></a>配置包:config</h3><ul><li><h4 id="根容器配置文件-RootConfiguration"><a href="#根容器配置文件-RootConfiguration" class="headerlink" title="根容器配置文件:RootConfiguration"></a>根容器配置文件:RootConfiguration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manager.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScans;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@ComponentScans(&#123;</span><br><span class="hljs-meta">        @ComponentScan(&quot;book.manager.service&quot;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RootConfiguration</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="MvcWeb配置文件-MvcConfiguration"><a href="#MvcWeb配置文件-MvcConfiguration" class="headerlink" title="MvcWeb配置文件:MvcConfiguration"></a>MvcWeb配置文件:MvcConfiguration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manager.config;<br>  <br>  <span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br>  <span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br>  <span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br>  <span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br>  <span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;<br>  <span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;<br>  <span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br>  <span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br>  <span class="hljs-keyword">import</span> org.thymeleaf.spring5.SpringTemplateEngine;<br>  <span class="hljs-keyword">import</span> org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;<br>  <span class="hljs-keyword">import</span> org.thymeleaf.spring5.view.ThymeleafViewResolver;<br>  <span class="hljs-keyword">import</span> org.thymeleaf.templateresolver.ITemplateResolver;<br>  <br>  <span class="hljs-meta">@ComponentScan(&quot;book.manager.controller&quot;)</span><br>  <span class="hljs-meta">@Configuration</span><br>  <span class="hljs-meta">@EnableWebMvc</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>  <br>      <span class="hljs-comment">//我们需要使用ThymeleafViewResolver作为视图解析器，并解析我们的HTML页面</span><br>      <span class="hljs-meta">@Bean</span><br>      <span class="hljs-keyword">public</span> ThymeleafViewResolver <span class="hljs-title function_">thymeleafViewResolver</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> SpringTemplateEngine springTemplateEngine)</span>&#123;<br>          <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>          resolver.setOrder(<span class="hljs-number">1</span>);<br>          resolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>          resolver.setTemplateEngine(springTemplateEngine);<br>          <span class="hljs-keyword">return</span> resolver;<br>      &#125;<br>  <br>      <span class="hljs-comment">//配置模板解析器</span><br>      <span class="hljs-meta">@Bean</span><br>      <span class="hljs-keyword">public</span> SpringResourceTemplateResolver <span class="hljs-title function_">templateResolver</span><span class="hljs-params">()</span>&#123;<br>          <span class="hljs-type">SpringResourceTemplateResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringResourceTemplateResolver</span>();<br>          resolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>          resolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/template/&quot;</span>);<br>          <span class="hljs-keyword">return</span> resolver;<br>      &#125;<br>  <br>      <span class="hljs-comment">//配置模板引擎Bean</span><br>      <span class="hljs-meta">@Bean</span><br>      <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">springTemplateEngine</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> ITemplateResolver resolver)</span>&#123;<br>          <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>          engine.setTemplateResolver(resolver);<br>          <span class="hljs-keyword">return</span> engine;<br>      &#125;<br>  <br>      <span class="hljs-comment">//开启静态资源处理</span><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>          configurer.enable();<br>      &#125;<br>  <br>      <span class="hljs-comment">//静态资源路径配置</span><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>          registry.addResourceHandler(<span class="hljs-string">&quot;/static/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/WEB-INF/static/&quot;</span>);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="在Web-INF文件夹下创建"><a href="#在Web-INF文件夹下创建" class="headerlink" title="在Web-INF文件夹下创建"></a>在Web-INF文件夹下创建</h3><h4 id="static文件夹-用于放置下载的前端静态文件"><a href="#static文件夹-用于放置下载的前端静态文件" class="headerlink" title="static文件夹:用于放置下载的前端静态文件"></a>static文件夹:用于放置下载的前端静态文件</h4><h4 id="template"><a href="#template" class="headerlink" title="template:"></a>template:</h4><ul><li>index.html</li></ul><h3 id="修改部署配置"><a href="#修改部署配置" class="headerlink" title="修改部署配置"></a>修改部署配置</h3><p>别忘了改一下配置和部署中的URL和应用程序上下文,把长名字改成简略名,这样访问地址会简单些</p><p>此时我们还没有使用到SpringSecurity框架,在URL地址输入ip&#x2F;端口&#x2F;xxx(项目名)&#x2F;index就可以访问到静态资源文件了</p><p>下面开始介绍如何**—**</p><h2 id="使用SpringSecurity"><a href="#使用SpringSecurity" class="headerlink" title="使用SpringSecurity"></a>使用SpringSecurity</h2><h3 id="创建SecurityInitializer"><a href="#创建SecurityInitializer" class="headerlink" title="创建SecurityInitializer"></a>创建SecurityInitializer</h3><p>配置SpringSecurity前，与Mvc一样，需要一个初始化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSecurityWebApplicationInitializer</span> &#123;<br>    <span class="hljs-comment">//不用重写任何内容</span><br>  <span class="hljs-comment">//这里实际上会自动注册一个Filter，SpringSecurity底层就是依靠N个过滤器实现的，我们之后再探讨</span><br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个配置类用于</p><h3 id="配置SpringSecurity"><a href="#配置SpringSecurity" class="headerlink" title="配置SpringSecurity"></a>配置SpringSecurity</h3><p>即在config下创建SecurityConfiguration文件</p><p>和配置Spring一样,需要通过注解进行配置,这里用到了@EnableWebSecurity这个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><span class="hljs-comment">//继承WebSecurityConfigurerAdapter，之后会进行配置</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着在MvcInitializer.java的根容器中</p><h3 id="添加此配置文件"><a href="#添加此配置文件" class="headerlink" title="添加此配置文件"></a>添加此配置文件</h3><p>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;RootConfiguration.class, SecurityConfiguration.class&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，SpringSecurity的配置就完成了，我们再次运行项目，会发现无法进入的我们的页面中，无论我们访问哪个页面，都会进入到SpringSecurity为我们提供的一个默认登录页面，这样就不会出现我们在URL地址输入ip&#x2F;端口&#x2F;xxx(项目名)&#x2F;index就可以随意访问到原先需要登陆才可以访问静态资源文件了</p><p>至此，项目环境搭建完成。</p><h2 id="简单回顾一下"><a href="#简单回顾一下" class="headerlink" title="简单回顾一下:"></a>简单回顾一下:</h2><h3 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h3><p>是一个基于()开发的非常强大的(   ) 框架，其核心功能包括：</p><ul><li>认证 （）</li><li>授权 （）</li><li>攻击防护 （）</li></ul><p>首先是initializer包中:</p><h3 id="MvcInitializer-1"><a href="#MvcInitializer-1" class="headerlink" title="MvcInitializer"></a>MvcInitializer</h3><p>功能:初始化Mvc项目</p><p>继承或接口: extends <strong>AbstractAnnotationConfigDispatcherServletInitializer</strong></p><p>代码组成:</p><ul><li>被重写的三个方法<ul><li>getRootConfigClasses</li><li>getServletConfigClasses</li><li>getServletMappings</li></ul></li></ul><p>注意要点:无</p><h3 id="PageController-1"><a href="#PageController-1" class="headerlink" title="PageController"></a>PageController</h3><p>功能:专用于处理页面响应的控制器</p><p>继承或接口: 无</p><p>代码组成:return”index”(返回类型为String)的public方法login()</p><p>注意要点:</p><ul><li>注解<ul><li>类注解@Controller</li><li>方法注解@ResquestMaping(“&#x2F;index”)</li></ul></li></ul><h3 id="根容器配置文件-RootConfiguration-1"><a href="#根容器配置文件-RootConfiguration-1" class="headerlink" title="根容器配置文件:RootConfiguration"></a>根容器配置文件:RootConfiguration</h3><p>功能:配置类</p><p>继承或接口:待添加</p><p>代码组成:待添加</p><p>注意要点:</p><ul><li>注解<ul><li>@ComponentScans(  {   @ComponentScan(“book.manager.service”) }       )  </li><li>@Configuration</li></ul></li></ul><h3 id="MvcWeb配置文件-MvcConfiguration-1"><a href="#MvcWeb配置文件-MvcConfiguration-1" class="headerlink" title="MvcWeb配置文件:MvcConfiguration"></a>MvcWeb配置文件:MvcConfiguration</h3><p>功能:配置类</p><p>继承或接口: implements WebMvcConfigurer</p><p>代码组成:</p><ul><li>三个注解为@Bean的方法<ul><li>public ThymeleafViewResolver thymeleafViewResolver(@Autowired SpringTemplateEngine springTemplateEngine)<ul><li>功能:我们需要使用ThymeleafViewResolver作为视图解析器，并解析我们的HTML页面</li></ul></li><li>public SpringResourceTemplateResolver templateResolver()<ul><li>功能:配置模板解析器</li></ul></li><li>public SpringTemplateEngine springTemplateEngine(@Autowired ITemplateResolver resolver)<ul><li>功能:配置模板引擎Bean</li></ul></li></ul></li><li>两个重写的@override方法<ul><li>public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer)<ul><li>功能:开启静态资源处理</li></ul></li><li>public void addResourceHandlers(ResourceHandlerRegistry registry)<ul><li>静态资源路径配置</li></ul></li></ul></li></ul><p>注意要点:</p><ul><li>注解<ul><li>@ComponentScan(“book.manager.controller”)</li><li>@Configuration</li><li><strong>@EnableWebMvc</strong></li><li>@Bean</li></ul></li></ul><h3 id="SecurityInitializer"><a href="#SecurityInitializer" class="headerlink" title="SecurityInitializer"></a>SecurityInitializer</h3><p>功能:初始化SpringSecurity框架</p><p>继承或者接口:extends AbstractSecurityWebApplicationInitializer</p><p>代码组成:待添加</p><p>注意要点:暂无</p><h3 id="SecurityConfiguration"><a href="#SecurityConfiguration" class="headerlink" title="SecurityConfiguration"></a>SecurityConfiguration</h3><p>功能:配置即将被初始化的SpringSecurity</p><p>继承或接口:extends WebSecurityConfigurerAdapter</p><p>注意要点:</p><ul><li>注解:<ul><li>@Configuration</li><li>@<strong>EnableWebSecurity</strong>这个注解可以想到上面的@EnableWebMvc</li></ul></li></ul><p>最后记得在 MvcInitializer中添加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;RootConfiguration.class, SecurityConfiguration.class&#125;;<span class="hljs-comment">//就是这一步</span><br>&#125;<br></code></pre></td></tr></table></figure><p>好了,这篇文篇到这就结束了.</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>球状闪电:美妙人生的意义</title>
    <link href="/2022/08/25/%E7%90%83%E7%8A%B6%E9%97%AA%E7%94%B5(%E7%BE%8E%E5%A6%99%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89)/"/>
    <url>/2022/08/25/%E7%90%83%E7%8A%B6%E9%97%AA%E7%94%B5(%E7%BE%8E%E5%A6%99%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89)/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9cba47b1683bc3be13c7b8c24cc20bac31343efdca81a2e93a6edd3312cfef38"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>摘抄</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>摘抄</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>听和读</title>
    <link href="/2022/08/24/%E5%A4%A7%E5%9B%9B%E5%BC%80%E5%AD%A6%E7%A2%8E%E7%A2%8E%E5%BF%B5(1)/"/>
    <url>/2022/08/24/%E5%A4%A7%E5%9B%9B%E5%BC%80%E5%AD%A6%E7%A2%8E%E7%A2%8E%E5%BF%B5(1)/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a18af03ba3e968f84869e4eac50772f5ce46352152f764b40d5822c4d0a787b">ba8c35434f82bdb0b8749538e49486c541ac37556674ee9d1b84fe637280abec14153dbf5bbea3f2ca1384cb7ee1fbcfc214b833684e048cd7a815bddc74db8652759065e6859d275d694cab5ea58951deb5ececf6ef25d6eeec9529a06d6b16f4b363057a994a86640f46fd36dc18e87c848e331b22600de841abd563fd3263424cf46fabdc89649b377bd0ccc01064efb87518a0c157ceffec6cc23bf3b96e438d9015cff2a4ca3c48f3fcd40595ba16dd77b68d86d1a4b0cc978daa107bf7db5aa988fd5ae4dbc853207e3b4b0f647cfdd220c435ebd1a274252dcefcb4947e9fc6536123d5c226de3eda0ab53e09c6c523f2867ba7cf618ed462a784bb01f157c2b3ca0d30874c247c0a4ac55e35e125665a226e63d34cbe2fb2c8aa2b28645faf79b836effabc2e34cba720f02c15bfee91cb7fa4d145247e17cfd37bc1a5872c5b19d9a457924eecb3652dd7a3d7dcbf2afccdcd04b2f84c792c080ca8b7c517984decf8dfdd6006345edf9338be7996b6acdc133c9b5d097c88c00b143953671cd83bc4bb43387f2878b405aeb42fdafe77d272323d55638f9e412521d9a10ca2fde451b01ef183a1edfe2550cb686f506e3bb2dbfd415cfd242bb940506be648c9245bca1ea742486e6a40d60ce51bc64f876b634c3a63b145bf2321ab89c89663e3b37acd0354fcbf796d8db428a56343d6b135d1ab963290cadffc42d476d8047d3b4b93c0cfc7d9fc2ab220c100fc0558cb9da7aab72b9f8ff905405f61299072344d08bad631caa22155d32af6d5fc941737069720bdfc7a0a78830941a56a081e435324971c5a9c8a8bf5d9235fcb4826f43ccdebdab4bb6dc4ef9beb4230db28fb0f4400a35c95e83f1c34ff70587ad88cacb51b126a95079224e67811c7ff2a86e1de754efe116a65d0bc7987af64c1aed5058998def8177a738df9d5b0f098190c95d132464e8cc0d8062d3eab10f1a6695e06015c0f607e64f26e4e3a717a0e262350b4074a21ac184e1a879849882b7f8d423723b2fb359f2149940f1ba2514539e1e30b29524ec9fe321b1ce5b825ef6b4981ffb390b8c1f0cd6d6dfd20650bebfc60e1d778c78c116546064abd6d7084ff7ac1d38a5143c4800d525175e77e782719ce6f722cb71f6e8c86ddf1ccb3e0ca555ec6eef7c2f53f8d71e16f35c84df10d11545a22d69d937ca2f63e342dd2744a3659be31146abd9ab2847aab122a4a8470f7f86359c73c9054c5b695d5a054f8201f0a50b366ba8045e53d0f51d7091aebae0c12758d8f748409819c249176e57e18745a3a8c78c45f35afb4da576a16760a20e5b4ceadf197ee9da62c6ef5ae621b7d370f48b179424f3c07a0d9424b84a5658a43931baa79a591284e5f1019302075f14e94c44e131f71d66be2fcb031072e2910d4a248da434a2d12f09678640eedcc4bbbb161248f36f1dc0281a018f7a27b71156effc0fc063efce7d266f0526041a863d6302785ab752f2fe62c57fd3c7f27f5d5b9ade5a25ef2fca123b6594617f7e2d83fbe0c9c007a0dba2dd9d8a86403a58a1efd34b12f2246cbcf65a2058e79b50425071db271c2907cd19a64d3e35432817a700189dfb4b1aa2c8059eb48506b8836ca120e965977eca56a082f32eea46adbd7e689697cfe97561f57d171b72cd6e6c07ec9e93762ffc8c733e120cbf26cb9240eb7b60a27657eac4d853f522ef22a69be366c4cdcd747da3a8e5efd0b526aca612086c7a067b2ebd64988af27954450db847c6712e9d527af1e47a2bb693ff990ab5e093774e93206940a3a0be27669a01868ce76920482e04d3cfbc6b7d0561ed102eb94f781af149e5321d31d205fab0530c69f46d183ef7eabcd76a20f6b65398b5161423ce106ea59d26b2b811288d33b69daf02067434a7c3955e34decabc9b62e71232acf9c86fa460a266572cc19eb9c3b9155380ebb5742337616b6b647b2491dd72cbddd879c2b9907800d88fbb713642eb651097afae14db2530f6e63dc02c6a55dd4dd0967bf48008ad3bf335c7d8acdd07e97b62e53890d59b096cd75f697be26ceb930a85ab35053843534ab5119edce902590702553c913d23910b33bd7ba5a1a3be9226730ea0ef379e76efa244630fa5f01feb348e9e8e114b85b83a30047ed86ea9a0fc811ff52e1dd7036dd88f54171727ca098f18542aa9eb855adfe56b7421a4b0950a93ac6af1aa02c446f41b395489acb307d890442e3dc68ce88ac4acdc920732f2fb909ff836db78b7e158e83a1d32a9c9f5010e1fdbc197f198d580831a62fa6359e3825fdc20d4ba476b1973b9a5310bdc63c2032fac207145150a9488ae0a7b667550b6df4d61a789dd884aeaa12967ac9485ab1c5f55c4a0655cfef9c4897e485f28c7f4765e9f9ff181ca0a867237264479e18b29a87a8843926b874701898226056daaa12183774345bef5c5c8b204e68b9f9a4c79434cb049f474c97788e3e219988f4ade2527bd1eadd79453499c2f546ae8e1f9bbc4273464491b7395308f8e0b509261cb30744ecaad2d2b2e30414a455b7256bbe81458d1824c387c016bb0d8acc61d7a39f5a7ac4c90cba89bce41463bffa80a57ba94cc8270a1c03d501a7a7b4d654de68d43f7ba5430a41c6203f9338a5fe8497120ce7a111bdddd73d6b7849b0d4e35863b03940fdce9e915c575837721572b2c5a7d6066f12e4e3d403e141ef5cbb65e608e529adefdca76ca14edd7c7c3656ea4ebdd81c2bfb359ac2ba08e0fcf6b5c823974b37f26e5a478376b00702262a22f7db7dc3c6fe03a8ae5e45970e7a9e791a77fee26ef4b9aa15bc4353cc8aa1edbba89d00e94f4d63c82fec88194c3d9f6ae63cca3405e9fb57fc0eb777eb3371ad2bfd56495d7a95271e3206e41a87e5d90d1af05efcc05d7cb5cc4ef8ce33b9e2d629bcfd214c0ddc8ef782d824ed121e4c4c3a03fc7fe8ac9ac561d5fffc86c7480c2afe20dd5a5f90134b3772bc6bbe7ad23f37524f5d18b629b593d97b852cf41dae8d514b66d868b50c297b2f0c0e21318e9b36b342bf6647f579cfb0206a28b0349626e74441866b36a5fe7718371e190fca4e22f1a4838eb04195d1cc95d094e016b0380d542a95690b3484d4f2aded2844ff01512c90a12c995f6b8934bbee2c3e0eeefbbd6283ad81a4e8203575b0502709ac5189d78487ab62ce132fd5cd8f353cdf754ba839f5a8eee1d5bd4685b7c9f888de1f41365cc90389a6dbaac067a130ffe8f6cfd08e9ce91b840c5173bb6527e038c20410fb00e4efc4f472499abb5ae1b9490c6134290ae05b1c7dfe69a2bb4dbf72cd98bb252cdaf2b2e76dde54aa4a803e214935d3e2b21f51461c2fa884b921b592229957c7c62da0f37483ea82bcd86a4ebc8f056677f5572d8401c03d693958459b84170ae28cf485d5dc19b5cddcbe0fa33c02aa90d67fcda0221457d3fd29a740a1304abb3b47eb5bcd805ad2cad7abc834fd57f644a9fbcea778b199f172b734d332c678bf529067931c14d84f6991e964798017a3bfc38e80dbfcfd54085c8b95c7bd9f33694930b08fca75e8e56445a7cc07c4fc6e0ea9e79bba83816962c89f673d58c4040eefec5868f796e9ff821a576a10235081ac33d21fb347bcbd826d1937f3d452fc0aef345b4e76ccfdd8048d0f29f39395ed3c42dc40c202b3533a8a271e6f11e91f7b4681820e2abd9621db35bf527b54474875b721e6c82608576804ccf911298d991260abd08c7868b06b93a48ec72a9045eeb1324fc715bb5e3728055cb001ef1786e50bb718f6ee93f72a9b4f30afd9bb1bff7f1781f730e57bc6598bb6676f75a59702f09ab5fdedd31665bb6b8687d3e15933b167bcd2b91d7debe8cc3dc57b3baeaf16ce5196341b8bef63bd6f565c9dcaaa4fbd504871c7e6a686b2a17605c99fc284f153038f2dd1b0ddcedd9c20f75c7bdeac23201c0614a1ee89a2d161dd3a019441041fe82f3d639870066052880aad8394c657ba8768afeee9b5b0e75fddabbd3afc8bba1609229ec9596e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>偶然与想象,我看过的最佳日式三集片</title>
    <link href="/2022/08/18/%E5%81%B6%E7%84%B6%E4%B8%8E%E6%83%B3%E8%B1%A1,%E6%88%91%E7%9C%8B%E8%BF%87%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BC%8F%E4%B8%89%E9%9B%86%E7%89%87/"/>
    <url>/2022/08/18/%E5%81%B6%E7%84%B6%E4%B8%8E%E6%83%B3%E8%B1%A1,%E6%88%91%E7%9C%8B%E8%BF%87%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BC%8F%E4%B8%89%E9%9B%86%E7%89%87/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dab45f8f1636eb8ce1d24113b203a9e9024bf452ed694d35a251b607cb21a7fc">ba8c35434f82bdb0b8749538e49486c50a4907307e8aad26f86d5ddf5adc7ab9789fceec189df1545ee05a0e0dd2cc1e1ce9017813c74ac62a124fd2e95421ca15e7936098d3607b924e3858ca782eba7cd71a6800ca3888332d853131d0cebe9356cb8fad6139135bc3f928a4e0691d16de185f15b7f7eed6b796fe86b0066851eb7eef7394188ee24e0eac113afdc9ae3c3c159f3db0944aaeb222729844fc71bbe29c4b37fe6c0b2e684e12648e9f746375649c9c27406591664d8d6d658fdbe2bf43e188fbd9e9a793510ab3412108e63937b7f86ed86827ded17eaf71c5d91b3cfc146a2abb952d6d51f3bc6a12c357ece7ba8fd414c94a57334a224ae06255049762741d9d73835c01a7c26da44cb510a1f8b8311cc1ae09d5dcd9b6dc3e2895883212b3c99ba67e39605a15007be403a9166fe9ab704b57bdb51fe115ea15972b5bedb62976e4d9f0867aa9b58da0d00d949dc32a2ed8a1765e42c09dc5d24ac2c3d6513230f2a3ce0fb5f549a2f3e7acd42b2c25bbe6145fa11f57e27078f5d11b0d183894cfed22da9165dce67cdf30ddb5413753fb292c656b9f8a50b8e62ea071ca1dfdfe674dd4840d818ced8bd3b0cd91bdc8347e2d9cb91d8d5511bec93efa928012ad292d0e9f6c8f0a85053e66988883b52f992b5ad5b532c7cce1e08c3ed4da7fb31fc56e0b8f8d542f877b552bc0db513286043bed86f1d7f0e880973d8a11d495fafdc0a326e46033112d2a0a03d3b34e49637104c416b01d4799f3b9d6f0deede60b5a4ced1d5ecdc516ab253c389796239a2043d7bb57a2cf5eaaf0a4cdfb2267e627e9f7aaa2d142cb308450ed2925e070ca9cca59225532eae3bba71f4024557d6523abc449d740809e573a042558963263d450a366443abb0b192a5eb745a9931556add029068ba9fe4ae1c0705e3fade9150f9951200a72d18fa168e535131affb7d2ab266e6e3f9d63740f08df2cad37aaadebe4c792e1855251f0252b0317bab215a418c6306312c7535b2e9b8249f016275fbc6eb5a83a6ec8189fd484abd34cde419d644e14edd9c4b8d01f8aea3ff12c6274624429f907baa126743b16559375ad6d9d34def734469a216f5960ba0abde0e9273e3037e3ef45d85a5e8ba8bfc2de1f0f095be8a28488f220453cc7d32d81763515d18151d8fcfd105663518773cf024b0e874efadf2befb3d627269545cf741ec923412e6b247cf8ac3c2de4754bfaa4510cc5763d36fa468ee562600288b38c2639a8b695c9a62d75b96a77a93c087e8895a05329ca055fca79eaac53424aafdff7c72459bff4b9e2fe60896fec6fdfdcfb6618d12f6b0ca07f3105cf8f360bc8b2e08179b643f66708b247a3aa0914d7e55b64dd2902c1a92da2987720d1a8870e005deffa7d1f06cb53ce262a441bf482ae84ea487e31d0a6a0acc80ffe2e40037155f28d21812844f591e64611e81203f9b704a81b4bc0ff338034c8613e5e61cfb45523ed30d9d094e3d9e7ac91a6c4b7efbdd08cf367799d3a65b863296f7d302dbaefdadf9ecdd869797c411f4d2e56621e81af2ded83266f4cb10779dedcb9eda20ec084e125af8cc9ffbb5921cdff401f951923c7209691ca118fb3d65f5aede3b366f75174db4ab65e77885de14eba59337797f42f287ed735ddc05933846cbac5ef4ea1e6a54909c7a49745d2f0ee047165e1c410fdaa4fdb03df1ad70d36dcf5cbe7ae7d302347421e15f4f8390f71ef419ca7ad5f53b7edb6e2e1dac6567d07b0f09c0f9d3457e44b14b705aefd6b843faa5387afa2b2b615f6880d9e11d051a07992f50e325e49b619c5af51ccc87f8a465e45be36af84ec44443f6eab6352706905542dcfa4ea232f6c3e6854b67ac84becdbe157fbeeb32ad7e6feb3cfe77c82f67a30d1462459580580c54738cda01c0851a29d4c12defa4f015da98005abdc4aadd6d30d7cf273842e477237af171f127658c329e5c60602648e95b6a50e2989c37b9824de69259017d1f4456d5bf6c81f87df122c817a56a1f1d35daddfe766b1ba49a0a1393d7b54c2b2e01b89bf4fd786d3dd55eb9b791a0859c731abc9922442ca83ab00cf197b5b3117efb2e609798c78422bf3c5f4f25e21ed22d4f9f4a95326701986d8d55be6e596b1ee396adaec228dae52fc62a5879da984ed9e6fa044381332672ea403ddd455fb15de3865be8aa29026436f55f028494301f18f72ff3bb34a205fb9d9293e4a681aa41169ca0cd32ae39aeb1193efad18a87b5ad7ac6d97da4d4cd861adabb84abc6c67f97f75b41ec853509e3f0587dbdc4651ae083a0a36e6170c73e358cd6be1f3ebdc3a65b5fdd76ea454dd53df590abfd6e00702dd6904299bfe3af49c578ac47feaba39dfafb03ccdd08a830a60d36b92c7ecd9c8d0f13c912c5b905cdc7e8f4747346a6457937035f169660550d206fa09c09f90710a25a3bf75e7ecb77a969601ea915f0e3fa59f72abc6726a7e37e2bf718292c507999b24e9dc67803e8891b1ecfa6d515cd004204b2218462443969925063f32df5f11e14618cd5465c9c52443a8614b435a064b9fe0c36adbe9c484fb09527472bcab401f67aab4e1a730d602e71090d13076504afae1102fe987ebeab5612cbd7754c31a5dd0e0b2aafdc7a2e8b8c916b3378af65a242460523b306dbec32800b84d5f1491035b7625b806a657f0ae35a9aaffacd0ffe3478db6253a6451aca4e6abfca96db4e22d01083ed16d2e605c66f8c6678358715bd64d36f57afda58c19770f4f3266631b320ace7b9dab799262985aca12b79b447552c9522daf50d16116a534db3f91212f7d9b1cfbfee24cd0adb6327fa82985456f056f5e1c6744ef26c10c3aec2b27623390030cadb441ca23ba906a3ee566769d595a468ad1d65564ec28b85aebe06f8ce01358be08e4776f9a4b5aea8695a4f60efba9511cf086a581db29b2bd8918fc66c42f490d4b6f0f52dd45f6fea13a256f6e627ddc46ff65f15198c6ba556461524b55f8098454e15ceae581d8aa7648a580cc6b68e070b0bda12f597cacbb06338fd8e9a12a7bd7f3f8c99a9d8eae3acf1e8d0ad2c8d3cab2f28031252882d4045f8ed34e59a86f88bab8c9ea17739a2dd2a22a52b8e5a532531ec273fb183c01b328514afb69b00afa9bccfc31be315434f15dde184a839e3260ccbcbcc6a25bd5628e20b83684e53c64f8ff1ed266b9b19ee698da80ac8d2ecaca7f3646bc4fcefbbdcdaee9702256b3c790d3e3b4efe330eacdfa416c72b7d2b95f29236f2049b7ba310650202135c3f0f807f4c70716df2903f5996c99a0baf2aaa397b851d2637f6cbe40f331b262c06bf5fcdf0958aa44e136f4900fdb84c683cd5bf62a4304a12ff68ecc380cfbe9747135b7255f8ca2e9cd98c79f726db1329357d14dfa98a5e711a18ea542001f6250018f4cf5411d7b0a9dc57c7a98d927bf20d9e3953226d3d369e5c411349374dbdf96deee486de4f4352c33709721f8717207a5d3228111c44b2844af00abfc8f7034f5a20b0190f7b751b8735b24b08e89976ceaf9b40ebfbb07a29005ff5dd0d55be91393a81b7527b213a804b78bcf79a80583ffdc8b94cb56a8ad3df9a0e5dc183bebb3fafbe433afae06096e7d3e9a1e1c4e53d655d63d56ed70843bddc2a7ba8c34e392273789e8e9c0ede004cb442eead9d72de3621bf4358a56b0236243d366f89e72a128b9ed9024a0347510a28a5eea5b0ecb0161c17cca4f6fdeb611cdd4f1a756ffca6b07ce2ec2ebea03c17ea48694a3b433a6540da831167dbaed63adccf21887df8f68176de577f37152783517c99f98cf670f4802711897809fda9bab8f2978bed8ea52d21daf78c6f95fccf6a1b385215b21d4b708cd9797288bf3e04b9ffb19b098e50a6176691e96f7e30d4de072193563f97fc2bea97b5e56806d6240760f1e780c10b6b704a86944d47c0fbb38141efc91de105a7dec6a2ecf1e9ecea4e6dac7cb0f7c1d17ed716cb7d306e13291a38ae1b9a00386bb275f722969c3c58d408a0fc6ad4e2426ece6dc887c31e01dec263bfe410748f56bd9fe99c8efda496cb9f02e90acf472d6bb687ce7bc93acf07fa594757a69423e05ef31c894653fc752214a60d5b455bbff1b1dab39312ca4379cd6704bb1e0b361ad3e12102917a73cbc28887b3da0b0b8df10a03283529b4ec6797b87b8f15fbe629acc23a88a88e6e3a6f5325ec7c9d0520e7992ba85306ce97c7306d125d18af30779f2a601e126992dbc7f43c3737bd5b9cf89ea4a274acfcbf30faf0c9241af4ac37e610fd5b9ee17f419f06f5e4381e554fd3c45e908699c812025d4ac3e6e6bdee5e1e519bb3d0ab8a100fe419b1a7854cc4808a96004deced459da62d01c908f3c92c1d6849bef4332d10a34fa8eab947dfb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>观后有感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>观后有感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每周一炼:双指针</title>
    <link href="/2022/08/16/%E6%AF%8F%E5%91%A8%E4%B8%80%E7%82%BC(%E5%8F%8C%E6%8C%87%E9%92%88)/"/>
    <url>/2022/08/16/%E6%AF%8F%E5%91%A8%E4%B8%80%E7%82%BC(%E5%8F%8C%E6%8C%87%E9%92%88)/</url>
    
    <content type="html"><![CDATA[<h1 id="每周一炼-双指针"><a href="#每周一炼-双指针" class="headerlink" title="每周一炼:双指针"></a>每周一炼:双指针</h1><h3 id="什么是双指针（对撞指针、快慢指针-滑动窗口法）"><a href="#什么是双指针（对撞指针、快慢指针-滑动窗口法）" class="headerlink" title="什么是双指针（对撞指针、快慢指针,滑动窗口法）"></a>什么是双指针（对撞指针、快慢指针,滑动窗口法）</h3><p><strong>双指针</strong>，指的是在遍历对象的过程中，不是普通的使用单个指针进行访问，而是使用两个相同方向（<strong><em>快慢指针</em>,滑动窗口法</strong>）或者相反方向（<em><strong>对撞指针</strong></em>）的指针进行扫描，从而达到相应的目的。</p><p>换言之，双指针法充分使用了<strong>数组有序这一特征</strong>，从而在某些情况下能够简化一些运算。</p><p>首先我们要明确的是什么情况下我们应该想到使用双指针,而什么情况下可以排除使用双指针.,二分查找算法的的应用前提如下.</p><h3 id="应用前提条件如下"><a href="#应用前提条件如下" class="headerlink" title="应用前提条件如下:"></a>应用前提条件如下:</h3><p>例如我们在<strong>二分查找</strong>等算法中就要用到碰撞指针。</p><p>具体就是用两个变量动态存储两个或多个结点，来方便我们进行一些操作。</p><p>通常应在<strong>线性的数据结构</strong>中，比如<strong>链表和数组</strong>，有时候也会用在图算法中</p><p>双指针算法其本质<strong>是基于暴力解法的优化</strong></p><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型:"></a>常见类型:</h3><h4 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h4><p>类似于龟兔赛跑，两个链表上的指针从同一节点出发，两个指针以不同的策略移动，直到两个指针满足某种特殊条件为止(例如相等,或者指针间的子序列大于某个数)，所谓不同的移动策略是指如fast每次增长两个，slow每次增长一个,快慢指针一般起点相同,移动策略不同.</p><p>特点</p><ul><li>快慢指针在同一端开始、往相同方向运动、并以两指针相交 或 单指针遍历完成结束</li><li>快慢指针常用于处理链表或数组中的循环的问题、找链表中点或需要知道特定元素的位置</li></ul><blockquote><p>这类问题一般包括</p><ul><li>计算链表中点</li><li>判断链表是否有环</li><li>判断链表环的起点或长度</li><li>求链表倒是第k个元素</li></ul></blockquote><h4 id="碰撞指针"><a href="#碰撞指针" class="headerlink" title="碰撞指针"></a>碰撞指针</h4><p>对撞指针是指在有序数组中，将指向最左侧的索引定义为左指针(left)，最右侧的定义为右指针(right)，然后从两头向中间进行数组遍历。</p><p>左右指针<strong>通常在数组有序的情况下</strong>，从最小和最大端同时对数组进行处理，对满足特定条件的数组元素进行成对处理，快慢指针逐渐靠拢直至发生碰撞，则遍历完所有数组。</p><p>特点</p><ul><li>对撞指针从两端向中间迭代数组。一个指针从始端开始，另一个从末端开始。</li><li>对撞指针的终止条件是两个指针相遇。</li><li>对撞指针用于已排序的区间</li></ul><blockquote><p>这类问题一般包括</p><ul><li>n数之和</li><li>二分查找</li><li>反转序列</li><li>反转字符串</li></ul></blockquote><h4 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h4><p>接下来,数组操作中的另一种重要方法,滑动窗口法</p><p>一般有两个指针,一前一后,形成一个窗口,多窗户内的元素进行逻辑处理.</p><p>所谓滑动窗口，<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。</p><p><strong>滑动指针算法思想可以用来解决数组&amp;字符串的子元素等问题。它将嵌套循环的问题，转换为单层循环问题，降低时间复杂度，提高效率。</strong></p><p>特点:</p><ul><li>滑块指针从同一端开始，以相同的方向运动</li><li>用来解决一些查找满足一定条件的连续区间 或 长度 的问题</li><li>窗口只能由左向右滑动，不能逆过来滑动。就是说，窗口的左右边界，只能从左到右增加，不能减少</li></ul><blockquote><p>这类问题一般包括</p><ul><li>字符串匹配问题</li><li>子数组问题</li><li>字串问题</li><li>子序列</li></ul></blockquote><p>接下来写几题简单题练习一下</p><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><strong><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></strong></h3><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><figure class="highlight inform7"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs inform7">示例 1：<br><br>输入：nums = <span class="hljs-comment">[3,2,2,3]</span>, val = 3<br>输出：2, nums = <span class="hljs-comment">[2,2]</span><br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = <span class="hljs-comment">[2,2,3,3]</span> 或 nums = <span class="hljs-comment">[2,2,0,0]</span>，也会被视作正确答案。<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">示例 <span class="hljs-number">2</span>：<br><br>输入：nums = [<span class="hljs-number">0,1,2,2</span>,<span class="hljs-number">3,0,4,2</span>], val = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">5</span>, nums = [<span class="hljs-number">0,1,4,0</span>,<span class="hljs-number">3</span>]<br>解释：函数应该返回新的长度 <span class="hljs-number">5</span>, 并且 nums 中的前五个元素为 <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。<br><br></code></pre></td></tr></table></figure><p>两个for循环暴力法,不是今天的主角,正如前面所说,双指针算法通常会作为暴力解法的优化算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>         <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == val) &#123; <span class="hljs-comment">// 发现需要移除的元素，就将数组集体向前移动一位</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; size; j++) &#123;<br>                    nums[j - <span class="hljs-number">1</span>] = nums[j];<br>                &#125;<br>                i--; <span class="hljs-comment">// 因为下标i以后的数值都向前移动了一位，所以i也向前移动一位</span><br>                size--; <span class="hljs-comment">// 此时数组的大小-1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slowIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">fastIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; fastIndex &lt; nums.length; fastIndex++) &#123;<br>            <span class="hljs-keyword">if</span> (val != nums[fastIndex]) &#123;<br>                nums[slowIndex++] = nums[fastIndex];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slowIndex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></h3><p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><p>我们都知道,暴力解法中我们需要两个for循环,一个for循环对应数组的起始位置,一个for循环对应数组的终止位置</p><p>那么,在滑动窗口法中我们应该如何用一个for循环加两个指针能代替上面的操作呢?</p><p>首先要思考 如果用一个for循环，那么应该表示 滑动窗口的起始位置，还是终止位置。</p><p>如果只用一个for循环来表示 滑动窗口的起始位置，那么如何遍历剩下的终止位置？</p><p>此时难免再次陷入 暴力解法的怪圈。</p><p>所以 只用一个for循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置。</p><p>那么问题来了， 滑动窗口的起始位置如何移动呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-comment">// 滑动窗口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; right &lt; nums.length; right++) &#123;<br>            sum += nums[right];<br>            <span class="hljs-keyword">while</span> (sum &gt;= s) &#123;<br>                result = Math.min(result, right - left + <span class="hljs-number">1</span>);<br>                sum -= nums[left++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span>= Integer.MAX_VALUE ? <span class="hljs-number">0</span> : result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h3><p>​                <a href="https://hk029.gitbooks.io/leetbook/content/twopoint.html">《LeetBook》双指针</a></p><p>​                <a href="https://zhuanlan.zhihu.com/p/71643340">算法一招鲜——双指针问题 - 知乎 (zhihu.com)</a></p><p>​                <a href="https://zhuanlan.zhihu.com/p/95747836">算法 | 双指针套路总结 - 知乎 (zhihu.com)</a></p><p>​                <a href="https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3">代码随想录 (programmercarl.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>每周一炼</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分查找</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:Vue中v-for时为什么要绑定key？</title>
    <link href="/2022/08/12/Vue%E4%B8%AD%E7%9A%84v-for%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BB%91%E5%AE%9Akey%E5%80%BC/"/>
    <url>/2022/08/12/Vue%E4%B8%AD%E7%9A%84v-for%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BB%91%E5%AE%9Akey%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue中v-for时为什么要绑定key？"><a href="#Vue中v-for时为什么要绑定key？" class="headerlink" title="Vue中v-for时为什么要绑定key？"></a>Vue中v-for时为什么要绑定key？</h1><blockquote><p>对于这个问题,我也不是很清楚,似乎大家都建议绑定key,所以最简单的方式就是随大众绑定key,既然要绑定key,我们需要问两个问题!!!</p><p>1.绑定v-for的key是不是意味着效率高？！！</p><p>2.key的值应该和谁进行绑定呢?</p><p>对于上面的这两个问题</p><p>我这里先给出结论.</p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h3 id="绑定v-for的key是不是意味着效率高？！！"><a href="#绑定v-for的key是不是意味着效率高？！！" class="headerlink" title="绑定v-for的key是不是意味着效率高？！！"></a>绑定v-for的key是不是意味着效率高？！！</h3><p>​    1.如果是给数组中间或其他类型中间插入或者修改一个元素，key值为唯一标识的确效率高些。</p><p>​    2.其他情况下绑定key的效率未必会高</p><p>​        <code>v-for</code>默认使用<strong>就地复用策略</strong>，列表数据修改的时候，他会根据key值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素,如果不绑定key的话,每次修改某一条数据,都会重新渲染所有数据,会导致大量内存的浪费。如果绑定了key，每次修改某一条数据的时候，就只会重新渲染改条数据的变化，节省了大量的内存。</p><p>​        这也很好解释了为什么Vue源码怎么不直接设置<code>key=Date.now()</code>,即默认唯一标识,因为并不是所有情况下都需要将key绑定为唯一标识.</p><h3 id="那么如何设置v-for的key的值"><a href="#那么如何设置v-for的key的值" class="headerlink" title="那么如何设置v-for的key的值"></a>那么如何设置v-for的key的值</h3><ol><li><p>如果已渲染的列表元素下标不会变化，key值设置为index即可</p></li><li><p>如果已渲染的列表元素下标会变化，key值请设置为唯一标识,例如id</p></li></ol><h5 id="参考文章链接"><a href="#参考文章链接" class="headerlink" title="参考文章链接:"></a>参考文章链接:</h5><p>​                    [Vue v-for的key值如何设置？](<a href="https://www.cnblogs.com/kaicy/p/15079045.html">Vue v-for的key值如何设置？ - Kaicy - 博客园 (cnblogs.com)</a>)</p><p>​                    [Vue中v-for时为什么要绑定key?](<a href="https://juejin.cn/post/6997792097084375054">Vue中v-for时为什么要绑定key？ - 掘金 (juejin.cn)</a>)</p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:vue2和vue3的v-if与v-for优先级对比学习</title>
    <link href="/2022/08/10/vue2%E5%92%8Cvue3%E7%9A%84v-if%E4%B8%8Ev-for%E4%BC%98%E5%85%88%E7%BA%A7%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/08/10/vue2%E5%92%8Cvue3%E7%9A%84v-if%E4%B8%8Ev-for%E4%BC%98%E5%85%88%E7%BA%A7%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="vue2和vue3的v-if与v-for优先级对比学习"><a href="#vue2和vue3的v-if与v-for优先级对比学习" class="headerlink" title="vue2和vue3的v-if与v-for优先级对比学习"></a>vue2和vue3的v-if与v-for优先级对比学习</h1><h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p>v-if和v-for是Vue中最常用的几个指令,[Vue官方文档](<a href="https://v3.cn.vuejs.org/guide/list.html#v-for-%E4%B8%8E-v-if-%E4%B8%80%E5%90%8C%E4%BD%BF%E7%94%A8">列表渲染 | Vue.js (vuejs.org)</a>)的有提到不建议将这两个指令写在同一个标签内.</p><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><p>既然如此,想必我们就不得不讨论一下它们哥俩的工作方式,尤其是优先级.</p><p>为此,我们先假定一个案例</p><p>假设我们想要实现一个极简的 todoList 效果</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220805113527161.png" alt="image-20220805113527161" style="zoom: 50%;" /><p>首先我们的有一个list</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> todoList = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">task</span>: <span class="hljs-string">&#x27;吃饭&#x27;</span>,<br>    <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">task</span>: <span class="hljs-string">&#x27;睡觉&#x27;</span>,<br>    <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">task</span>: <span class="hljs-string">&#x27;洗澡&#x27;</span>,<br>    <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-comment">// ...,</span><br>];<br></code></pre></td></tr></table></figure><h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><p>果然,对于他们两的优先级问题,官方也曾纠结过,</p><p>在Vue2.X版本中,v-for的优先级高于v-if,但在Vue3.x的版本中v-if的优先级高于v-for</p><p>在 vue2 中，<code>v-for</code> 优先级高于 <code>v-if</code>，我们可以这样实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- vue2中，v-for优先级高于v-if --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in todoList&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!item.done&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;todo: !item.done&#125;&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.task&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in todoList&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;item.done&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;finished: item.done&#125;&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.task&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 vue3 中，由于 <code>v-if</code> 优先级要高于 <code>v-for</code>，所以不能像 vue2 那样将 <code>v-for</code> 和 <code>v-if</code> 放在同一个元素上，我们在 <code>li</code> 外面套一层用来执行 for 循环：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!item.done&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;todo: !item.done&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.task&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;item.done&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;finished: item.done&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.task&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>复制代码<br></code></pre></td></tr></table></figure><p>可以看出，如果在 vue2.x 中 <code>v-if</code> 和 <code>v-for</code> 在同一个元素上使用是无法直接在 vue3.x 中兼容的。</p><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><p>针对 <code>v-if</code> 和 <code>v-for</code> 的使用，其实官方是建议我们使用计算属性来处理的，这样既提高了性能，又可以兼容到 vue3.x，</p><p>但是我目前还没有学到计算属性,改日再来看</p><p>接下来我们看看计算属性实现方式：</p><p>模板部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--  最佳实践  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in todos&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.task&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;showFinished&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in finished&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;finished&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.task&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    show finished？<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;showFinished&quot;</span> /&gt;</span><br>    &#123;&#123;showFinished ? &#x27;yes&#x27; : &#x27;no&#x27;&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>复制代码<br></code></pre></td></tr></table></figure><p>js 部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue3.x</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Todo List&#x27;</span>,<br>      <span class="hljs-attr">showFinished</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">list</span>: todoList,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">finished</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> todoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> t.<span class="hljs-property">done</span>);<br>    &#125;,<br>    <span class="hljs-title function_">todos</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> todoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> !t.<span class="hljs-property">done</span>);<br>    &#125;,<br>  &#125;,<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br><span class="hljs-comment">// vue2.x</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Todo List&#x27;</span>,<br>      <span class="hljs-attr">showFinished</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">list</span>: todoList,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">finished</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> todoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> t.<span class="hljs-property">done</span>);<br>    &#125;,<br>    <span class="hljs-title function_">todos</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> todoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> !t.<span class="hljs-property">done</span>);<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>vue2.x 中<code>v-for</code>优先级高于<code>v-if</code>，vue3.x 相反；</li><li>尽量避免在同一个元素上面同时使用<code>v-if</code>和<code>v-for</code>，建议使用计算属性替代。</li></ol><p>参考文章链接：<a href="https://juejin.cn/post/6881581395068747790">https://juejin.cn/post/6881581395068747790</a></p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记(2)</title>
    <link href="/2022/08/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <url>/2022/08/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue学习笔记-2"><a href="#Vue学习笔记-2" class="headerlink" title="Vue学习笔记(2)"></a>Vue学习笔记(2)</h1><p><a href="https://v3.cn.vuejs.org/guide/introduction.html">参考文档:Vue官方文档教程</a></p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>我们可以使用 <code>v-on</code> 指令 (通常缩写为 <code>@</code> 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScript。用法为 <code>v-on:click=&quot;methodName&quot;</code> 或使用快捷方式 <code>@click=&quot;methodName&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-event&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#basic-event&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h3><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;event-with-method&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;greet&quot;</span>&gt;</span>Greet<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Vue.js&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">greet</span>(<span class="hljs-params">event</span>) &#123;<br>      <span class="hljs-comment">// `methods` 内部的 `this` 指向当前活动实例</span><br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;!&#x27;</span>)<br>      <span class="hljs-comment">// `event` 是原生 DOM event</span><br>      <span class="hljs-keyword">if</span> (event) &#123;<br>        <span class="hljs-title function_">alert</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#event-with-method&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h3><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inline-handler&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params">message</span>) &#123;<br>      <span class="hljs-title function_">alert</span>(message)<br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#inline-handler&#x27;</span>)<br></code></pre></td></tr></table></figure><p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;button @click=&quot;add(1,2,$event)&quot;&gt;Add1&lt;/button&gt;</span><br><span class="hljs-comment">  Submit</span><br><span class="hljs-comment">&lt;/button&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">warn</span>(<span class="hljs-params">message, event</span>) &#123;<br>    <span class="hljs-comment">// 现在可以访问到原生事件</span><br>    <span class="hljs-keyword">if</span> (event) &#123;<br>      event.<span class="hljs-title function_">preventDefault</span>()<br>    &#125;<br>    <span class="hljs-title function_">alert</span>(message)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多事件处理器"><a href="#多事件处理器" class="headerlink" title="多事件处理器"></a>多事件处理器</h3><blockquote><p>不建议使用,你为啥要把它分成两个方法,最后又由一个事件调用,不如要么写成一个方法,要么交由两个事件调用</p></blockquote><p>事件处理程序中可以有多个方法，这些方法由逗号运算符分隔：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这两个 one() 和 two() 将执行按钮点击事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;one($event), two($event)&quot;</span>&gt;</span><br>  Submit<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">one</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-comment">// 第一个事件处理器逻辑...</span><br>  &#125;,<br>  <span class="hljs-title function_">two</span>(<span class="hljs-params">event</span>) &#123;<br>   <span class="hljs-comment">// 第二个事件处理器逻辑...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><h3 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a><code>.exact</code> 修饰符</h3><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.ctrl</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.ctrl.exact</span>=<span class="hljs-string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.exact</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h3><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p><p>在监听键盘事件时，我们经常需要检查特定的按键。Vue 允许为 <code>v-on</code> 或者 <code>@</code> 在监听键盘事件时添加按键修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>你可以直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.page-down</span>=<span class="hljs-string">&quot;onPageDown&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在上述示例中，处理函数只会在 <code>$event.key</code> 等于 <code>&#39;PageDown&#39;</code> 时被调用。</p><h3 id="按键别名"><a href="#按键别名" class="headerlink" title="#按键别名"></a><a href="https://v3.cn.vuejs.org/guide/events.html#%E6%8C%89%E9%94%AE%E5%88%AB%E5%90%8D">#</a>按键别名</h3><p>Vue 为最常用的键提供了别名：</p><ul><li><p><code>.enter</code></p></li><li><p><code>.tab</code></p></li><li><p><code>.delete</code> (捕获“删除”和“退格”键)</p></li><li><p><code>.esc</code></p></li><li><p><code>.space</code></p></li><li><p><code>.up</code></p></li><li><p><code>.down</code></p></li><li><p><code>.left</code></p></li><li><p><code>.right</code></p></li></ul><h3 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h3><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.middle</span>=<span class="hljs-string">&quot;add(1,2,$event)&quot;</span>&gt;</span>Add 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add(2,5,$event)&quot;</span>&gt;</span>Add 2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.enter.exact</span>=<span class="hljs-string">&quot;submit&quot;</span> @<span class="hljs-attr">keyup.alt.enter</span>=<span class="hljs-string">&quot;clear&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;inputVal&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--双向绑定,下一章具体介绍--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;inputVal&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--双向绑定,下一章具体介绍--&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">counter</span>:<span class="hljs-number">1</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">inputVal</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">//&lt;!--双向绑定,下一章具体介绍--&gt;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">add</span>(<span class="hljs-params">val,val2,event</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span> += val * val2 ;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">submit</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;onsubmit&quot;</span>);</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputVal</span> = <span class="hljs-string">&quot;&quot;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>你可以用 v-model 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件来更新数据，并在某种极端场景下进行一些特殊处理。</p><blockquote><p><strong><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值。它将始终将当前活动实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</strong></p></blockquote><p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p><ul><li><p>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</p></li><li><p>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</p></li><li><p>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</p></li></ul><h3 id="文本-Text"><a href="#文本-Text" class="headerlink" title="文本 (Text)"></a>文本 (Text)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-model-basic&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;edit me&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#v-model-basic&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多行文本-Textarea"><a href="#多行文本-Textarea" class="headerlink" title="多行文本 (Textarea)"></a>多行文本 (Textarea)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-model-textarea&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Multiline message is:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre-line;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;add multiple lines&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#v-model-textarea&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>插值在 textarea 中不起作用，请使用 <code>v-model</code> 来代替。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- bad --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- good --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="复选框-Checkbox"><a href="#复选框-Checkbox" class="headerlink" title="复选框 (Checkbox)"></a>复选框 (Checkbox)</h3><p>单个复选框，绑定到布尔值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-model-checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#v-model-checkbox&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多个复选框，绑定到同一个数组：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-model-multiple-checkboxes&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jack&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jack&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;jack&quot;</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;john&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;john&quot;</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mike&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mike&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;mike&quot;</span>&gt;</span>Mike<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">checkedNames</span>: []<br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#v-model-multiple-checkboxes&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是 attribute，所以我们可以用 <code>v-bind</code> 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p><h3 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h3><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><p>我们可以传给 <code>:class</code> (<code>v-bind:class</code> 的简写) 一个对象，以动态地切换 class：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的语法表示 <code>active</code> 这个 class 存在与否将取决于 data property <code>isActive</code> 的 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">truthiness</a>。</p><p>你可以在对象中传入更多字段来动态切换多个 class。此外，<code>:class</code> 指令也可以与普通的 <code>class</code> attribute 共存。当有如下模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>和如下 data：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>渲染的结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当 <code>isActive</code> 或者 <code>hasError</code> 变化时，class 列表将相应地更新。例如，如果 <code>hasError</code> 的值为 <code>true</code>，class 列表将变为 <code>&quot;static active text-danger&quot;</code>。</p><p>绑定的数据对象不必内联定义在模板里：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">classObject</span>: &#123;<br>      <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>渲染的结果和上面一样。我们也可以在这里绑定一个返回对象的<a href="https://v3.cn.vuejs.org/guide/computed.html">计算属性</a>。这是一个常用且强大的模式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">error</span>: <span class="hljs-literal">null</span><br>  &#125;<br>&#125;,<br><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-title function_">classObject</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">active</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">isActive</span> &amp;&amp; !<span class="hljs-variable language_">this</span>.<span class="hljs-property">error</span>,<br>      <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">error</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">error</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;fatal&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p>我们可以把一个数组传给 <code>:class</code>，以应用一个 class 列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">activeClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,<br>    <span class="hljs-attr">errorClass</span>: <span class="hljs-string">&#x27;text-danger&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>渲染结果为:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active text-danger&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你想根据条件切换列表中的 class，可以使用三元表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样写将始终添加 <code>errorClass</code>，但是只有在 <code>isActive</code> 为 truthy[<a href="https://v3.cn.vuejs.org/guide/class-and-style.html#footnote-1">1]</a> 时才添加 <code>activeClass</code>。</p><p>不过，当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h3><p><code>:style</code> 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">activeColor</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-number">30</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接绑定到一个样式对象通常更好，这会让模板更清晰：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">styleObject</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>      <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;13px&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的，对象语法常常结合返回对象的计算属性使用。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每周一炼:二分查找区间确定</title>
    <link href="/2022/08/06/%E6%AF%8F%E5%91%A8%E4%B8%80%E7%82%BC(%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE)/"/>
    <url>/2022/08/06/%E6%AF%8F%E5%91%A8%E4%B8%80%E7%82%BC(%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE)/</url>
    
    <content type="html"><![CDATA[<h1 id="每周一炼-二分法"><a href="#每周一炼-二分法" class="headerlink" title="每周一炼:二分法"></a>每周一炼:二分法</h1><h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">参考文章:代码随想录 (programmercarl.com)一个非常不错的网站,强烈推荐</a></p><p>二分查找是入门算法是最先接触,也是最为基础的算法,即使是这样,曾经的我看到二分查询一看就会一些就废,如果你也曾和我一样有过这种经历,或许可以再来复习一下二分查找.</p><p>首先我们要明确的是什么情况下我们应该使用二分查找算法,而什么情况下可以排除使用二分查找算法.,二分查找算法的的应用前提.</p><h3 id="应用前提条件如下"><a href="#应用前提条件如下" class="headerlink" title="应用前提条件如下:"></a>应用前提条件如下:</h3><p>1.我们一般会在有序数组中查找元素时使用二分法</p><p>2.无重复元素,因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的，这些都是使用二分法的前提条件</p><h3 id="二分法要点"><a href="#二分法要点" class="headerlink" title="二分法要点"></a>二分法要点</h3><p>有的时候,我们会搞不懂一些边缘代码到底是 <code>while(left &lt; right)</code> 还是 <code>while(left &lt;= right)</code>，或者是<code>right = middle</code>呢，还是要<code>right = middle - 1</code></p><p>大家写二分法经常写乱，主要是因为<strong>对区间的定义没有想清楚，区间的定义就是不变量</strong>。要在二分查找的过程中，保持不变量，就是在while寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是<strong>循环不变量</strong>规则。</p><p>写二分法，区间的定义一般为两种，左闭右闭即[left, right]，或者左闭右开即[left, right)。</p><p>简单来说,我们要坚持自己的区间,如果时左闭右闭即[left, right],那么从头到尾到要是左闭右闭即[left, right],而且不可以生成违法区间</p><p>[1,1]这是合法区间,值可以取1所以[left,right]当right&#x3D;left时也是合法区间,可以使用</p><p>[1,1)这是非法区间,既要大于1又要小于1,非法区间,所以[left,right]当right&#x3D;left时是非法区间,不可以使用</p><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><p>接下来写几题简单题练习一下</p><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h3><p>给定一个 n 个元素有序(-&gt;有序想到二分法)的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><figure class="highlight makefile"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="hljs-section">输出: 4</span><br><span class="hljs-section">解释: 9 出现在 nums 中并且下标为 4</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="hljs-section">输出: -1</span><br><span class="hljs-section">解释: 2 不存在 nums 中因此返回 -1</span><br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>你可以假设 nums 中的所有元素是不重复的。&#x2F;&#x2F;不重复-&gt;二分法</li><li>n 将在 [1, 10000]之间。</li><li>nums 的每个元素都将在 [-9999, 9999]之间。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;  <br>            middle = (right+left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[middle] &gt; target) right = middle-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle]&lt; target) left = middle+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> middle;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">示例 1</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">输入</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nums = [1,3,5,6], target = 5</span><br><span class="hljs-attribute">输出</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">示例 2</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">输入</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nums = [1,3,5,6], target = 2</span><br><span class="hljs-attribute">输出</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">示例 3</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">输入</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nums = [1,3,5,6], target = 7</span><br><span class="hljs-attribute">输出</span><span class="hljs-punctuation">:</span> <span class="hljs-string">4</span><br></code></pre></td></tr></table></figure><p>提示:</p><ul><li>nums 为 无重复元素 的 升序 排列数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,right = nums.length-<span class="hljs-number">1</span>,middle = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            middle = (left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[middle] &gt; target) right = middle-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[middle] &lt; target) left = middle+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> middle;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<span class="hljs-comment">//此时right=left-1,left反而大一</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一题和上一题区别就在于如果没搜索到要返回插入位置</p><h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">示例 1：<br><br>输入：nums = <span class="hljs-comment">[5,7,7,8,8,10]</span>, target = 8<br>输出：<span class="hljs-comment">[3,4]</span><br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">示例 2：<br><br>输入：nums = <span class="hljs-comment">[5,7,7,8,8,10]</span>, target = 6<br>输出：<span class="hljs-comment">[-1,-1]</span><br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">示例 3：<br><br>输入：nums = <span class="hljs-comment">[]</span>, target = 0<br>输出：<span class="hljs-comment">[-1,-1]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] searchRange(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>,middle=-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> [] res =&#123;flag,middle&#125;;<br>        <span class="hljs-keyword">if</span>(nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,right = nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            middle = (left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[middle] &gt; target) right = middle-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[middle] &lt; target) left = middle+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                flag = middle;<br>                <span class="hljs-keyword">while</span>(middle-<span class="hljs-number">1</span> &gt;=<span class="hljs-number">0</span>&amp;&amp;nums[middle-<span class="hljs-number">1</span>]==nums[middle])<br>                middle--;<br><br>                <span class="hljs-keyword">while</span>(flag+<span class="hljs-number">1</span>&lt;=nums.length-<span class="hljs-number">1</span>&amp;&amp;nums[flag+<span class="hljs-number">1</span>]==nums[flag])<br>                flag++;<br>                res[<span class="hljs-number">0</span>] = middle;<br>                res[<span class="hljs-number">1</span>] = flag;<br>            <span class="hljs-keyword">return</span> res;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根 "></a><a href="https://leetcode.cn/problems/sqrtx/">69. x 的平方根 </a></h3><p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。</p><p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p><p>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">示例 <span class="hljs-number">1</span>：<br><br>输入：x <span class="hljs-operator">=</span> <span class="hljs-number">4</span><br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">示例 <span class="hljs-number">2</span>：<br><br>输入：x = <span class="hljs-number">8</span><br>输出：<span class="hljs-number">2</span><br>解释：<span class="hljs-number">8</span> 的算术平方根是 <span class="hljs-number">2.82842</span>..., 由于返回类型是整数，小数部分将被舍去。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>,right = x/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,middle=<span class="hljs-number">0</span>;<br><br>     <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>         middle = (left+right)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span>)middle*middle&lt;x)  left = middle+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span>)middle*middle&gt;x) right = middle-<span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> middle;<br>     &#125; <br>     <span class="hljs-keyword">return</span> right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>贴一个别人的解法,原理一样,细节处处理的比我好很多</p><p>二分查找，用x&#x2F;m&lt;m而不是m*m&gt;x防止溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <br>    &#123;<br>        <span class="hljs-keyword">if</span>(x == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//先考虑base情况</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> x;<br>        <span class="hljs-keyword">while</span>(max-min&gt;<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (max - min) / <span class="hljs-number">2</span> + min;<span class="hljs-comment">//防止溢出,先减后加占用空间更少</span><br>            <span class="hljs-keyword">if</span>(x/m&lt;m)<span class="hljs-comment">//防止溢出</span><br>                max = m;<br>            <span class="hljs-keyword">else</span><br>                min = m;<br>        &#125;<br>        <span class="hljs-keyword">return</span> min;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367. 有效的完全平方数"></a><a href="https://leetcode.cn/problems/valid-perfect-square/">367. 有效的完全平方数</a></h3><p>给定一个 正整数 num ，编写一个函数，如果 num 是一个完全平方数，则返回 true ，否则返回 false 。</p><p>进阶：不要 使用任何内置的库函数，如  sqrt 。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">示例 <span class="hljs-number">1</span>：<br><br>输入：<span class="hljs-built_in">num</span> = <span class="hljs-number">16</span><br>输出：<span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">示例 <span class="hljs-number">2</span>：<br><br>输入：<span class="hljs-built_in">num</span> = <span class="hljs-number">14</span><br>输出：<span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num &lt;= 2^31 - 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPerfectSquare</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">1</span>,right=num/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,middle=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            middle=(left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span>)middle*middle&gt;num) right = middle-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span>)middle*middle&lt;num) left = middle+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><p>上面我都习惯性采用左闭右闭的区间写法,当然也可以采用左闭右闭开的写法</p><p>不过要注意在这种情况下,一些判断条件的边界值就可能会有所改变</p><p>在这里贴一下第一题(704.二分查找)这类最基本的题型的左闭右开写法</p><h3 id="二分法第二种写法"><a href="#二分法第二种写法" class="headerlink" title="二分法第二种写法"></a>二分法第二种写法</h3><p>如果说定义 target 是在一个在左闭右开的区间里，也就是[left, right) ，那么二分法的边界处理方式则截然不同。</p><p>有如下两点：</p><ul><li>while (left &lt; right)，这里使用 &lt; ,因为left &#x3D;&#x3D; right在区间,此时**[left, right)**是没有意义的</li><li>if (nums[middle] &gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//左闭右开写法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length;<span class="hljs-comment">//小于nums.length等价于小于等于nums.length-1</span><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<span class="hljs-comment">//这里使用 &lt; ,因为left == right在区间,此时**[left, right)**是没有意义的</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[mid] == target)<br>                <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>                left = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>                right = mid;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="合"><a href="#合" class="headerlink" title="合"></a>合</h2><p>对于二分法都是<strong>一看就会，一写就废</strong></p><p>其实主要就是对区间的定义没有理解清楚，在循环中没有始终坚持根据查找区间的定义来做边界处理。</p><p>区间的定义就是不变量，那么在循环中坚持根据查找区间的定义来做边界处理，就是循环不变量规则。</p><p>本篇根据两种常见的区间定义，给出了两种二分法的写法，每一个边界为什么这么处理，都根据区间的定义做了详细介绍。</p>]]></content>
    
    
    <categories>
      
      <category>每周一炼</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分查找</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记(1)</title>
    <link href="/2022/08/04/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <url>/2022/08/04/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue学习笔记-1"><a href="#Vue学习笔记-1" class="headerlink" title="Vue学习笔记(1)"></a>Vue学习笔记(1)</h1><p><a href="https://v3.cn.vuejs.org/guide/introduction.html">参考文档:Vue官方文档教程</a></p><h2 id="1-Vue是什么"><a href="#1-Vue是什么" class="headerlink" title="1.Vue是什么?"></a>1.Vue是什么?</h2><p>渐进式框架</p><p>便于上手</p><h2 id="2-VUE安装与使用-第一个项目"><a href="#2-VUE安装与使用-第一个项目" class="headerlink" title="2.VUE安装与使用-第一个项目"></a>2.VUE安装与使用-第一个项目</h2><p>Vue.js 设计的初衷就包括可以被渐进式地采用。这意味着它可以根据需求以多种方式集成到一个项目中。</p><p>将 Vue.js 添加到项目中主要有四种方式：</p><ol><li><p>在页面上以 CDN 包的形式导入。</p></li><li><p>下载 JavaScript 文件并自行托管。</p></li><li><p>使用 npm]安装它。</p></li><li><p>使用官方的 CLI来构建一个项目，它为现代前端工作流程提供了功能齐备的构建设置 (例如，热重载、保存时的提示等等)。</p></li></ol><p>作为初学者,我想尝试用最简单的方法,也就是第一种方法</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello-vue&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  &#123;&#123; message &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处的id = &quot;hello-vue&quot; 目前看是要被第四个代码块的.mount(&#x27;#hello-vue&#x27;)关联, class =&quot;demo&quot;被第三个代码块相关联--&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.demo</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: sans-serif;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1em</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>;<br>  user-select: none;<br>  <span class="hljs-attribute">overflow-x</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HelloVueApp</span> = &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!!&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">HelloVueApp</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#hello-vue&#x27;</span>) <span class="hljs-comment">//creatApp(HelloVueApp)似乎和const HelloVueApp相关联</span><br></code></pre></td></tr></table></figure><p>由上面可知,Vue中的内容最终会被渲染到<div></div>容器内</p><h2 id="3-模板语法"><a href="#3-模板语法" class="headerlink" title="3.模板语法"></a>3.模板语法</h2><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层组件实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。</p><p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应性系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><p>数据绑定最常见的形式就是使用“Mustache” (双大括号) 语法的文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Mustache 标签将会被替代为对应组件实例中 <code>msg</code> property 的值。无论何时，绑定的组件实例上 <code>msg</code> property 发生了改变，插值处的内容都会更新。</p><h4 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h4><p>双大括号会将数据解释为普通文本，而非 HTML 代码。如果你想要使得你的文本里的html标签被渲染成正确的html格式,你需要使用<a href="https://v3.cn.vuejs.org/api/directives.html#v-html"><code>v-html</code> 指令</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">RenderHtmlApp</span> = &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">rawHtml</span>: <span class="hljs-string">&#x27;&lt;span style=&quot;color: red&quot;&gt;This should be red.&lt;/span&gt;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">RenderHtmlApp</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#example1&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208031032961.png" alt="image-20220801092421340"></p><p>上面我们了解到了如何渲染属性Attribute外面的内容,即渲染的内容都在两个<p>标签或<div>标签之间的内容,下面我们将要了解如何渲染属性</p><blockquote><p>之前,我们使用的是插值的方法绑定数据,下面我们将了解如何使用v-bind:来绑定属性,v-bind有以下特点</p><ul><li><p>和之前渲染两个标签之间的内容不同,例如<p></p>,它可以写在&lt;&gt;内部</p></li><li><p>它用于绑定数据或者元素属性,例如：绑定<code>&lt;a&gt;</code>标签的<code>href</code>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>不光是<code>href</code>属性可以被<code>v-bind</code>指令绑定，任何属性都可以被绑定例如，绑定<code>src</code>属性、<code>class</code>属性</p></li></ul></blockquote><p>Mustache(大括号) 语法不能在 HTML attribute 中使用，然而，可以使用 <a href="https://v3.cn.vuejs.org/api/directives.html#v-bind"><code>v-bind</code> 指令</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!--由此可以看到v-bind:之间应用到&lt;div 内部&gt;,而非是两个&lt;div&gt;之间--&gt;</span><br></code></pre></td></tr></table></figure><p>如果绑定的值是 <code>null</code> 或 <code>undefined</code>，那么该 attribute 将不会被包含在渲染的元素上。</p><p>对于布尔 attribute (它们只要存在就意味着值为 <code>true</code>)，<code>v-bind</code> 工作起来略有不同，在这个例子中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind:disabled</span>=<span class="hljs-string">&quot;isButtonDisabled&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果 <code>isButtonDisabled</code> 的值是 truthy，那么 <code>disabled</code> attribute 将被包含在内。如果该值是一个空字符串，它也会被包括在内，与 <code>&lt;button disabled=&quot;&quot;&gt;</code> 保持一致。对于其他 falsy[<a href="https://v3.cn.vuejs.org/guide/template-syntax.html#footnote-2">2]</a> 的值，该 attribute 将被省略。</p><p>Html属性里面渲染,不需要加Mustache (双大括号),而应该使用v-bind:,并且v-bind:可以简写成  <strong>:</strong>  ,对没错,一个  <strong>:</strong>  就可以了.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;href01&quot;</span>&gt;</span>超链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;href02&quot;</span>&gt;</span>超链接2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!--如果我们想要让这个写死的链接变成动态链接,我们就可以使用v-bind: ,或者直接写:  --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">  const App = &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">      data() &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">              href01:&quot;http://www.baidu.com&quot;,</span></span><br><span class="language-xml"><span class="language-handlebars">              href02:&quot;http://qq.com&quot;  <span class="hljs-comment">&lt;!--最后一个不用加逗号--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">          &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">      &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">  Vue.createApp(App).mount(&#x27;#app&#x27;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 JavaScript 表达式</p><p>迄今为止，在我们的模板中，我们一直都只绑定简单的 property 键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123; number + 1 &#125;&#125;<br><br>&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<br><br>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!-- 属性里也是可以使用表达式,例如这里用来字符串拼接表达式--&gt;</span><br></code></pre></td></tr></table></figure><p>这些表达式会在当前活动实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--  这是语句，不是表达式：--&gt;</span><br>&#123;&#123; var a = 1 &#125;&#125;<br><br><span class="hljs-comment">&lt;!-- 流程控制也不会生效，请使用三元表达式 --&gt;</span><br>&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;<br></code></pre></td></tr></table></figure><p>动态参数</p><p>也可以在指令参数中使用 JavaScript 表达式，方法是用方括号括起来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">attributeName</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-comment">&lt;!--这里有个坑,attributename应该全部小写才可以--&gt;</span><br></code></pre></td></tr></table></figure><p>这里的 <code>attributeName</code> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的组件实例有一个 data property <code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定将等价于 <code>v-bind:href</code>。</p><blockquote><p>动态参数这边之前一直没搞懂什么意思,现在简单说一下</p><p>正如上面提到当我们要v-bind:href&#x3D;”url”时,我们也许会遇到个问题就是我们还没确定url这个值赋给了哪一个属性,也许赋给了href01或href02,那我们可以将href暂时用[href]或者<a href="%E9%9A%8F%E4%BE%BF%E6%80%8E%E4%B9%88%E5%91%BD%E5%90%8D,%E4%BD%86%E6%9C%80%E5%A5%BD%E6%9C%89%E5%85%B3%E8%81%94,%E5%B9%B6%E4%B8%94%E4%BC%BC%E4%B9%8E%5B%E4%B8%AD%E6%8B%AC%E5%8F%B7%5D%E9%87%8C%E9%9D%A2%E4%B8%8D%E6%94%AF%E6%8C%81%E5%A4%A7%E5%86%99">[attributename]</a>代替,在const xxx  data() return中我们需要定义[href]的值告诉程序[href]指向哪一个属性,程序才会调用对应属性的值</p><p>再多说一句,其实动态参数不仅可以绑定属性,也是可以绑定方法的,当你的’on-click&#x3D;’后面不确定调用的方法,也可以用中括号括起来,在后面的const xxx  data() return中再来具体复制,使之调用对应的方法</p></blockquote><p><strong>这下我们了解到无论是属性名还是属性值,都可以动态的引用下面 const xxx  data() return中定义的值</strong></p><p>综合应用过程,直接把动态参数的应用写到里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;href01&quot;</span>&gt;</span>超链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        &#123;&#123; number + 1 &#125;&#125; <br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        &#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">attributename</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>翠花<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!--靓仔看这应该明白了吧--&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">attributename</span>:<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-comment">//靓仔看这应该明白了吧</span></span><br><span class="language-javascript">                    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://baidu.com&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">number</span>:<span class="hljs-number">5</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">ok</span>:<span class="hljs-literal">false</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;hello &lt;span style=&#x27;color:red&#x27;&gt;vue&lt;/span&gt; !!&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">href01</span>:<span class="hljs-string">&quot;http://qq.com&quot;</span>,</span><br><span class="language-javascript">                    </span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208031121594.png" alt="上面代码效果"></p><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p><code>v-</code> 前缀作为一种视觉提示，用来识别模板中 Vue 特定的 attribute。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，v- 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的单页面应用程序 <a href="https://en.wikipedia.org/wiki/Single-page_application">(SPA - single page application)</a> 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写：</p><h4 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a><code>v-bind</code> 缩写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态参数的缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a><code>v-on</code> 缩写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态参数的缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @[<span class="hljs-attr">event</span>]=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>它们看起来可能与普通的 HTML 略有不同，但 <code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。</p><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><strong><code>v-if</code></strong></h3><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以用 <code>v-else</code> 添加一个“else 块”：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>Oh no 😢<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 在 <code>&lt;template&gt;</code> 元素上使用 <code>v-if</code> 条件渲染分组</p><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--template会丢掉--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!--这里的几个标签还是会有的,没得只是具体使用v-if的那一行的template标签--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>简单来说,在<code>&lt;h1&gt;</code>上或者<code>&lt;p&gt;</code>标签上使用<code>v-if</code>渲染后会留下<code>&lt;h1&gt;</code>或者<code>&lt;p&gt;</code>这类标签,而在<code>&lt;template&gt;</code>使用则不会,另外,<code>&lt;template&gt;</code>是Vue里的标签,而不是html的</strong></p><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a><code>v-else</code></h3><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的“else 块”：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span><br>  Now you see me<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>  Now you don&#x27;t<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a><code>v-else-if</code></h3><p><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，并且可以连续使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span><br>  A<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span><br>  B<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span><br>  C<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>  Not A/B/C<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>与 <code>v-else</code> 的用法类似，<code>v-else-if</code> 也必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后。</strong></p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h3><p>另一个用于条件性展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-comment">&lt;!--记得要在下面定义ok的值类型为true或false--&gt;</span><br></code></pre></td></tr></table></figure><p>不同的是带有 <code>v-show</code> 的元素<strong>始终会被渲染并保留在 DOM 中</strong>。<code>v-show</code> 只是简单地切换元素的 <code>display</code> CSS property。</p><p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a><code>v-if</code> vs <code>v-show</code></h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><blockquote><p><strong>简单来说,v-if 如果判断为false,浏览器F12查看不到使用v-if的标签,而使用v-show的会被F12看到,只是display属性被设置为none,就是隐藏起来了.</strong></p></blockquote><p>综合应用过程,查看v-show与v-if区别</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27; &quot;</span>&gt;</span>Vue is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>Oh no 😢<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;C&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">ok</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208042204736.png" alt="综合应用v-if与v-show区别"></p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="在-v-for-里使用值的范围"><a href="#在-v-for-里使用值的范围" class="headerlink" title="在 v-for 里使用值的范围"></a>在 <code>v-for</code> 里使用值的范围</h3><p><code>v-for</code> 也可以接受整数。在这种情况下，它会把模板重复对应次数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in 10&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-comment">&lt;!--n默认初始值为1,最后渲染出一行12345678910--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="用-v-for-把一个数组映射为一组元素"><a href="#用-v-for-把一个数组映射为一组元素" class="headerlink" title="用 v-for 把一个数组映射为一组元素"></a>用 <code>v-for</code> 把一个数组映射为一组元素</h3><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 items 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;it in items&quot;</span>&gt;</span><br>        &#123;&#123;items.message&#125;&#125;<span class="hljs-comment">&lt;!--如果这里直接写&#123;&#123;item&#125;&#125;,输出内容将会是带括号的对象,例如&#123;1,&quot;Monday&quot;&#125;,&#123;2,&quot;Tuesday&quot;&#125;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">items</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Monday&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Tuesday&quot;</span>&#125;]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;array-with-index&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span>&gt;</span><br>    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">parentMessage</span>: <span class="hljs-string">&#x27;Parent&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">items</span>: [&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Bar&#x27;</span> &#125;]</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#array-with-index&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208042204633.png" alt="image-20220801122816844"></p><p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item of items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--简而言之,就是没区别,但我看到有人的博客里写建议数组用of,对象用in,比较好分辨你这个for用在什么上</span><br></code></pre></td></tr></table></figure><h3 id="在-v-for-里使用对象"><a href="#在-v-for-里使用对象" class="headerlink" title="在 v-for 里使用对象"></a>在 <code>v-for</code> 里使用对象</h3><p>你也可以用 <code>v-for</code> 来遍历一个对象的 property。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-for-object&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;value in myObject&quot;</span>&gt;</span><br>    &#123;&#123; value &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">myObject</span>: &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;How to do lists in Vue&#x27;</span>,<br>        <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;Jane Doe&#x27;</span>,<br>        <span class="hljs-attr">publishedAt</span>: <span class="hljs-string">&#x27;2016-04-10&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#v-for-object&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208042204895.png" alt="image-20220801140514588"></p><p>你也可以提供第二个的参数为 property 名称 (也就是键名 key)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name) in myObject&quot;</span>&gt;</span><br>  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208042204986.png" alt="image-20220801140536902"></p><p>还可以用第三个参数作为索引：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name, index) in myObject&quot;</span>&gt;</span><br>  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208042204952.png" alt="image-20220801140600837"></p><blockquote><p><strong>在遍历对象时，会按 <code>Object.keys()</code> 的结果遍历，但是不能保证它在不同 JavaScript 引擎下的结果都一致。</strong></p></blockquote><h3 id="维护状态"><a href="#维护状态" class="headerlink" title="维护状态"></a>维护状态</h3><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p><p>这个默认的模式是高效的，但是<strong>只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</strong>。</p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一的 <code>key</code> attribute：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://v3.cn.vuejs.org/style-guide/#keyed-v-for-essential">建议</a>尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p><p>因为它是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联。后面我们将在指南中看到，它还具有其它用途。</p><blockquote><p><strong>提示</strong></p><p><strong>不要使用对象或数组之类的非基本类型值作为 <code>v-for</code> 的 key。请用字符串或数值类型的值。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in 10&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in items&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;item.id&#125;&#125;,&#123;&#123;item.message&#125;&#125; ==== &#123;&#123;parentMessage&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name, index) in myObject&quot;</span>&gt;</span><br>            &#123;&#123;index&#125;&#125; - &#123;&#123;name&#125;&#125; : &#123;&#123;value&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name, index) in myObject&quot;</span>&gt;</span><br>            &#123;&#123;index&#125;&#125; - &#123;&#123;name&#125;&#125; : &#123;&#123;value&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">parentMessage</span>: <span class="hljs-string">&#x27;Parent&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">items</span>: [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Bar&#x27;</span> &#125;],</span><br><span class="language-javascript">                    <span class="hljs-attr">myObject</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;Jane Doe&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">publishedAt</span>: <span class="hljs-string">&#x27;2016-04-10&#x27;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208042204313.png" alt="image-20220801141546193"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet学习笔记</title>
    <link href="/2022/08/02/Servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/02/Servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet学习笔记"><a href="#Servlet学习笔记" class="headerlink" title="Servlet学习笔记"></a>Servlet学习笔记</h1><h3 id="参考链接C语言编程网Servlet教程-Servlet教程-biancheng-net"><a href="#参考链接C语言编程网Servlet教程-Servlet教程-biancheng-net" class="headerlink" title="[参考链接C语言编程网Servlet教程](Servlet教程 (biancheng.net))"></a>[参考链接C语言编程网Servlet教程](<a href="http://c.biancheng.net/servlet2/">Servlet教程 (biancheng.net)</a>)</h3><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><p>HTTP 协议（Hypertext Transfer Protocol, 超文本传输协议）,本质上是客户端与服务端的通行规则,这一通信规则规定了客户端发送给服务器的内容格式，也规定了服务器发送给客户端的内容格式。客户端 发送给服务器的格式叫”请求协议”；服务器发送给客户端的格式叫”响应协议”。</p><p>浏览器查看协议传输的数据内容,可以通过F12实现</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208020946238.png"></p><h3 id="Http格式"><a href="#Http格式" class="headerlink" title="Http格式"></a>Http格式</h3><p>服务器端资源需要通过浏览器进行，此时由浏览器将我们给出的请求解析为满足 HTTP 协议的格式并 发出。我们发出的请求格式需要按照浏览器规定的格式来书写，在浏览器中书写格式如下：<img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208020946477.png" alt="http格式"></p><h3 id="Http特点"><a href="#Http特点" class="headerlink" title="Http特点"></a>Http特点</h3><p><strong>1.支持客户&#x2F;服务器模式。</strong></p><p><strong>2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GT、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</strong></p><p><strong>3.灵活：HTTP允许传输任意类型的数据对象。传输的类型由Content-Type加以标记。</strong></p><p><strong>4.无连接：无连接是表示每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。HTTP1.1版本后支持可持续连接。通过这种连接，就有可能在建立一个TCP连接后，发送请求并得到回应，然后发送更多的请求并得到更多的回应.通过把建立和释放TCP连接的开销分难到多个请求上，则对于每个请求而言，由于TCP而造成的相对开销被大大地降低了。而且，还可以发送流水线请求，也就是说在发送请求1之后的回应到来之前就可以发送请求2也可以认为，一次连接发送多个请求，由客户机确认是否关闭连接，而服务器会认为这些请求分别来自不同的客户端。</strong></p><p><strong>5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</strong></p><h3 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h3><p>Http请求协议由三部分组成—请求行,请求头,请求正文(GET请求没有请求正文) </p><p><strong>请求头</strong>由一堆键值对组成</p><p>例如:</p><p>Accept: *&#x2F;*</p><p>Accept-Encoding: gzip, deflate, br </p><p>Accept-Language: zh-CN,zh;q&#x3D;0.9 </p><p>Cache-Control: no-cache </p><p>Connection: keep-alive </p><p>Host: hectorstatic.baidu.com </p><p>Pragma: no-cache </p><p>Referer: <a href="https://www.baidu.com/">https://www.baidu.com/</a></p><p><strong>请求行</strong>以一个方法符号开头，以空格分开，后面跟着请求的 URI 和协议的版本。 </p><p>格式如下：Method Request-URI HTTP-Version CRLF </p><p>Method 表示请求方法； Request-URI 是一个统一资源标识符； HTTP-Version 表示请 求的 HTTP 协议版本； CRLF 表示回车和换行；</p><p>例如:</p><p>GET &#x2F;s01&#x2F;ser01?uname&#x3D;zhangsan  HTTP&#x2F;1.1</p><p><strong>请求正文</strong>–你需要传递给服务器的数据</p><p>GET请求没有请求正文,因为GET请求会直接把请求正文放在地址栏后面</p><p>POST请求有请求体(请求正文),如果你有参数需要传递,则会把参数放到Form Data 中(请求体的一部分)</p><p>例如:</p><p><a href="http://localhost:8080/**myweb/servlet1/username=admin&amp;pwd=123456**,%E5%90%8E%E9%9D%A2%E8%BF%99%E4%B8%80%E6%AE%B5%E5%8F%AF%E4%BB%A5%E5%BD%93%E4%BD%9C%E8%AF%B7%E6%B1%82%E6%AD%A3%E6%96%87,%E6%90%9C%E7%B4%A2%E6%97%B6%E5%9C%B0%E5%9D%80%E6%A0%8F%E4%B8%8A%E7%9A%84%E4%B8%80%E5%A4%A7%E5%A0%86%E7%B1%BB%E4%BC%BC%E4%BA%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E4%B8%9C%E8%A5%BF%E5%B0%B1%E6%98%AF%E8%AF%B7%E6%B1%82%E6%AD%A3%E6%96%87">http://localhost:8080/**myweb/servlet1/username=admin&amp;pwd=123456**,后面这一段可以当作请求正文,搜索时地址栏上的一大堆类似于乱码的东西就是请求正文</a></p><p>请求行也有三部分组成—请求方式   请求路径    Http协议版本</p><h3 id="Http响应"><a href="#Http响应" class="headerlink" title="Http响应"></a>Http响应</h3><p>在接收和解释请求消息后，服务器返回一个 HTTP 响应消息。</p><p>HTTP 响应也是由三个部分组成，分别 是：<strong>状态行、消息报头、响应正文。</strong></p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208020947404.png" alt="Snipaste_2022-07-28_21-19-54"></p><h3 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h3><p>HTTP 消息由客户端到服务器的请求和服务器到客户端的响应组成。请求消息和响应消息都是由开始 行（对于请求消息，开始行就是请求行，对于响应消息，开始行就是状态行）， 消息报头（可选），空 行（只有 CRLF 的行），消息正文（可选）组成。</p><p>每一个报头域都是由 <strong>名字+”:”+空格+值</strong> 组成，消息报头域的名字是大小写无关的。</p><p><strong>请求头</strong><br>请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。</p><p>Referer:该请求头指明请求从哪里来。<br>如果是地址栏中输入地址访问的都没有该请求头地址栏输入地址，通过请求可以看到，此时多了一个Referer的请求头，并且后面的值为该请求从哪里发出。比如：百度竞价，只能从百度来的才有效果，否则不算；通常用来做统计工作、防盗链。</p><p><strong>响应头</strong><br>响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URl所标识的资源进行下一步访问的信息。</p><p>Location：Location响应报头域用于重定向接受者到一个新的位置。</p><p>Location响应报头域，常用在更换域名的时候。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java">response.sendRedirect(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br></code></pre></td></tr></table></figure><p>Refresh：自动跳转（单位是秒），可以在页面通过meta标签实现，也可在后台实现。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;meta http-equiv=<span class="hljs-string">&quot;refresh&quot;</span> content=<span class="hljs-string">&quot;3;url=http://www.baidu.com&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="Servlet-HTTP-状态码"><a href="#Servlet-HTTP-状态码" class="headerlink" title="Servlet HTTP 状态码"></a>Servlet HTTP 状态码</h3><table><thead><tr><th align="left">代码</th><th align="left">消息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">服务器切换协议。</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">该请求是完整的，并创建一个新的资源。</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">该请求被接受处理，但是该处理是不完整的。</td></tr><tr><td align="left">203</td><td align="left">Non-authoritative Information</td><td align="left"></td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left"></td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left"></td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">所请求的页面已经转移到一个新的 URL。</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">所请求的页面可以在另一个不同的 URL 下被找到。</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left"></td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left"></td></tr><tr><td align="left">306</td><td align="left"><em>Unused</em></td><td align="left">在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">服务器不理解请求。</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">所请求的页面需要用户名和密码。</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left"><em>您还不能使用该代码。</em></td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">禁止访问所请求的页面。</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法找到所请求的页面。.</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">在请求中指定的方法是不允许的。</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器只生成一个不被客户端接受的响应。</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">在请求送达之前，您必须使用代理服务器的验证。</td></tr><tr><td align="left">408</td><td align="left">Request Timeout</td><td align="left">请求需要的时间比服务器能够等待的时间长，超时。</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">请求因为冲突无法完成。</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">所请求的页面不再可用。</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">“Content-Length” 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">请求中给出的先决条件被服务器评估为 false。</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">服务器不接受该请求，因为请求实体过大。</td></tr><tr><td align="left">414</td><td align="left">Request-url Too Long</td><td align="left">服务器不接受该请求，因为 URL 太长。当您转换一个 “post” 请求为一个带有长的查询信息的 “get” 请求时发生。</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器不接受该请求，因为媒体类型不被支持。</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">未完成的请求。服务器遇到了一个意外的情况。</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">未完成的请求。服务器不支持所需的功能。</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">未完成的请求。服务器从上游服务器收到无效响应。</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">未完成的请求。服务器暂时超载或死机。</td></tr><tr><td align="left">504</td><td align="left">Gateway Timeout</td><td align="left">网关超时。</td></tr><tr><td align="left">505</td><td align="left">HTTP Version Not Supported</td><td align="left">服务器不支持”HTTP协议”版本。</td></tr></tbody></table><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet 是 Server 与 Applet 的缩写，是服务端小程序的意思。使用 Java 语言编写的服务器端程序， 可以生成动态的 WEB 页，Servlet 主要运行在服务器端，并由服务器调用执行， 是一种按照 Servlet 标 准来开发的类。言外之意：要实现 web 开 发，需要实现 Servlet 标准</p><p>Servlet 本质上也是 Java 类，但要遵循 Servlet 规范进行编写，没有 main()方法，它的创建、使用、 销毁都由 Servlet 容器进行管理(如 Tomcat)。言外之意：写自己的类，不用写 main 方法，别人自动 调用</p><p> Servlet 是和 HTTP 协议是紧密联系的，其可以处理 HTTP 协议相关的所有内容。这也是 Servlet 应用 广泛的原因之一。 提供了 Servlet 功能的服务器，叫做 Servlet 容器，其常见容器有很多，如 Tomcat, Jetty, WebLogic Server, WebSphere, JBoss 等等。</p><p> <strong>Servlet是JavaWeb的三大组件之一，它属于动态资源。Servlet的作用是处理请求，服务器会把接受到的请求交给Servlet来处理，在Servlet中通常需要：</strong></p><ul><li><p>接受请求数据；</p></li><li><p>处理请求；</p></li><li><p>完成响应。</p><p>例如客户端发出登录请求，或者输出注册请求，这些请求都应该有Servlet来完成处理！Servlet需要我们自己来编写，每个Servlet必须实现javax.servlet.Servlet接口。</p></li></ul><h3 id="实现Servlet的三种方式"><a href="#实现Servlet的三种方式" class="headerlink" title="实现Servlet的三种方式"></a>实现Servlet的三种方式</h3><p>Servlet 创有三种方式。</p><h4 id="1、实现-Servlet-接口"><a href="#1、实现-Servlet-接口" class="headerlink" title="1、实现 Servlet 接口"></a><strong>1、实现 Servlet 接口</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Servlet的生命周期:从Servlet被创建到Servlet被销毁的过程</span><br><span class="hljs-comment">//一次创建，到处服务</span><br><span class="hljs-comment">//一个Servlet只会有一个对象，服务所有的请求</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 1.实例化（使用构造方法创建对象）</span><br><span class="hljs-comment"> * 2.初始化  执行init方法</span><br><span class="hljs-comment"> * 3.服务     执行service方法</span><br><span class="hljs-comment"> * 4.销毁    执行destroy方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br><br>    <span class="hljs-comment">//public ServletDemo1()&#123;&#125;</span><br><br>     <span class="hljs-comment">//生命周期方法:当Servlet第一次被创建对象时执行该方法,该方法在整个生命周期中只执行一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig arg0)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>                System.out.println(<span class="hljs-string">&quot;=======init=========&quot;</span>);<br>        &#125;<br><br>    <span class="hljs-comment">//生命周期方法:对客户端响应的方法,该方法会被执行多次，每次请求该servlet都会执行该方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest arg0, ServletResponse arg1)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;hehe&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">//生命周期方法:当Servlet被销毁时执行该方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;******destroy**********&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//当停止tomcat时也就销毁的servlet。</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为是实现 Servlet 接口，所以我们需要实现接口里的方法。</p><p>下面我们也说明了 Servlet 的执行过程，也就是 Servlet 的生命周期。</p><h4 id="2、继承-GenericServlet-类"><a href="#2、继承-GenericServlet-类" class="headerlink" title="2、继承 GenericServlet 类"></a><strong>2、继承 GenericServlet 类</strong></h4><p>它实现了 Servlet 接口除了 service 的方法，不过这种方法我们极少用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest arg0, ServletResponse arg1)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;heihei&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、继承-HttpServlet-方法-只需要记住这一种"><a href="#3、继承-HttpServlet-方法-只需要记住这一种" class="headerlink" title="3、继承 HttpServlet 方法(只需要记住这一种)"></a><strong>3、继承 HttpServlet 方法</strong>(只需要记住这一种)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;haha&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;ee&quot;</span>);<br>        doGet(req,resp);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建 Servlet 的第三种方法，也是我们经常用的方法。</p><p>详细讲解一下第三种方式,继承 Httpservlet的方式</p><h3 id="实现Servlet规范"><a href="#实现Servlet规范" class="headerlink" title="实现Servlet规范"></a>实现Servlet规范</h3><p>实现 Servlet 规范，即继承 HttpServlet 类，并到如响应的包，该类中已经完成了通信的规则，我们只 需要进行业务的实现即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/ser01&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;haha&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;ee&quot;</span>);<br>        doGet(req,resp);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重写Service方法"><a href="#重写Service方法" class="headerlink" title="重写Service方法"></a>重写Service方法</h3><p>满足 Servlet 规范只是让我们的类能够满足接收请求的要求，接收到请求后需要对请求进行分析，以 及进行业务逻辑处理，计算出结果，则需要添加代码，在规范中有一个叫做 service的方法，专门用来做 请求处理的操作，业务代码则可以写在该方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpServlet <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenderServlet</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest,ServletResponse)</span> <span class="hljs-comment">//生命周期方法</span><br>    <span class="hljs-comment">//强调两个参数为http协议相关的类型，</span><br>    <span class="hljs-comment">//调用本来的servlet(HttpServletRequest,HttpServletResponse)</span><br>        <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest,HttpServletResponse)</span><span class="hljs-comment">//参数已经是Http协议相关的，使用起来更加方便。</span><br>    <span class="hljs-comment">//它会通过request得到当前请求的请求方式，例如：GET或POST</span><br>    <span class="hljs-comment">//根据请求方式再调用doGet()或doPost()方法</span><br>        <br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(...)</span>  <span class="hljs-comment">//重写</span><br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPsot</span><span class="hljs-params">(...)</span> <span class="hljs-comment">//重写</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设置注解"><a href="#设置注解" class="headerlink" title="设置注解"></a>设置注解</h3><p>我一般直接抛弃使用web.xml配置servlet的这一种方式,直接使用注解配置会方便很多.开发servlet项目，使用@WebServlet将一个继承于javax.servlet.http.HttpServlet 的类定义为Servlet 组件。在Servlet3.0中 ， 可以使用@WebServlet注解将一个继承于javax.servlet.http.HttpServlet的类 标注为可以处理用户请求的 Servlet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name=&quot;Servlet01&quot;,value=&quot;/ser01&quot;)</span> <span class="hljs-comment">//后面的参数代表网址(访问路径例如localhost:8080/Servlet01/ser01)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name=&quot;Servlet01&quot;,urlPatterns = &quot;/ser01&quot;)</span> <span class="hljs-comment">//后面的参数代表网址(访问路径例如localhost:8080/Servlet01/ser01)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name=&quot;Servlet01&quot;,value=&#123;&quot;/ser01&quot;,&#x27;/ser001&#x27;&#125;)</span> <span class="hljs-comment">//后面的参数代表网址(访问路径例如localhost:8080/Servlet01/ser01)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name=&quot;Servlet01&quot;,urlPatterns=&#123;&quot;/ser01&quot;,&#x27;/ser001&#x27;&#125;)</span><span class="hljs-comment">//后面的参数代表网址(访问路径例如localhost:8080/Servlet01/ser01)</span><br></code></pre></td></tr></table></figure><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p><strong>Servlet 的生命周期，简单的概括这就分为四步：servlet 类加载–&gt;实例化–&gt;服务–&gt;销毁。</strong></p><p><strong>1.Web Client向Servlet容器(Tomcat)发出Http请求</strong></p><p><strong>2.Servlet容器接收Web Client的请求</strong></p><p><strong>3.Servlet容器创建一个HttpServletRequest对象，将Web Client请求的信息封装到这个对象中</strong></p><p><strong>4.Servlet容器创建一个HttpServletResponse对象</strong></p><p><strong>5.Servlet容器调HttpServlet对象service方法，把Request与Response作为参数，传给HttpServlet</strong></p><p><strong>6.HttpServlet调用HttpServletRequest对象的有关方法，获取Http请求信息</strong></p><p><strong>7.HttpServlet调用HttpServletResponse对象的有关方法，生成响应数据</strong></p><p><strong>8.Servlet容器把HttpServlet的响应结果传给Web Client</strong></p><ul><li>void init(ServletConfig)：出生之后（1次）</li><li>void service(ServiceRequest request,ServletResponse response)：每次处理请求时都会被调用；&#x2F;&#x2F;通常我们extends HttpServlet,参数类型也会改成HttpRequest(HttpResponse)</li><li>void destroy()：临死之前（1次）；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name=&quot;AServlet&quot;,value=&quot;/ser01&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;    <br><span class="hljs-comment">//它是生命周期方法</span><br> <span class="hljs-comment">//它会在Servlet被销毁之前调用，并且它只会被调用一次！</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;destory()...&quot;</span>);<br>&#125;<br><span class="hljs-comment">//可以用来获取Servlet的配置信息 </span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;getServletConfig()...&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">//获取Servlet的信息(用户调用，基本没用)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;getServletInfo()...&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是一个快乐的Servlet&quot;</span>;<br>&#125;<br> <span class="hljs-comment">//它是生命周期方法</span><br> <span class="hljs-comment">//它会在Servlet对象创建之后马上执行，并且只执行一次！（出生之后）</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>System.out.println(<span class="hljs-string">&quot;init()...&quot;</span>);<br>&#125;<br> <span class="hljs-comment">//它是生命周期方法</span><br> <span class="hljs-comment">//它会被调用多次</span><br> <span class="hljs-comment">//每次处理请求都是在调用这个方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest request, ServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>System.out.println(<span class="hljs-string">&quot;service()...&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--你也可以使用web.xml方式配置,我是感觉这种方式不好--&gt;</span><br><span class="hljs-comment">&lt;!--web.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>aservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.edu.cn.AServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>aservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/AServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-comment">&lt;!--也可以在类中加@WebServlet(&quot;/AServlet&quot;)来设置--&gt;</span><br></code></pre></td></tr></table></figure><p><strong>特性：</strong></p><ul><li>单例，一个类只有一个对象；当然可能存在多个Servlet类</li><li>线程不安全的，所以它的效率是高的</li></ul><p>**注：Servlet类由我们来写，但对象由服务器来创建，并且有服务器来调用相应的方法。</p><h3 id="Servlet工作流程"><a href="#Servlet工作流程" class="headerlink" title="Servlet工作流程"></a>Servlet工作流程</h3><p><strong>1.通过请求头获知浏览器访问的是哪个主机</strong></p><p><strong>2.再通过请求行获取访问的是哪个一个web应用</strong></p><p><strong>3.再通过请求行中的请求路径获知访问的是哪个资源</strong></p><p><strong>4.通过获取的资源路径在配置中匹配到真实的路径，</strong></p><p><strong>5.服务器会创建servlety对象，（如果是第一次访问时，创建servlet:实例，并调用init方法进行初始化操作)</strong></p><p><strong>6.调用service(request,response)方法来处理请求和响应的操作</strong></p><p><strong>7.调用service:完毕后返回服务器由服务器讲response缓冲区的数据取出，以http响应的格式发送给浏览器</strong></p><h2 id="HttpServletRequset对象"><a href="#HttpServletRequset对象" class="headerlink" title="HttpServletRequset对象"></a>HttpServletRequset对象</h2><p>ttpServletRequest 对象：主要作用是用来接收客户端发送过来的请求信息，例如：请求的参数，发 送的头信息等都属于客户端发来的信息，service()方法中形参接收的是 HttpServletRequest 接口的实例 化对象，表示该对象主要应用在 HTTP 协议上，该对象是由 Tomcat 封装好传递过来。</p><p>HttpServletRequest 是 ServletRequest 的子接口，ServletRequest 只有一个子接口，就是 HttpServletRequest。既然只有一个子接口为什么不将两个接口合并为一个？</p><p>从长远上讲：现在主要用的协议是 HTTP 协议，但以后可能出现更多新的协议。若以后想要支持这种 新协议，只需要直接继承 ServletRequest 接口就行了。</p><p>在 HttpServletRequest 接口中，定义的方法很多，<strong>但都是围绕接收客户端参数的</strong>。但是怎么拿到该对象呢？不需要，直接在 Service 方法中由容器传入过来，而我们需要做的就是取出对象中的数据，进行 分析、处理。</p><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a><strong>1.常用方法</strong></h3><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>getMethod()</td><td>该方法用于获取 HTTP 请求方式（如 GET、POST 等）。</td></tr><tr><td>String</td><td>getRequestURI()</td><td>该方法用于获取请求行中的资源名称部分，即位于 URL 的主机和端口之后，参数部分之前的部分。</td></tr><tr><td>String</td><td>getQueryString()</td><td>该方法用于获取请求行中的参数部分，也就是 URL 中“?”以后的所有内容。</td></tr><tr><td>String</td><td>getContextPath()</td><td>返回当前 Servlet 所在的应用的名字（上下文）。对于默认（ROOT）上下文中的 Servlet，此方法返回空字符串””。</td></tr><tr><td>String</td><td>getServletPath()</td><td>该方法用于获取 Servlet 所映射的路径。</td></tr><tr><td>String</td><td>getRemoteAddr()</td><td>该方法用于获取客户端的 IP 地址。</td></tr><tr><td>String</td><td>getRemoteHost()</td><td>该方法用于获取客户端的完整主机名，如果无法解析出客户机的完整主机名，则该方法将会返回客户端的 IP 地址。</td></tr></tbody></table><p><strong>示例 1</strong></p><p>为了更好地理解这些方法，下面通过案例演示这些方法的使用。</p><p>创建一个名称为 httpServletRequestDemo 的项目，在 net.biancheng.www 包中创建一个名为 RequestLine 的 Servlet 类，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.biancheng.www;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><br><span class="hljs-meta">@WebServlet(&quot;/RequestLine&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestLine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        writer.println(<span class="hljs-string">&quot;请求方式:&quot;</span> + request.getMethod() + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +<br>                <span class="hljs-string">&quot;客户端的 IP 地址:&quot;</span> + request.getRemoteAddr() + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +<br>                <span class="hljs-string">&quot;应用名字（上下文）:&quot;</span> + request.getContextPath() + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +<br>                <span class="hljs-string">&quot;URI:&quot;</span> + request.getRequestURI() + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +<br>                <span class="hljs-string">&quot;请求字符串:&quot;</span> + request.getQueryString() + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +<br>                <span class="hljs-string">&quot;Servlet所映射的路径:&quot;</span> + request.getServletPath() + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +<br>                <span class="hljs-string">&quot;客户端的完整主机名:&quot;</span> + request.getRemoteHost() + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span><br>        );<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(request, response);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208021003569.png"></p><h3 id="获取-form-表单的数据"><a href="#获取-form-表单的数据" class="headerlink" title="获取 form 表单的数据"></a><strong>获取 form 表单的数据</strong></h3><p>在实际开发中，我们经常需要获取用户提交的表单数据，例如用户名和密码等。为了方便获取表单中的请求参数，ServletRequest 定义了一系列获取请求参数的方法，如下表所示。</p><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>功能描述</th></tr></thead><tbody><tr><td>String</td><td>getParameter(String name)</td><td>返回指定参数名的参数值。</td></tr><tr><td>String [ ]</td><td>getParameterValues (String name)</td><td>以字符串数组的形式返回指定参数名的所有参数值（HTTP 请求中可以有多个相同参数名的参数）。</td></tr><tr><td>Enumeration</td><td>getParameterNames()</td><td>以枚举集合的形式返回请求中所有参数名。</td></tr><tr><td>Map</td><td>getParameterMap()</td><td>用于将请求中的所有参数名和参数值装入一个 Map 对象中返回。</td></tr></tbody></table><p><strong>示例 3</strong></p><p>为了更好地理解这些方法，下面通过案例演示这些方法的使用。</p><p>在 httpServletRequestDemo 的 WebContent 目录下，创建 form.html，代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/httpServletRequestDemo/RequestParam&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>编程帮wwww.biancheng.net<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>输入姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>输入密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>选择性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> /&gt;</span>男 <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span> /&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>选择使用的语言<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;language&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;JAVA&quot;</span> /&gt;</span>JAVA<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;language&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;C&quot;</span> /&gt;</span>C语言 <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;language&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PHP&quot;</span> /&gt;</span>PHP <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;language&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Python&quot;</span> /&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>选择城市<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>--请选择--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;guangzhou&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 net.biancheng.www 包中，创建一个名为 RequestParam 的 Servlet 类，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.biancheng.www;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@WebServlet(&quot;/RequestParam&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestParam</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-comment">// 获取内容，做其他操作</span><br>        <span class="hljs-comment">// 获取姓名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-comment">// 获取密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-comment">// 获取性别</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;sex&quot;</span>);<br>        <span class="hljs-comment">// 获取城市</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;city&quot;</span>);<br>        <span class="hljs-comment">// 获取语言</span><br>        String[] languages = request.getParameterValues(<span class="hljs-string">&quot;language&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;用户名：&quot;</span> + username + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> + <span class="hljs-string">&quot;密码：&quot;</span> + password + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> + <span class="hljs-string">&quot;性别：&quot;</span> + sex + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> + <span class="hljs-string">&quot;城市：&quot;</span> + city<br>                + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> + <span class="hljs-string">&quot;使用过的语言：&quot;</span> + Arrays.toString(languages) + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动 Tomcat 服务器，在地址栏中输入“<a href="http://localhost:8080/httpServletRequestDemo/form.html%E2%80%9D%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE">http://localhost:8080/httpServletRequestDemo/form.html”，即可访问</a> form.html，结果如下图。</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208021004375.png"></p><p>在表单中填写信息后，点击提交，结果如下图。</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208021004870.png"></p><h3 id="请求乱码"><a href="#请求乱码" class="headerlink" title="请求乱码"></a>请求乱码</h3><p>解决请求乱码的前提是我们必须要明白为什么会产生乱码,由于现在的 request 属于接收客户端的参数，所以必然有其默认的语言编码，主要是由于在解析过程 中默认使用的编码方式为 ISO-8859-1(此编码不支持中文)，所以解析时一定会出现乱码。要想解决这种 乱码问题，需要设置 request 中的编码方式，告诉服务器以何种方式来解析数据。或者在接收到乱码数 据以后，再通过相应的编码格式还原。</p><p>还有一点我们要了解,Tomcat8起，以后的GET方式请求是不会出现乱码的,言外之意,POST请求是可能出现乱码的.</p><p>方式一： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><p>这种方式只针对 POST 有效（必须在接收所有的数据之前设定） </p><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(request.getParameter(name).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><p>借助了String 对象的方法，该种方式对任何请求有效，是通用的</p><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><p>请求转发，是一种服务器的行为，当客户端请求到达后，服务器进行转发，此时会将请求对象进行保 存，地址栏中的 URL 地址不会改变，得到响应后，服务器端再将响应发送给客户端，从始至终只有一个 请求发出。</p><p>实现方式如下，达到多个资源协同响应的效果。</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-built_in">request</span>.getRequestDispatcher(url).forward(<span class="hljs-built_in">request</span>,<span class="hljs-built_in">response</span>);<br></code></pre></td></tr></table></figure><h3 id="Request作用域"><a href="#Request作用域" class="headerlink" title="Request作用域"></a>Request作用域</h3><p>通过该对象可以在一个请求中传递数据，作用范围：在一次请求中有效，即服务器跳转有效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置域对象内容</span><br>request.setAttribute(String name, String value);<br><span class="hljs-comment">// 获取域对象内容</span><br>request.getAttribute(String name);<br><span class="hljs-comment">// 删除域对象内容</span><br>request.removeAttribute(String name)<br></code></pre></td></tr></table></figure><p>request 域对象中的数据在一次请求中有效，则经过请求转发，request 域中的数据依然存在，则在 请求转发的过程中可以通过 request 来传输&#x2F;共享数据。</p><h2 id="HttpServletResponse对象"><a href="#HttpServletResponse对象" class="headerlink" title="HttpServletResponse对象"></a>HttpServletResponse对象</h2><p>在 Servlet API 中，定义了一个 HttpServletResponse 接口，它继承自 ServletResponse 接口。HttpServletResponse 对象专门用来封装 HTTP 响应消息，简称 response 对象。</p><p>Servlet 容器会针对每次请求创建一个 response 对象，并把它作为参数传递给 Servlet 的 service 方法。Servlet 处理请求后，会将响应信息封装到 response 对象中，并由容器解析后返回给客户端。</p><p>由于 HTTP 响应消息由响应行、响应头、消息体三部分组成，所以 HttpServletResponse 接口中定义了向客户端发送响应状态码、响应头、响应体的方法，下面我们将针对这些方法进行介绍。</p><h3 id="响应行相关的方法"><a href="#响应行相关的方法" class="headerlink" title="响应行相关的方法"></a>响应行相关的方法</h3><p>当 Servlet 返回响应消息时，需要在响应消息中设置状态码。因此，HttpServletResponse 接口定义了发送状态码的方法，如下表。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>setStatus（int status）</td><td>用于设置 HTTP 响应消息的状态码，并生成响应状态行。</td></tr><tr><td>void</td><td>sendError（int sc）</td><td>用于发送表示错误信息的状态码。</td></tr></tbody></table><h3 id="响应头相关的方法"><a href="#响应头相关的方法" class="headerlink" title="响应头相关的方法"></a>响应头相关的方法</h3><p>HttpServletResponse 接口中定义了一系列设置 HTTP 响应头字段的方法，如下表所示。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>addHeader(String name,String value)</td><td>用于增加响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值。</td></tr><tr><td>void</td><td>setHeader (String name,String value)</td><td>用于设置响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值。</td></tr><tr><td>void</td><td>addIntHeader(String name,int value)</td><td>用于增加值为 int 类型的响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值，类型为 int。</td></tr><tr><td>void</td><td>setIntHeader(String name, int value)</td><td>用于设置值为 int 类型的响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值，类型为 int。</td></tr><tr><td>void</td><td>setContentType(String type)</td><td>用于设置 Servlet 输出内容的 MIME 类型以及编码格式。</td></tr><tr><td>void</td><td>setCharacterEncoding(String charset)</td><td>用于设置输出内容使用的字符编码。</td></tr></tbody></table><h3 id="响应体相关的方法"><a href="#响应体相关的方法" class="headerlink" title="响应体相关的方法"></a>响应体相关的方法</h3><p>由于在 HTTP 响应消息中，大量的数据都是通过响应消息体传递的。因此 ServletResponse 遵循以 I&#x2F;O 流传递大量数据的设计理念，在发送响应消息体时，定义了两个与输出流相关的方法。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ServletOutputStream</td><td>getOutputStream()</td><td>用于获取字节输出流对象。</td></tr><tr><td>PrintWriter</td><td>getWriter()</td><td>用于获取字符输出流对象。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意：getOutputStream() 和 getWriter() 方法互相排斥，不可同时使用，否则会发生 IllegalStateException 异常。</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 编程帮 www.biancheng.net 使用response对象向页面输出内容</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@WebServlet(&quot;/OutServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        run1(response);<br>        <span class="hljs-comment">// run2(response);</span><br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(request, response);<br>    &#125;<br>    <span class="hljs-comment">// 使用字符流向页面输出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run2</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        response.getWriter().write(<span class="hljs-string">&quot;编程帮 www.biancheng.net&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 使用字节流向页面输出</span><br>    <span class="hljs-comment">// 使用字节流向页面输出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run1</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 设置浏览器打开文件时编码</span><br>        response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        <span class="hljs-comment">// 获取字节输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        <span class="hljs-type">byte</span>[] str = <span class="hljs-string">&quot;编程帮 www.biancheng.net&quot;</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">// 输出中文</span><br>        os.write(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动 Tomat 服务器，在客户端浏览器地址栏输入“<a href="http://localhost:8080/responseDemo/OutServlet%E2%80%9D%E8%AE%BF%E9%97%AE">http://localhost:8080/responseDemo/OutServlet”访问</a> OutServlet，结果如下图。</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208021004955.png"></p><p>在 doGet() 方法中调用 run2() 方法，使用字符流输出响应内容到浏览器，再次访问 OutServlet，结果如下图。</p><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208021004647.png"></p><h3 id="response-中文乱码问题"><a href="#response-中文乱码问题" class="headerlink" title="response 中文乱码问题"></a>response 中文乱码问题</h3><p>response 对象向页面输出时有两种方式：字节流、字符流，这两种方式输出中文时都有可能出现乱码。下面我们针对这两种方式出现乱码的原因以及解决方案进行介绍。</p><h4 id="使用字节流输出中文"><a href="#使用字节流输出中文" class="headerlink" title="使用字节流输出中文"></a>使用字节流输出中文</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ServletOutputStream outptuStream <span class="hljs-operator">=</span> response.getOutputStream()<span class="hljs-comment">;outputStream.write(“编程帮 www.biancheng.net”.getBytes());</span><br></code></pre></td></tr></table></figure><p>使用字节流向页面输出中文是否会出现乱码问题？不一定。</p><h4 id="乱码原因："><a href="#乱码原因：" class="headerlink" title="乱码原因："></a>乱码原因：</h4><p>字节流输出中文是否出现乱码，取决于中文转成字节数组时与浏览器打开时采用的字符集是否一致。若两者保持一致，则不会出现乱码问题，若不一致就会出现乱码问题。</p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>将中文转成字节数组时和浏览器默认采用的字符集保持一致即可，代码如下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<span class="hljs-regexp">//</span> 获取字节输出流OutputStream os = response.getOutputStream();byte[] str = <span class="hljs-string">&quot;编程帮 www.biancheng.net&quot;</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>);<span class="hljs-regexp">//</span> 输出中文os.write(str);<br></code></pre></td></tr></table></figure><h4 id="使用字符流输出中文"><a href="#使用字符流输出中文" class="headerlink" title="使用字符流输出中文"></a>使用字符流输出中文</h4><p>使用字符流向页面输出中文是否会出现乱码问题？一定乱码。</p><h4 id="乱码原因：-1"><a href="#乱码原因：-1" class="headerlink" title="乱码原因："></a>乱码原因：</h4><p>通过字符流输出的内容是存放在 response 缓冲区的，response 缓冲区的默认字符集是 ISO-8859-1，该字符集不支持中文。</p><h4 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h4><p>将 response 缓冲区和浏览器采用的字符集保持一致即可，有如下 2 种的方式。</p><p>第一种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置response缓冲区的编码response.setCharacterEncoding(&quot;UTF-8&quot;);// 设置浏览器打开文件所采用的编码response.setHeader(&quot;Content-Type&quot;, &quot;text/html;charset=UTF-8&quot;);// 输出中文response.getWriter().write(&quot;编程帮 www.biancheng.net&quot;);</span><br></code></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">纯文本复制<br>response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);response.getWriter().write(<span class="hljs-string">&quot;编程帮 www.biancheng.net&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="会话技术-Cookie对象"><a href="#会话技术-Cookie对象" class="headerlink" title="会话技术(Cookie对象)"></a>会话技术(Cookie对象)</h2><p>从打开浏览器访问某个网站，到关闭浏览器的过程，称为一次会话。会话技术是指在会话中，帮助服务器记录用户状态和数据的技术。</p><p>常用的会话技术分为两种：</p><ol><li>Cookie ：客户端会话技术</li><li>Session ：服务端会话技术</li></ol><p>本节将对 Cookie 进行介绍，下节将对 Session 进行介绍。</p><p>Cookie是浏览器提供的一种技术，通过服务器的程序能将一些只须保存在客户端，或者在客户端进行 处理的数据，放在本地的计算机上，不需要通过网络传输，因而提高网页处理的效率，并且能够减少服 务器的负载，但是由于 Cookie 是服务器端保存在客户端的信息， 所以其安全性也是很差的。例如常见 的记住密码则可以通过 Cookie 来实现。</p><h3 id="Cookie-的分类"><a href="#Cookie-的分类" class="headerlink" title="Cookie 的分类"></a>Cookie 的分类</h3><p>Cookie分为两种：</p><ol><li>会话级别 Cookie（默认）：Cookie 保存到浏览器的内存中，浏览器关闭则 Cookie 失效。</li><li>持久的 Cookie：Cookie 以文本文件的形式保存到硬盘上。</li></ol><h3 id="Cookie-API"><a href="#Cookie-API" class="headerlink" title="Cookie API"></a>Cookie API</h3><p>javax.servlet.http 包中定义了一个 Cookie 类，利用它的带参构造方法，可以创建 Cookie 对象。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;www.biancheng.net&quot;</span>); <br></code></pre></td></tr></table></figure><p>其中参数 name 为 Cookie 的名称，参数 value 为 Cookie 的值，name 与 value 的取值不能包含 <code>[ ] ( ) = , &quot; / ? @ : ;</code>等字符</p><p><strong>HttpServletResponse 接口和 HttpServletRequest 接口也都定义了与 Cookie 相关的方法，如下表所示。</strong></p><table><thead><tr><th>方法</th><th>描述</th><th>所属接口</th></tr></thead><tbody><tr><td>void addCookie(Cookie cookie)</td><td>用于在响应头中增加一个相应的 Set-Cookie 头字段。</td><td>javax.servlet.http.HttpServletResponse</td></tr><tr><td>Cookie[] getCookies()</td><td>用于获取客户端提交的 Cookie。</td><td>javax.servlet.http.HttpServletRequest</td></tr></tbody></table><p>javax.servlet.http.Cookie 类中提供了一系列</p><h3 id="获取或者设置-Cookie-的方法"><a href="#获取或者设置-Cookie-的方法" class="headerlink" title="获取或者设置 Cookie 的方法"></a>获取或者设置 Cookie 的方法</h3><p>，如下表。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int</td><td>getMaxAge()</td><td>用于获取指定 Cookie 的最大有效时间，以秒为单位。 默认情况下取值为 -1，表示该 Cookie 保留到浏览器关闭为止。</td></tr><tr><td>String</td><td>getName()</td><td>用于获取 Cookie 的名称。</td></tr><tr><td>String</td><td>getPath()</td><td>用于获取 Cookie 的有效路径。</td></tr><tr><td>boolean</td><td>getSecure()</td><td>如果浏览器只通过安全协议发送 Cookie，则返回 true；如果浏览器可以使用任何协议发送 Cookie，则返回 false。</td></tr><tr><td>String</td><td>getValue()</td><td>用于获取 Cookie 的值。</td></tr><tr><td>int</td><td>getVersion()</td><td>用于获取 Cookie 遵守的协议版本。</td></tr><tr><td>void</td><td>setMaxAge(int expiry)</td><td>用于设置 Cookie 的最大有效时间，以秒为单位。 取值为正值时，表示 Cookie 在经过指定时间后过期。取值为负值时，表示 Cookie 不会被持久存储，在 Web 浏览器退出时删除。取值为 0 时，表示删除该 Cookie。</td></tr><tr><td>void</td><td>setPath(String uri)</td><td>用于指定 Cookie 的路径。</td></tr><tr><td>void</td><td>setSecure(boolean flag)</td><td>用于设置浏览器是否只能使用安全协议（如 HTTPS 或 SSL）发送 Cookie。</td></tr><tr><td>void</td><td>setValue(String newValue)</td><td>用于设置 Cookie 的值。</td></tr></tbody></table><h3 id="Cookie-的使用细节"><a href="#Cookie-的使用细节" class="headerlink" title="Cookie 的使用细节"></a>Cookie 的使用细节</h3><p>使用 Cookie 开发时需要注意以下细节：</p><ul><li><p>一个 Cookie 只能标识一种信息，它至少包含一个名称（NAME）和一个值（VALUE）。</p></li><li><p>如果创建了一个 Cookie，并发送到浏览器，默认情况下它是一个会话级别的 Cookie。用户退出浏览器就被删除。如果希望将 Cookie 存到磁盘上，则需要调用 setMaxAge(int maxAge) 方法设置最大有效时间，以秒为单位。</p></li><li><p>使用 setMaxAge(0) 手动删除 Cookie时，需要使用 setPath 方法指定 Cookie 的路径，且该路径必须与创建 Cookie 时的路径保持一致。</p></li><li><p>浏览器存放Cookie的数量 不同的浏览器对Cookie也有限定，Cookie的存储有是上限的,大概是4kb。Cookie是存储在客户端（浏览器） 的，而且一般是由服务器端创建和设定。后期结合Session来实现回话跟踪。</p></li><li><p>Cookie存中文问题</p><ul><li><p>Cookie 中不能出现中文，如果有中文则通过 URLEncoder.encode()来进行编码，获取时通过 URLDecoder.decode()来进行解码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;姓名&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br><span class="hljs-comment">// 通过 URLEncoder.encode()来进行编码</span><br>name = URLEncoder.encode(name);<br>value = URLEncoder.encode(value);<br><span class="hljs-comment">// 创建Cookie对象</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(name,value);<br><span class="hljs-comment">// 发送Cookie对象</span><br>response.addCookie(cookie);<br><br>........<br>     <br><br><span class="hljs-comment">// 获取时通过 URLDecoder.decode()来进行解码</span><br>URLDecoder.decode(cookie.getName());<br>URLDecoder.decode(cookie.getValue());<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Cookie-的缺点"><a href="#Cookie-的缺点" class="headerlink" title="Cookie 的缺点"></a>Cookie 的缺点</h3><p>Cookie 虽然可以解决服务器跟踪用户状态的问题，但是它具有以下缺点：</p><ul><li><p>在 HTTP 请求中，Cookie 是明文传递的，容易泄露用户信息，安全性不高。</p></li><li><p>浏览器可以禁用 Cookie，一旦被禁用，Cookie 将无法正常工作。</p></li><li><p>Cookie 对象中只能设置文本（字符串）信息。</p></li><li><p>客户端浏览器保存 Cookie 的数量和长度是有限制的。</p></li></ul><h3 id="Cookie的路径"><a href="#Cookie的路径" class="headerlink" title="Cookie的路径"></a>Cookie的路径</h3><p>Cookie的setPath设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器中加载某些 cookie。</p><p><strong>情景一：当前服务器下任何项目的任意资源都可获取Cookie对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 当前项目路径为：s01 */</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;XXX&quot;</span>);<br><span class="hljs-comment">// 设置路径为&quot;/&quot;，表示在当前==服务器==下任何项目都可访问到Cookie对象</span><br>cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>response.addCookie(cookie);<br></code></pre></td></tr></table></figure><p><strong>情景二：当前项目下的资源可获取Cookie对象 （默认不设置Cookie的path）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 当前项目路径为：s01 */</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;XXX&quot;</span>);<br><span class="hljs-comment">// 设置路径为&quot;/s01&quot;，表示在==当前项目下任何项目==都可访问到Cookie对象</span><br>cookie.setPath(<span class="hljs-string">&quot;/s01&quot;</span>); <span class="hljs-comment">// 默认情况，可不设置path的值</span><br>response.addCookie(cookie);<br></code></pre></td></tr></table></figure><p><strong>情景三：指定项目下的资源可获取Cookie对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 当前项目路径为：s01 */</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;XXX&quot;</span>);<br><span class="hljs-comment">// 设置路径为&quot;/s02&quot;，表示在s02项目下才可访问到Cookie对象</span><br>cookie.setPath(<span class="hljs-string">&quot;/s02&quot;</span>); <span class="hljs-comment">// 只能在s02项目下获取Cookie，就算cookie是s01产生的，==s01也不能获取它==</span><br>response.addCookie(cookie);<br></code></pre></td></tr></table></figure><p><strong>情景四：指定目录下的资源可获取Cookie对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 当前项目路径为：s01 */</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;XXX&quot;</span>);<br><span class="hljs-comment">// 设置路径为&quot;/s01/cook&quot;，表示在s02/cook目录下才可访问到Cookie对象</span><br>cookie.setPath(<span class="hljs-string">&quot;/s01/cook&quot;</span>);<br>response.addCookie(cookie);<br></code></pre></td></tr></table></figure><p>如果我们设置path，如果当前访问的路径包含了cookie的路径（当前访问路径在cookie路径基础上要 比cookie的范围小）cookie就会加载到request对象之中。</p><p>cookie的路径指的是可以访问该cookie的顶层目录，该路径的子路径也可以访问该cookie。</p><p>&#x3D;&#x3D;<strong>总结：当访问的路径包含了cookie的路径时，则该请求将带上该cookie；如果访问路径不包含 cookie路径，则该请求不会携带该cookie。</strong>&#x3D;&#x3D;</p><h2 id="会话技术-HttpSession对象"><a href="#会话技术-HttpSession对象" class="headerlink" title="会话技术(HttpSession对象)"></a>会话技术(HttpSession对象)</h2><p>从打开浏览器访问某个网站，到关闭浏览器的过程，称为一次会话。会话技术是指在会话中，帮助服务器记录用户状态和数据的技术。</p><p>常用的会话技术分为两种：</p><ol><li>Cookie ：客户端会话技术</li><li>Session ：服务端会话技术</li></ol><h3 id="Session-的工作原理-JSESSIONID"><a href="#Session-的工作原理-JSESSIONID" class="headerlink" title="Session 的工作原理(JSESSIONID)"></a>Session 的工作原理(JSESSIONID)</h3><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/blogImgs/img/202208021004083.jpeg"></p><ol><li><p>当客户端第一次请求会话对象时，服务器会创建一个 Session 对象，并为该 Session 对象分配一个唯一的 SessionID（用来标识这个 Session 对象）；</p></li><li><p>服务器将 SessionID 以 Cookie（Cookie 名称为：“JSESSIONID”，值为 SessionID 的值）的形式发送给客户端浏览器；</p></li><li><p>客户端浏览器再次发送 HTTP 请求时，会将携带 SessionID 的 Cookie 随请求一起发送给服务器；</p></li><li><p>服务器从请求中读取 SessionID，然后根据 SessionID 找到对应的 Session 对象。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意：</span><br><span class="hljs-comment">//流程中的 Cookie 是容器自动生成的，它的 maxAge 属性取值为 -1，表示仅当前浏览器有效。</span><br><span class="hljs-comment">//浏览器关闭时，对应的 Session 并没有失效，但此时与此 Session 对应的 Cookie 已失效，导致浏览器无法再通过 Cookie 获取服务器端的 Session 对象。</span><br><span class="hljs-comment">//同一浏览器的不同窗口共享同一 Session 对象，但不同浏览器窗口之间不能共享 Session 对象。</span><br></code></pre></td></tr></table></figure><p>Session既然是为了标识一次会话，那么此次会话就应该有一个唯一的标志，这个标志就是 sessionld。 </p><p>每当一次请求到达服务器，如果开启了会话（访问了session)，服务器第一步会查看是否从客户端 回传一个名为SESSIONID的cookie,如果没有则认为这是一次新的会话，会创建一个新的session对 象，并用唯一的sessionld为此次会话做一个标志。如果有IESSIONID这个cookiel回传，服务器则会根 据JSESSIONID这个值去查看是否含有id为SESSION值的session对象，如果没有则认为是一个新的会 话，重新创建一个新的session对象，并标志此次会话；如果找到了相应的session对象，则认为是之 前标志过的一次会话，返回该session对象，数据达到共享。 </p><p>这里提到一个叫做SESSIONID的cookie,这是一个比较特殊的cookie,当用户请求服务器时，如果 访问了session,则服务器会创建一个名为SESSIONID,值为获取到的session(无论是获取到的还是 新创建的)的sessionld的cookie对象，并添加到response对象中，响应给客户端，有效时间为关闭 浏览器。 </p><p><strong>所以Session的底层依赖Cookie来实现.</strong></p><h3 id="Session-API"><a href="#Session-API" class="headerlink" title="Session API"></a>Session API</h3><p>Session 对象由服务器创建，通过 HttpServletRequest.getSession() 方法可以获得 HttpSession 对象，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取session对象HttpSession session=request.getSession();</span><br></code></pre></td></tr></table></figure><p>HttpSession 接口定义了一系列对 </p><h3 id="Session-对象操作的方法"><a href="#Session-对象操作的方法" class="headerlink" title="Session 对象操作的方法"></a>Session 对象操作的方法</h3><p>，如下表。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>long</td><td>getCreationTime()</td><td>返回创建 Session 的时间。</td></tr><tr><td>String</td><td>getId()</td><td>返回获取 Seesion 的唯一的 ID。</td></tr><tr><td>long</td><td>getLastAccessedTime()</td><td>返回客户端上一次发送与此 Session 关联的请求的时间。(获取最后一次访问时间)</td></tr><tr><td>boolean</td><td>isNew()</td><td>判断是否是新的Session对象</td></tr><tr><td>int</td><td>getMaxInactiveInterval()</td><td>返回在无任何操作的情况下，Session 失效的时间，以秒为单位。</td></tr><tr><td>ServletContext</td><td>getServletContext()</td><td>返回 Session 所属的 ServletContext 对象。</td></tr><tr><td>void</td><td>invalidate()</td><td>使 Session 失效。</td></tr><tr><td>void</td><td>setMaxInactiveInterval(int interval)</td><td>指定在无任何操作的情况下，Session 失效的时间，以秒为单位。负数表示 Session 永远不会失效。</td></tr></tbody></table><h3 id="Session的域对象"><a href="#Session的域对象" class="headerlink" title="Session的域对象"></a>Session的域对象</h3><p>Session 用来表示一次会话，在一次会话中数据是可以共享的，这时 session 作为域对象存在，可以 通过 setAttribute(name,value) 方法向域对象中添加数据，通过 getAttribute(name) 从域对象中获取 数据，通过 removeAttribute(name) 从域对象中移除数据。</p><p>在 javax.servlet.http.HttpSession 接口中定义了一系列操作属性的方法，如下表。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th align="left">描述</th></tr></thead><tbody><tr><td>void</td><td>setAttribute(String name, Object o)</td><td align="left">把一个 Java 对象与一个属性名绑定，并将它作为一个属性存放到 Session 对象中。 参数 name 为属性名，参数 object 为属性值。</td></tr><tr><td>Object</td><td>getAttribute(String name)</td><td align="left">根据指定的属性名 name，返回 Session 对象中对应的属性值。</td></tr><tr><td>void</td><td>removeAttribute(String name)</td><td align="left">从 Session 对象中移除属性名为 name 的属性。</td></tr><tr><td>Enumeration</td><td>getAttributeNames()</td><td align="left">用于返回 Session 对象中的所有属性名的枚举集合。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取session对象</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-comment">// 设置session域对象</span><br>session.setAttribute(<span class="hljs-string">&quot;uname&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br><span class="hljs-comment">// 获取指定名称的session域对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">uname</span> <span class="hljs-operator">=</span> (String) request.getAttribute(<span class="hljs-string">&quot;uname&quot;</span>);<br><span class="hljs-comment">// 移除指定名称的session域对象</span><br>session.removeAttribute(<span class="hljs-string">&quot;uname&quot;</span>);<br></code></pre></td></tr></table></figure><p>数据存储在 session 域对象中，当 session 对象不存在了，或者是两个不同的 session 对象时，数据 也就不能共享了。这就不得不谈到 session 的生命周期。</p><p>同一个request,request域对象可以共享,言外之意,不同的request拿不到不属于他的request域对象例如request.setAttribute(“uname”,”admin),假设重定向网页(前面我们得知重定向是两次请求),request.getAttribute(“uname”)就得不到想要的数据;</p><p>而Session作为会话,session.setAttribute(“uname”,”admin”);重定向后还是同一个Session,可以同String uname &#x3D; (String) session.getAttribute(“uname”);得到想要的数据内容.</p><h3 id="Session-的生命周期"><a href="#Session-的生命周期" class="headerlink" title="Session 的生命周期"></a>Session 的生命周期</h3><h4 id="Session-对象创建"><a href="#Session-对象创建" class="headerlink" title="Session 对象创建"></a>Session 对象创建</h4><p>Session 对象在容器第一次调用 request.getSession() 方法时创建。</p><blockquote><p>值得注意的是，当客户端访问的 Web 资源是 HTML，CSS，图片等静态资源时，服务器不会创建 Session 对象。</p></blockquote><h4 id="Session-对象销毁"><a href="#Session-对象销毁" class="headerlink" title="Session 对象销毁"></a>Session 对象销毁</h4><h4 id="Session-对象在如下-3-种情况下会被销毁："><a href="#Session-对象在如下-3-种情况下会被销毁：" class="headerlink" title="Session 对象在如下 3 种情况下会被销毁："></a>Session 对象在如下 3 种情况下会被销毁：</h4><ul><li><p>Session 过期；</p><p><strong>默认时间到期</strong></p><p>当客户端第一次请求 servlet 并且操作 session 时，session 对象生成，Tomcat 中 session 默认的存 活时间为 30min，即你不操作界面的时间，一旦有操作，session 会重新计时。 那么 session 的默认时间可以改么？答案是肯定的。 可以在 Tomcat 中的 conf 目录下的 web.xml 文件中进行修改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- session 默认的最大不活动时间。单位：分钟。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><span class="hljs-comment">&lt;!--配置为30min,正常情况不建议配置,自己配置属于修改tomcat默认配置了,一改则这个项目下Session都被改动--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>自己设定到期时间</strong> </p><p>当然除了以上的修改方式外，我们也可以在程序中自己设定 session 的生命周期，通过 <strong>session.setMaxInactiveInterval(int)</strong> 来设定 session 的最大不活动时间，<strong>单位为秒</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取session对象</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();ni<br><span class="hljs-comment">// 设置session的最大不活动时间</span><br>session.setMaxInactiveInterval(<span class="hljs-number">15</span>); <span class="hljs-comment">// 15秒</span><br>session.getMaxInactiveInterval;<span class="hljs-comment">//查看当前Session对象的最大不活动时间</span><br></code></pre></td></tr></table></figure><p>当然我们也可以通过 getMaxInactiveInterval() 方法来查看当前 Session 对象的最大不活动时间。</p><p>&#x2F;&#x2F; 获取session的最大不活动时间 int time &#x3D; session.getMaxInactiveInterval();</p></li><li><p>调用 session.invalidate() 方法，手动销毁 Session；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 销毁session对象,退出登录可以尝试使用这个方法,主要使用这一招,上面两种看看寄就行</span><br>session.invalidate();<br></code></pre></td></tr></table></figure></li><li><p>服务器关闭或者应用被卸载或者浏览器关闭。</p></li></ul><h3 id="Session-与-Cookie-对比"><a href="#Session-与-Cookie-对比" class="headerlink" title="Session 与 Cookie 对比"></a>Session 与 Cookie 对比</h3><p><strong>Session 和 Cookie 都属于会话技术，都能帮助服务器保存和跟踪用户状态，但两者也存在差异，如下表。</strong></p><table><thead><tr><th>不同点</th><th>Cookie</th><th>Session</th></tr></thead><tbody><tr><td>存储位置不同</td><td>Cookie 将数据存放在客户端浏览器内存中或硬盘上。</td><td>Session 将数据存储在服务器端。</td></tr><tr><td>大小和数量限制不同</td><td>浏览器对 Cookie 的大小和数量有限制。</td><td>Session 的大小和数量一般不受限制。</td></tr><tr><td>存放数据类型不同</td><td>Cookie 中保存的是字符串。</td><td>Session 中保存的是对象。</td></tr><tr><td>安全性不同</td><td>Cookie 明文传递，安全性低，他人可以分析存放在本地的 Cookie 并进行 Cookie 欺骗。</td><td>Session 存在服务器端，安全性较高。</td></tr><tr><td>对服务器造成的压力不同</td><td>Cookie 保存在客户端，不占用服务器资源。</td><td>Session 保存在服务端，每一个用户独占一个 Session。若并发访问的用户十分多，就会占用大量服务端资源。</td></tr><tr><td>跨域支持上不同</td><td>Cookie 支持跨域名访问。</td><td>Session 不支持跨域名访问。</td></tr></tbody></table><h2 id="ServletContext-也称作application应用对象"><a href="#ServletContext-也称作application应用对象" class="headerlink" title="ServletContext(也称作application应用对象)"></a>ServletContext(也称作application应用对象)</h2><h3 id="获取ServletContext对象"><a href="#获取ServletContext对象" class="headerlink" title="获取ServletContext对象"></a>获取ServletContext对象</h3><p>获取ServletContext对象的途径有很多。比如：</p><h4 id="1-通过request对象获取"><a href="#1-通过request对象获取" class="headerlink" title="1.通过request对象获取"></a>1.通过request对象获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletContext servletContext request.getservletContext();<br></code></pre></td></tr></table></figure><h4 id="2-通过session对象获取"><a href="#2-通过session对象获取" class="headerlink" title="2.通过session对象获取"></a>2.通过session对象获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br></code></pre></td></tr></table></figure><h4 id="3-通过servletConfig对象获取，在Servlet标准中提供了ServletConfig方法"><a href="#3-通过servletConfig对象获取，在Servlet标准中提供了ServletConfig方法" class="headerlink" title="3.通过servletConfig对象获取，在Servlet标准中提供了ServletConfig方法"></a>3.通过servletConfig对象获取，在Servlet标准中提供了ServletConfig方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletConfig</span> <span class="hljs-variable">servletConfig</span> <span class="hljs-operator">=</span> getServletConfig();<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> servletConfig.getServletContext()<br></code></pre></td></tr></table></figure><h4 id="4-直接获取，Servlet类中提供了直接获取ServletContext对象的方法"><a href="#4-直接获取，Servlet类中提供了直接获取ServletContext对象的方法" class="headerlink" title="4.直接获取，Servlet类中提供了直接获取ServletContext对象的方法"></a>4.直接获取，Servlet类中提供了直接获取ServletContext对象的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> getServletContext();<br></code></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取项目存放的真实路径</span><br><span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-comment">// 获取当前服务器的版本信息</span><br><span class="hljs-type">String</span> <span class="hljs-variable">serverInfo</span> <span class="hljs-operator">=</span> request.getServletContext().getServerInfo();<br></code></pre></td></tr></table></figure><h3 id="ServletContext域对象"><a href="#ServletContext域对象" class="headerlink" title="ServletContext域对象"></a>ServletContext域对象</h3><p>ServletContext 也可当做域对象来使用，通过向 ServletContext 中存取数据，可以使得整个应用程序 共享某些数据。当<strong>然不建议存放过多数据，因为 ServletContext 中的数据一旦存储进去没有手动移除将 会一直保存</strong>。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>setAttribute(String name, Object object)</td><td>把一个 Java 对象与一个属性名绑定，并将它作为一个属性存放到 ServletContext 中。 参数 name 为属性名，参数 object 为属性值。</td></tr><tr><td>void</td><td>removeAttribute(String name)</td><td>从 ServletContext 中移除属性名为 name 的属性。</td></tr><tr><td>Object</td><td>getAttribute(String name)</td><td>根据指定的属性名 name，返回 ServletContext 中对应的属性值。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取ServletContext对象</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getServletContext();<br><span class="hljs-comment">// 设置域对象</span><br>servletContext.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>);<br><span class="hljs-comment">// 获取域对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) servletContext.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">// 移除域对象</span><br>servletContext.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="ServletContext-属性与上下文初始化参数对比"><a href="#ServletContext-属性与上下文初始化参数对比" class="headerlink" title="ServletContext 属性与上下文初始化参数对比"></a>ServletContext 属性与上下文初始化参数对比</h3><p>虽然 ServletContext 的属性与上下文初始化参数都是存放在 ServletContext 对象中，但它们是不同的。</p><table><thead><tr><th>不同点</th><th>ServletContext 的属性</th><th>上下文初始化参数</th></tr></thead><tbody><tr><td>创建方式</td><td>ServletContext 的属性通过调用 ServletContext 接口的 setAttribute() 方法创建</td><td>上下文初始化参数通过 web.xml 使用 <context-param> 元素配置</td></tr><tr><td>可进行的操作</td><td>ServletContext 的属性可以通过 ServletContext 接口的方法进行读取、新增、修改、移除等操作</td><td>上下文初始化参数在容器启动后只能被读取，不能进行新增、修改和移除操作</td></tr><tr><td>生命周期</td><td>ServletContext 中属性的生命周期从创建开始，到该属性被移除（remove）或者容器关闭结束</td><td>上下文初始化参数的生命周期，从容器启动开始，到 Web 应用被卸载或容器关闭结束</td></tr><tr><td>作用</td><td>使用 ServletContext 中的属性可以实现 Servlet 之间的数据通讯</td><td>使用上下文初始化参数无法实现数据通讯</td></tr></tbody></table><h3 id="Servlet-的三大域对象对比"><a href="#Servlet-的三大域对象对比" class="headerlink" title="Servlet 的三大域对象对比"></a>Servlet 的三大域对象对比</h3><h4 id="1-request域对象"><a href="#1-request域对象" class="headerlink" title="1.request域对象"></a>1.request域对象</h4><p>在一次请求中有效。<strong>请求转发有效，重定向失效</strong>。</p><h4 id="2-session-域对象"><a href="#2-session-域对象" class="headerlink" title="2.session:域对象"></a>2.session:域对象</h4><p>在一次会话中有效。<strong>请求转发和重定向都有效，session销毁后失效</strong>。</p><h4 id="3-servletContext域对象"><a href="#3-servletContext域对象" class="headerlink" title="3.servletContext域对象"></a>3.servletContext域对象</h4><p>在整个应用程序中有效。<strong>服务器关闭后失效。</strong></p><p>Session 、request 以及 ServletContext 合称为 Servlet 的三大域对象，它们都能保存和传递数据，但是三者也存在许多差异，如下表。</p><table><thead><tr><th>不同</th><th align="center">request</th><th align="center">Session</th><th align="center">ServletContext</th></tr></thead><tbody><tr><td>类型</td><td align="center">javax.servlet.http.HttpServletRequest</td><td align="center">javax.servlet.http.HttpSession</td><td align="center">javax.servlet.ServletContext</td></tr><tr><td>创建</td><td align="center">客户端向容器发送请求时创建。</td><td align="center">容器第一次调用 getSession() 方法时创建。</td><td align="center">Servlet 容器启动时创建。</td></tr><tr><td>销毁</td><td align="center">容器对这次请求做出响应后销毁。</td><td align="center">Session 销毁的时机： 关闭服务器或应用被卸载。Session 过期，默认为 30 分钟。手动调用 session.invalidate() 方法进行销毁。</td><td align="center">容器关闭或者 Web 应用被移除时销毁。</td></tr><tr><td>有效范围</td><td align="center">只对当前请求涉及的 Servlet 有效。</td><td align="center">Session 对本次会话期间的所有 Servlet 都有效。</td><td align="center">对整个 Web 应用内的所有 Servlet 有效。</td></tr><tr><td>数量</td><td align="center">Web 应用中的所有 Servlet 实例都可以有多个 request 对象。</td><td align="center">Web 应用中可以有多个 Session，多个 Servet 实例可以共享同一 Session 对象。</td><td align="center">在整个 Web 应用中只有一个 Context 对象。</td></tr><tr><td>数据共享</td><td align="center">每一次请求都是一个新的 request 对象。 通过和请求转发的配合使用可以实现一次请求中 Web 组件之间共享的数据。</td><td align="center">每一次会话都是一个新的 Session 对象。 通过 Session 域对象可以实现一次会话中的多个请求之间共享数据。</td><td align="center">在一个应用中有且只有一个 Context 对象，作用于整个 Web 应用，可以实现多次会话之间的数据共享。</td></tr></tbody></table><p>在能够满足自己使用需求的基础上,建议使用较小的域对象,例如我们今后会经常使用request域对象,而类似ServletContext域对象应用于整个服务器,正常不要使用.</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Servlet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述JAVA的List与HashMap</title>
    <link href="/2022/08/01/%E7%AE%80%E8%BF%B0JAVA%E7%9A%84List%E4%B8%8EHashMap/"/>
    <url>/2022/08/01/%E7%AE%80%E8%BF%B0JAVA%E7%9A%84List%E4%B8%8EHashMap/</url>
    
    <content type="html"><![CDATA[<h1 id="简述JAVA的Set"><a href="#简述JAVA的Set" class="headerlink" title="简述JAVA的Set"></a>简述JAVA的Set</h1><p>Set 即集合，该数据结构不允许元素重复且无序。JAVA对Set有三种实现方式： HashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较hashCode，相同后再利用equals比较， 查询O(1) LinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。 TreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适 的位置，保证插入后的集合仍然有序。查询O(logn)</p><h1 id="简述java的TreeMap"><a href="#简述java的TreeMap" class="headerlink" title="简述java的TreeMap"></a>简述java的TreeMap</h1><p>TreeMap是底层利用红黑树实现的Map结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、 删除、遍历时间复杂度都为O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输 出，红黑树可以按照键的值的大小有序输出。</p><h1 id="简述JAVA的List"><a href="#简述JAVA的List" class="headerlink" title="简述JAVA的List"></a>简述JAVA的List</h1><p>List是一个有序队列，在JAVA中有两种实现方式: ArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组， 把原有数组复制到新数组。 LinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。</p><h1 id="简述JAVA的HashMap"><a href="#简述JAVA的HashMap" class="headerlink" title="简述JAVA的HashMap"></a>简述JAVA的HashMap</h1><p>JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表&#x2F;红黑树。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。 HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上。 table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链 表，Node&#x2F;Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。在JDK8后链表超过8会转 化为红黑树。 若当前数据&#x2F;总数据容量&gt;负载因子，Hashmap将执行扩容操作。 默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1&lt;&lt; 30 、默认加载因子为 0.75。</p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述JAVA的Set</title>
    <link href="/2022/07/31/%E7%AE%80%E8%BF%B0Java%E7%9A%84Set/"/>
    <url>/2022/07/31/%E7%AE%80%E8%BF%B0Java%E7%9A%84Set/</url>
    
    <content type="html"><![CDATA[<h1 id="简述JAVA的Set"><a href="#简述JAVA的Set" class="headerlink" title="简述JAVA的Set"></a>简述JAVA的Set</h1><p>Set 即集合，该数据结构不允许元素重复且无序。JAVA对Set有三种实现方式： HashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较hashCode，相同后再利用equals比较， 查询O(1) LinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。 TreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适 的位置，保证插入后的集合仍然有序。查询O(logn)</p><h1 id="简述java的TreeMap"><a href="#简述java的TreeMap" class="headerlink" title="简述java的TreeMap"></a>简述java的TreeMap</h1><p>TreeMap是底层利用红黑树实现的Map结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、 删除、遍历时间复杂度都为O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输 出，红黑树可以按照键的值的大小有序输出。</p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 22. 链表中倒数第k个节点</title>
    <link href="/2022/07/30/%E5%89%91%E6%8C%87Offer22%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <url>/2022/07/30/%E5%89%91%E6%8C%87Offer22%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-22-链表中倒数第k个节点"><a href="#剑指-Offer-22-链表中倒数第k个节点" class="headerlink" title="剑指 Offer 22. 链表中倒数第k个节点"></a><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指 Offer 22. 链表中倒数第k个节点</a></h1><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。</p><p><strong>示例：</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs clean">给定一个链表: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>, 和 k = <span class="hljs-number">2.</span><br><br>返回链表 <span class="hljs-number">4</span>-&gt;<span class="hljs-number">5.</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getKthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">former</span> <span class="hljs-operator">=</span> head, latter = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++)<br>            former = former.next;<br>        <span class="hljs-keyword">while</span>(former != <span class="hljs-literal">null</span>) &#123;<br>            former = former.next;<br>            latter = latter.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> latter;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:ArrayList、Vector和LinkedList有什么共同点与区别</title>
    <link href="/2022/07/30/ArrayList%E4%B8%8EVector%E5%92%8CLinkedList%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B1%E5%90%8C%E7%82%B9%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/07/30/ArrayList%E4%B8%8EVector%E5%92%8CLinkedList%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B1%E5%90%8C%E7%82%B9%E4%B8%8E%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="ArrayList、Vector和LinkedList有什么共同点与区别？"><a href="#ArrayList、Vector和LinkedList有什么共同点与区别？" class="headerlink" title="ArrayList、Vector和LinkedList有什么共同点与区别？"></a>ArrayList、Vector和LinkedList有什么共同点与区别？</h1><ol><li>ArrayList、Vector和LinkedList都是可伸缩的数组，即可以动态改变长度的数组。 </li><li>ArrayList和Vector都是基于存储元素的Object[] array来实现的，它们会在内存中开辟一块连续的空 间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较 低。当存储元素超过容器的初始化容量大小，ArrayList与Vector均会进行扩容。 </li><li>Vector是线程安全的，其大部分方法是直接或间接同步的。ArrayList不是线程安全的，其方法不具 有同步性质。LinkedList也不是线程安全的。</li><li>LinkedList采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入 元素的时候不需要对数据进行移动，插入效率较高。</li></ol>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一练:剑指 Offer 46. 把数字翻译成字符串</title>
    <link href="/2022/07/29/%E5%89%91%E6%8C%87%20Offer%2046.%20%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/07/29/%E5%89%91%E6%8C%87%20Offer%2046.%20%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-46-把数字翻译成字符串"><a href="#剑指-Offer-46-把数字翻译成字符串" class="headerlink" title="剑指 Offer 46. 把数字翻译成字符串"></a><a href="https://leetcode.cn/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/">剑指 Offer 46. 把数字翻译成字符串</a></h1><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p><p>示例 1:</p><figure class="highlight 1c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs 1c">输入: <span class="hljs-number">12258</span><br>输出: <span class="hljs-number">5</span><br>解释: <span class="hljs-number">12258</span>有<span class="hljs-number">5</span>种不同的翻译，分别是<span class="hljs-string">&quot;bccfi&quot;</span>, <span class="hljs-string">&quot;bwfi&quot;</span>, <span class="hljs-string">&quot;bczi&quot;</span>, <span class="hljs-string">&quot;mcfi&quot;</span>和<span class="hljs-string">&quot;mzi&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">translateNum</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> String.valueOf(num);<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[s.length()+<span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= s.length(); i ++)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> s.substring(i-<span class="hljs-number">2</span>, i);<br>            <span class="hljs-keyword">if</span>(temp.compareTo(<span class="hljs-string">&quot;10&quot;</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; temp.compareTo(<span class="hljs-string">&quot;25&quot;</span>) &lt;= <span class="hljs-number">0</span>)<br>                dp[i] = dp[i-<span class="hljs-number">1</span>] + dp[i-<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">else</span><br>                dp[i] = dp[i-<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[s.length()];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从下周开始,每日一练改成每周一练</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述JAVA的List</title>
    <link href="/2022/07/29/%E7%AE%80%E8%BF%B0JAVA%E7%9A%84List/"/>
    <url>/2022/07/29/%E7%AE%80%E8%BF%B0JAVA%E7%9A%84List/</url>
    
    <content type="html"><![CDATA[<h1 id="简述JAVA的List"><a href="#简述JAVA的List" class="headerlink" title="简述JAVA的List"></a>简述JAVA的List</h1><p>List是一个有序队列，在JAVA中有两种实现方式:</p><p> ArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组， 把原有数组复制到新数组。 </p><p>LinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。</p><h1 id="Java中线程安全的基本数据结构有哪些"><a href="#Java中线程安全的基本数据结构有哪些" class="headerlink" title="Java中线程安全的基本数据结构有哪些"></a>Java中线程安全的基本数据结构有哪些</h1><p>HashTable: 哈希表的线程安全版，效率低 </p><p>ConcurrentHashMap：哈希表的线程安全版，效率高，用于替代HashTable </p><p>Vector：线程安全版Arraylist </p><p>Stack：线程安全版栈 BlockingQueue及其子类：线程安全版队列</p><h1 id="为何HashMap线程不安全"><a href="#为何HashMap线程不安全" class="headerlink" title="为何HashMap线程不安全"></a>为何HashMap线程不安全</h1><p>在JDK1.7中，HashMap采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。 </p><p>虽然JDK1.8采用了尾插法解决了这个问题，但是并发下的put操作也会使前一个key被后一个key覆盖。 由于HashMap有扩容机制存在，也存在A线程进行扩容后，B线程执行get方法出现失误的情况。</p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 42. 连续子数组的最大和</title>
    <link href="/2022/07/28/%E5%89%91%E6%8C%87Offer%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/"/>
    <url>/2022/07/28/%E5%89%91%E6%8C%87Offer%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-42-连续子数组的最大和"><a href="#剑指-Offer-42-连续子数组的最大和" class="headerlink" title="剑指 Offer 42. 连续子数组的最大和"></a><a href="https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a></h1><p>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。</p><p>要求时间复杂度为O(n)。</p><p><strong>示例1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java">输入: nums = [-<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">5</span>,<span class="hljs-number">4</span>]<br>输出: <span class="hljs-number">6</span><br>解释: 连续子数组 [<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>] 的和最大，为 <span class="hljs-number">6</span>。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            nums[i] += Math.max(nums[i - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>);<br>            res = Math.max(res, nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>动态规划是本题的最优解法，以下按照标准流程解题。</p><p>动态规划解析：<br>状态定义： 设动态规划列表 dp ，dp[i] 代表以元素 nums[i] 为结尾的连续子数组最大和。</p><p>为何定义最大和 dp[i] 中必须包含元素 nums[i] ：保证 dp[i] 递推到 dp[i+1] 的正确性；如果不包含 nums[i] ，递推时则不满足题目的 连续子数组 要求。<br>转移方程： 若 dp[i−1]≤0 ，说明 dp[i−1] 对 dp[i]产生负贡献，即 dp[i-1] + nums[i]还不如nums[i] 本身大。</p><p>当 dp[i - 1] &gt; 0 时：执行 ]dp[i]&#x3D;dp[i−1]+nums[i] ；<br>当 dp[i−1]≤0 时：执行dp[i]&#x3D;nums[i] ；<br>初始状态： dp[0] &#x3D; nums[0]，即以 nums[0] 结尾的连续子数组最大和为 nums[0] 。</p><p>返回值： 返回 dp 列表中的最大值，代表全局最大值。</p><p><a href="https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/solution/mian-shi-ti-42-lian-xu-zi-shu-zu-de-zui-da-he-do-2/">参考链接</a></p><h1 id="剑指-Offer-47-礼物的最大价值"><a href="#剑指-Offer-47-礼物的最大价值" class="headerlink" title="剑指 Offer 47. 礼物的最大价值"></a><a href="https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/">剑指 Offer 47. 礼物的最大价值</a></h1><p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p><p>示例 1:</p><p>输入: </p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,3,1]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,5,1]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[4,2,1]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><p>输出: 12<br>解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物</p><p>输出: 12<br>解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxValue</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> grid.length, n = grid[<span class="hljs-number">0</span>].length;<br><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;m;i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(i ==<span class="hljs-number">0</span>&amp;&amp;j==<span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i ==<span class="hljs-number">0</span>&amp;&amp;j&gt;<span class="hljs-number">0</span>) grid[i][j] += grid[i][j-<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;j ==<span class="hljs-number">0</span>) grid[i][j] += grid[i-<span class="hljs-number">1</span>][j];<br>                <span class="hljs-keyword">else</span> grid[i][j] += Math.max(grid[i-<span class="hljs-number">1</span>][j],grid[i][j-<span class="hljs-number">1</span>]);   <br>            &#125;    <br>    <span class="hljs-keyword">return</span> grid[m-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h4><p>题目说明：从棋盘的左上角开始拿格子里的礼物，并每次 向右 或者 向下 移动一格、直到到达棋盘的右下角。<br>根据题目说明，易得某单元格只可能从上边单元格或左边单元格到达。</p><p>设 f(i, j) 为从棋盘左上角走至单元格 (i ,j)的礼物最大累计价值，易得到以下递推关系：f(i,j) 等于f(i,j−1) 和 f(i-1,j)中的较大值加上当前单元格礼物价值 grid(i,j)</p><p>f(i,j)&#x3D;max[f(i,j−1),f(i−1,j)]+grid(i,j)</p><p>因此，可用动态规划解决此问题，以上公式便为转移方程。<br><a href="https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/solution/mian-shi-ti-47-li-wu-de-zui-da-jie-zhi-dong-tai-gu/">参考链接</a></p><h1 id="剑指-Offer-63-股票的最大利润"><a href="#剑指-Offer-63-股票的最大利润" class="headerlink" title="剑指 Offer 63. 股票的最大利润"></a><a href="https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/">剑指 Offer 63. 股票的最大利润</a></h1><p>昨天的题目,和今天的属于一类,所以复制过来了</p><p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</p><p> 示例 1:</p><p>输入: [7,1,5,3,6,4]<br>输出: 5<br>解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。<br>     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格。</p><p>示例 2:</p><p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span>[] prices)</span> &#123;<br>        <span class="hljs-keyword">if</span>(prices.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, min = prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; prices.length; i ++)&#123;<br>            min = Math.min(min, prices[i-<span class="hljs-number">1</span>]);<br>            res = Math.max(res, prices[i] - min);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h4><p>设共有 n 天，第 a 天买，第 b 天卖，则需保证 a&lt;b ；可推出交易方案数共有：<br>(n−1)+(n−2)+⋯+2+1&#x3D;n(n−1)&#x2F;2</p><p>因此，暴力法的时间复杂度为 O(n^2)。考虑使用动态规划降低时间复杂度，以下按照流程解题。</p><h4 id="动态规划解析："><a href="#动态规划解析：" class="headerlink" title="动态规划解析："></a>动态规划解析：</h4><p>状态定义： 设动态规划列表 dp ，dp[i] 代表以prices[i] 为结尾的子数组的最大利润（以下简称为 前 i日的最大利润 ）。<br>转移方程： 由于题目限定 “买卖该股票一次” ，因此前 i 日最大利润 dp[i] 等于前 i−1 日最大利润 dp[i−1] 和第 i 日卖出的最大利润中的最大值。</p><p>前i日最大利润&#x3D;max(前(i−1)日最大利润,第i日价格−前i日最低价格)</p><p>dp[i]&#x3D;max(dp[i−1],prices[i]−min(prices[0:i]))</p><p>初始状态： dp[0]&#x3D;0 ，即首日利润为 0 ；<br>返回值： dp[n−1] ，其中 n 为 dp 列表长度。</p><p><a href="https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/solution/mian-shi-ti-63-gu-piao-de-zui-da-li-run-dong-tai-2/">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:HashMap和Hashtable的区别</title>
    <link href="/2022/07/28/HashMap%E5%92%8CHashtable%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/07/28/HashMap%E5%92%8CHashtable%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="HashMap和Hashtable有什么区别？"><a href="#HashMap和Hashtable有什么区别？" class="headerlink" title="HashMap和Hashtable有什么区别？"></a>HashMap和Hashtable有什么区别？</h1><p>1.HashMap是Hashtable的轻量级实现，HashMap允许key和value为null，但最多允许一条记录的key 为null.而HashTable不允许。<br>2.HashTable中的方法是线程安全的，而HashMap不是。在多线程访问HashMap需要提供额外的同步 机制。<br>3.Hashtable使用Enumeration进行遍历，HashMap使用Iterator进行遍历。</p><h1 id="为何HashMap线程不安全"><a href="#为何HashMap线程不安全" class="headerlink" title="为何HashMap线程不安全"></a>为何HashMap线程不安全</h1><p>在JDK1.7中，HashMap采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。 </p><p>虽然JDK1.8采用了尾插法解决了这个问题，但是并发下的put操作也会使前一个key被后一个key覆盖。 由于HashMap有扩容机制存在，也存在A线程进行扩容后，B线程执行get方法出现失误的情况。</p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:ArrayList、Vector和LinkedList有什么共同点与区别？</title>
    <link href="/2022/07/27/ArrayList%E5%92%8CVector%E5%92%8CLinkedList%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B1%E5%90%8C%E7%82%B9%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/07/27/ArrayList%E5%92%8CVector%E5%92%8CLinkedList%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B1%E5%90%8C%E7%82%B9%E4%B8%8E%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="ArrayList、Vector和LinkedList有什么共同点与区别？"><a href="#ArrayList、Vector和LinkedList有什么共同点与区别？" class="headerlink" title="ArrayList、Vector和LinkedList有什么共同点与区别？"></a>ArrayList、Vector和LinkedList有什么共同点与区别？</h1><ol><li>ArrayList、Vector和LinkedList都是可伸缩的数组，即可以动态改变长度的数组。 </li><li>ArrayList和Vector都是基于存储元素的Object[] array来实现的，它们会在内存中开辟一块连续的空间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较 低。当存储元素超过容器的初始化容量大小，ArrayList与Vector均会进行扩容。 </li><li>Vector是线程安全的，其大部分方法是直接或间接同步的。ArrayList不是线程安全的，其方法不具 有同步性质。LinkedList也不是线程安全的。 </li><li>LinkedList采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入 元素的时候不需要对数据进行移动，插入效率较高。</li></ol>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 10- I. 斐波那契数列</title>
    <link href="/2022/07/27/%E5%89%91%E6%8C%87Offer10-I.%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <url>/2022/07/27/%E5%89%91%E6%8C%87Offer10-I.%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-10-I-斐波那契数列"><a href="#剑指-Offer-10-I-斐波那契数列" class="headerlink" title="剑指 Offer 10- I. 斐波那契数列"></a><a href="https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/">剑指 Offer 10- I. 斐波那契数列</a></h1><p>写一个函数，输入 <code>n</code> ，求斐波那契（Fibonacci）数列的第 <code>n</code> 项（即 <code>F(N)</code>）。斐波那契数列的定义如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span> = <span class="hljs-number">0</span>,   <span class="hljs-built_in">F</span>(<span class="hljs-number">1</span>) = <span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">F</span><span class="hljs-params">(N)</span></span> = <span class="hljs-built_in">F</span>(N - <span class="hljs-number">1</span>) + <span class="hljs-built_in">F</span>(N - <span class="hljs-number">2</span>), 其中 N &gt; <span class="hljs-number">1</span>.<br></code></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：n <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：n <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br>输出：<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>斐波那契数列的定义是 f(n + 1) &#x3D; f(n) + f(n - 1) ，生成第 n 项的做法有以下几种：</p><p>递归法：<br>原理： 把 f(n) 问题的计算拆分成 f(n-1) 和f(n−2) 两个子问题的计算，并递归，以f(0) 和 f(1)为终止条件。<br>缺点： 大量重复的递归计算，例如f(n) 和f(n−1) 两者向下递归需要 各自计算 f(n - 2)的值。<br>记忆化递归法：<br>原理： 在递归法的基础上，新建一个长度为 n 的数组，用于在递归时存储 f(0) 至 f(n) 的数字值，重复遇到某数字则直接从数组取用，避免了重复的递归计算。<br>缺点： 记忆化存储需要使用 O(N) 的额外空间。<br>动态规划：<br>原理： 以斐波那契数列性质 f(n + 1) &#x3D; f(n) + f(n - 1)为转移方程。<br>从计算效率、空间复杂度上看，动态规划是本题的最佳解法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[Math.max(n + <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            dp[i] = (dp[i-<span class="hljs-number">1</span>] + dp[i-<span class="hljs-number">2</span>])%<span class="hljs-number">1000000007</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/solution/mian-shi-ti-10-i-fei-bo-na-qi-shu-lie-dong-tai-gui/">参考链接</a></p><h1 id="剑指-Offer-10-II-青蛙跳台阶问题"><a href="#剑指-Offer-10-II-青蛙跳台阶问题" class="headerlink" title="剑指 Offer 10- II. 青蛙跳台阶问题"></a><a href="https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">剑指 Offer 10- II. 青蛙跳台阶问题</a></h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p>示例 1：输入：n &#x3D; 2<br>输出：2<br>示例 2：</p><p>输入：n &#x3D; 7<br>输出：21<br>示例 3：</p><p>输入：n &#x3D; 0<br>输出：1</p><p>代码几乎和上一题一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numWays</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[Math.max(n + <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; i &lt;= n; i++) &#123;<br>            dp[i] = (dp[i-<span class="hljs-number">1</span>] + dp[i-<span class="hljs-number">2</span>])%<span class="hljs-number">1000000007</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h4><p>此类求 多少种可能性 的题目一般都有 递推性质 ，即 f(n) 和 f(n−1)…f(1) 之间是有联系的。</p><p>设跳上 n级台阶有 f(n) 种跳法。在所有跳法中，青蛙的最后一步只有两种情况： 跳上 1 级或 2 级台阶。<br>当为 1 级台阶： 剩 n−1 个台阶，此情况共有 f(n−1) 种跳法；<br>当为 2 级台阶： 剩 n−2 个台阶，此情况共有 f(n−2) 种跳法。<br>f(n) 为以上两种情况之和，即 f(n)&#x3D;f(n−1)+f(n−2) ，以上递推性质为斐波那契数列。本题可转化为 求斐波那契数列第 n 项的值 ，与 面试题10- I. 斐波那契数列 等价，唯一的不同在于起始数字不同。<br>青蛙跳台阶问题： f(0)&#x3D;1 , f(1)&#x3D;1 , f(2)&#x3D;2 ；<br>斐波那契数列问题： f(0)&#x3D;0 , f(1)&#x3D;1 , f(2)&#x3D;1 。</p><h4 id="动态规划解析："><a href="#动态规划解析：" class="headerlink" title="动态规划解析："></a>动态规划解析：</h4><p>状态定义： 设 dp 为一维数组，其中 dp[i] 的值代表 斐波那契数列第 $i$ 个数字 。<br>转移方程： dp[i + 1] &#x3D; dp[i] + dp[i - 1] ，即对应数列定义 f(n + 1) &#x3D; f(n) + f(n - 1) ；<br>初始状态： dp[0] &#x3D; 1, dp[1] &#x3D; 1 ，即初始化前两个数字；<br>返回值： dp[n] ，即斐波那契数列的第 n 个数字。</p><p><a href="https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/solution/mian-shi-ti-10-ii-qing-wa-tiao-tai-jie-wen-ti-dong/">参考链接</a></p><h1 id="剑指-Offer-63-股票的最大利润"><a href="#剑指-Offer-63-股票的最大利润" class="headerlink" title="剑指 Offer 63. 股票的最大利润"></a><a href="https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/">剑指 Offer 63. 股票的最大利润</a></h1><p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</p><p> 示例 1:</p><p>输入: [7,1,5,3,6,4]<br>输出: 5<br>解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。<br>     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格。</p><p>示例 2:</p><p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span>[] prices)</span> &#123;<br>        <span class="hljs-keyword">if</span>(prices.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, min = prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; prices.length; i ++)&#123;<br>            min = Math.min(min, prices[i-<span class="hljs-number">1</span>]);<br>            res = Math.max(res, prices[i] - min);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h4><p>设共有 n 天，第 a 天买，第 b 天卖，则需保证 a&lt;b ；可推出交易方案数共有：<br>(n−1)+(n−2)+⋯+2+1&#x3D;n(n−1)&#x2F;2</p><p>因此，暴力法的时间复杂度为 O(n^2)。考虑使用动态规划降低时间复杂度，以下按照流程解题。</p><h4 id="动态规划解析：-1"><a href="#动态规划解析：-1" class="headerlink" title="动态规划解析："></a>动态规划解析：</h4><p>状态定义： 设动态规划列表 dp ，dp[i] 代表以prices[i] 为结尾的子数组的最大利润（以下简称为 前 i日的最大利润 ）。<br>转移方程： 由于题目限定 “买卖该股票一次” ，因此前 i 日最大利润 dp[i] 等于前 i−1 日最大利润 dp[i−1] 和第 i 日卖出的最大利润中的最大值。</p><p>前i日最大利润&#x3D;max(前(i−1)日最大利润,第i日价格−前i日最低价格)</p><p>dp[i]&#x3D;max(dp[i−1],prices[i]−min(prices[0:i]))</p><p>初始状态： dp[0]&#x3D;0 ，即首日利润为 0 ；<br>返回值： dp[n−1] ，其中 n 为 dp 列表长度。</p><p><a href="https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/solution/mian-shi-ti-63-gu-piao-de-zui-da-li-run-dong-tai-2/">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一练:剑指 Offer 26. 树的子结构</title>
    <link href="/2022/07/26/%E5%89%91%E6%8C%87%20Offer%2026.%20%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/07/26/%E5%89%91%E6%8C%87%20Offer%2026.%20%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-26-树的子结构"><a href="#剑指-Offer-26-树的子结构" class="headerlink" title="剑指 Offer 26. 树的子结构"></a><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a></h1><p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p><p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p><p>例如:<br>给定的树 A:</p><figure class="highlight livescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs livescript">     <span class="hljs-number">3</span><br>   /   <span class="hljs-string">\</span><br>  <span class="hljs-number">4</span>     <span class="hljs-number">5</span><br> / <span class="hljs-string">\</span><br><span class="hljs-number">1</span>   <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>给定的树 B：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap"> <span class="hljs-number"> 4 </span><br> /<br>1<br></code></pre></td></tr></table></figure><p>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    参考:数据结构与算法的题解比较好懂</span><br><span class="hljs-comment">    死死记住isSubStructure()的定义:判断B是否为A的子结构</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSubStructure</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> &#123;<br>        <span class="hljs-comment">//这个函数对这棵树进行前序遍历：即处理根节点，再递归左子节点，再递归处理右子节点</span><br>        <span class="hljs-comment">//特殊情况是：当A或B是空树的时候 返回false</span><br>        <span class="hljs-comment">//用||关系可以达到 不同顺序遍历的作用</span><br>        <br>        <span class="hljs-comment">// 若A与B其中一个为空,立即返回false</span><br>        <span class="hljs-keyword">if</span>(A == <span class="hljs-literal">null</span> || B == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// B为A的子结构有3种情况,满足任意一种即可:</span><br>        <span class="hljs-comment">// 1.B的子结构起点为A的根节点,此时结果为recur(A,B)</span><br>        <span class="hljs-comment">// 2.B的子结构起点隐藏在A的左子树中,而不是直接为A的根节点,此时结果为isSubStructure(A.left, B)</span><br>        <span class="hljs-comment">// 3.B的子结构起点隐藏在A的右子树中,此时结果为isSubStructure(A.right, B)</span><br>        <span class="hljs-keyword">return</span> recur(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    判断B是否为A的子结构,其中B子结构的起点为A的根节点</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">recur</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> &#123;<br>        <span class="hljs-comment">// 若B走完了,说明查找完毕,B为A的子结构</span><br>        <span class="hljs-keyword">if</span>(B == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// 若B不为空并且A为空或者A与B的值不相等,直接可以判断B不是A的子结构</span><br>        <span class="hljs-keyword">if</span>(A == <span class="hljs-literal">null</span> || A.val != B.val) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 当A与B当前节点值相等,若要判断B为A的子结构</span><br>        <span class="hljs-comment">// 还需要判断B的左子树是否为A左子树的子结构 &amp;&amp; B的右子树是否为A右子树的子结构</span><br>        <span class="hljs-comment">// 若两者都满足就说明B是A的子结构,并且该子结构以A根节点为起点</span><br>        <span class="hljs-keyword">return</span> recur(A.left, B.left) &amp;&amp; recur(A.right, B.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>[参考链接:面试题26. 树的子结构（先序遍历 + 包含判断，清晰图解）](<a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/solution/mian-shi-ti-26-shu-de-zi-jie-gou-xian-xu-bian-li-p/">面试题26. 树的子结构（先序遍历 + 包含判断，清晰图解） - 树的子结构 - 力扣（LeetCode）</a>)</p><h1 id="剑指-Offer-27-二叉树的镜像"><a href="#剑指-Offer-27-二叉树的镜像" class="headerlink" title="剑指 Offer 27. 二叉树的镜像"></a><a href="https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/">剑指 Offer 27. 二叉树的镜像</a></h1><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><p>例如输入：</p><p>   4<br>  &#x2F;  <br> 2   7<br> &#x2F; \  &#x2F; <br>1  3 6  9</p><p>镜像输出:</p><p>   4<br>  &#x2F;  <br> 7   2<br> &#x2F; \  &#x2F; <br>9  6 3  1</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：root = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>]<br>输出：[<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>其实解法和上面的差不多,也是递归,而且代码更为简便,要考虑的更少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">mirrorTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">leftRoot</span> <span class="hljs-operator">=</span> mirrorTree(root.right);<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">rightRoot</span> <span class="hljs-operator">=</span> mirrorTree(root.left);<br>        root.left = leftRoot;<br>        root.right = rightRoot;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-28-对称的二叉树"><a href="#剑指-Offer-28-对称的二叉树" class="headerlink" title="剑指 Offer 28. 对称的二叉树"></a><a href="https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/">剑指 Offer 28. 对称的二叉树</a></h1><p><strong>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</strong></p><p><strong>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</strong></p><p>  1<br>  &#x2F; <br> 2  2<br> &#x2F; \ &#x2F; <br>3  4 4  3</p><p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p><p>  1<br>  &#x2F; <br> 2  2<br>   \    <br>   3     3</p><p>示例 1：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">输入<span class="hljs-built_in">：root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>]<br>输出<span class="hljs-built_in">：true</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">3</span>]<br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>做递归思考三步：</strong></p><ol><li><strong>递归的函数要干什么？</strong></li></ol><ul><li><strong>函数的作用是判断传入的两个树是否镜像。</strong></li><li><strong>输入：TreeNode left, TreeNode right</strong></li><li><strong>输出：是：true，不是：false</strong></li></ul><ol><li><strong>递归停止的条件是什么？</strong></li></ol><ul><li><strong>左节点和右节点都为空 -&gt; 倒底了都长得一样 -&gt;true</strong></li><li><strong>左节点为空的时候右节点不为空，或反之 -&gt; 长得不一样-&gt; false</strong></li><li><strong>左右节点值不相等 -&gt; 长得不一样 -&gt; false</strong></li></ul><ol><li><strong>从某层到下一层的关系是什么？</strong></li></ol><ul><li><strong>要想两棵树镜像，那么一棵树左边的左边要和二棵树右边的右边镜像，一棵树左边的右边要和二棵树右边的左边镜像</strong></li><li><strong>调用递归函数传入左左和右右</strong></li><li><strong>调用递归函数传入左右和右左</strong></li><li><strong>只有左左和右右镜像且左右和右左镜像的时候，我们才能说这两棵树是镜像的</strong></li></ul><ol><li><strong>调用递归函数，我们想知道它的左右孩子是否镜像，传入的值是root的左孩子和右孩子。这之前记得判个root&#x3D;&#x3D;null。</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span>= <span class="hljs-literal">null</span> ? <span class="hljs-literal">true</span> : recur(root.left, root.right);<br>    &#125;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">recur</span><span class="hljs-params">(TreeNode L, TreeNode R)</span> &#123;<br>        <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">null</span> &amp;&amp; R == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">null</span> || R == <span class="hljs-literal">null</span> || L.val != R.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> recur(L.left, R.right) &amp;&amp; recur(L.right, R.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/solution/mian-shi-ti-28-dui-cheng-de-er-cha-shu-di-gui-qing/">参考链接剑指 Offer 28. 对称的二叉树</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>出现在Java程序中的finally代码块是否一定会执行</title>
    <link href="/2022/07/26/%E5%87%BA%E7%8E%B0%E5%9C%A8Java%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84finally%E4%BB%A3%E7%A0%81%E5%9D%97%E6%98%AF%E5%90%A6%E4%B8%80%E5%AE%9A%E4%BC%9A%E6%89%A7%E8%A1%8C/"/>
    <url>/2022/07/26/%E5%87%BA%E7%8E%B0%E5%9C%A8Java%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84finally%E4%BB%A3%E7%A0%81%E5%9D%97%E6%98%AF%E5%90%A6%E4%B8%80%E5%AE%9A%E4%BC%9A%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="出现在Java程序中的finally代码块是否一定会执行？"><a href="#出现在Java程序中的finally代码块是否一定会执行？" class="headerlink" title="出现在Java程序中的finally代码块是否一定会执行？"></a>出现在Java程序中的finally代码块是否一定会执行？</h2><h5 id="当遇到下面情况不会执行。"><a href="#当遇到下面情况不会执行。" class="headerlink" title="当遇到下面情况不会执行。"></a>当遇到下面情况不会执行。</h5><ol><li><p>当程序在进入try语句块之前就出现异常时会直接结束。 </p></li><li><p>当程序在try块中强制退出时，如使用System.exit(0)，也不会执行finally块中的代码。</p></li></ol><p>其它情况下，在try&#x2F;catch&#x2F;finally语句执行的时候，try块先执行，当有异常发生，catch和finally进行处理后程序就结束了，当没有异常发生，在执行完finally中的代码后，后面代码会继续执行。<strong>值得注意的 是，当try&#x2F;catch语句块中有return时，finally语句块中的代码会在return之前执行。</strong>如果try&#x2F;catch&#x2F;finally块 中都有return语句，finally块中的return语句会覆盖try&#x2F;catch模块中的return语句。</p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一练:剑指 Offer 32从上到下打印二叉树</title>
    <link href="/2022/07/25/%E5%89%91%E6%8C%87%20Offer%2032%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/07/25/%E5%89%91%E6%8C%87%20Offer%2032%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-32-I-从上到下打印二叉树"><a href="#剑指-Offer-32-I-从上到下打印二叉树" class="headerlink" title="剑指 Offer 32 - I. 从上到下打印二叉树"></a><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">剑指 Offer 32 - I. 从上到下打印二叉树</a></h1><p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p><p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight livescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs livescript">  <span class="hljs-number">3</span><br> / <span class="hljs-string">\</span><br><span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>  /  <span class="hljs-string">\</span><br> <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>返回：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[3,9,20,15,7]</span><br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><ul><li><p>题目要求的二叉树的 <strong>从上至下</strong> 打印（即按层打印），又称为二叉树的 <strong>广度优先搜索</strong>（BFS）。</p></li><li><p>BFS 通常借助 <strong>队列</strong> 的先入先出特性来实现。</p><p>算法流程：<br>特例处理： 当树的根节点为空，则直接返回空列表 [] ；<br>初始化： 打印结果列表 res &#x3D; [] ，包含根节点的队列 queue &#x3D; [root] ；<br>BFS 循环： 当队列 queue 为空时跳出；<br>出队： 队首元素出队，记为 node；<br>打印： 将 node.val 添加至列表 tmp 尾部；<br>添加子节点： 若 node 的左（右）子节点不为空，则将左（右）子节点加入队列 queue ；<br>返回值： 返回打印结果列表 res 即可。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] levelOrder(TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;()&#123;&#123; add(root); &#125;&#125;;<span class="hljs-comment">//只有LinkedList,别写成LinkList</span><br>        ArrayList&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>            ans.add(node.val);<br>            <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) queue.add(node.left);<br>            <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) queue.add(node.right);<br>        &#125;<br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[ans.size()];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ans.size(); i++)<br>            res[i] = ans.get(i);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/solution/mian-shi-ti-32-i-cong-shang-dao-xia-da-yin-er-ch-4/">https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/solution/mian-shi-ti-32-i-cong-shang-dao-xia-da-yin-er-ch-4/</a></p><h1 id="剑指-Offer-32-II-从上到下打印二叉树-II"><a href="#剑指-Offer-32-II-从上到下打印二叉树-II" class="headerlink" title="剑指 Offer 32 - II. 从上到下打印二叉树 II"></a><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></h1><p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p><p>例如:<br>给定二叉树: [3,9,20,null,null,15,7],</p><div class="code-wrapper"><pre><code class="hljs">    3   / \  9  20    /  \   15   7</code></pre></div><p>返回其层次遍历结果：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[3]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[9,20]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[15,7]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><p>和 上面的面试题32 - I. 从上到下打印二叉树差不多 两题仅有微小区别，即本题需将 每一层打印到一行 。</p><p>I. 按层打印： 题目要求的二叉树的 从上至下 打印（即按层打印），又称为二叉树的 广度优先搜索（BFS）。BFS 通常借助 队列 的先入先出特性来实现。</p><p>II. 每层打印到一行： 将本层全部节点打印到一行，并将下一层全部节点加入队列，以此类推，即可分为多行打印。</p><h4 id="算法流程："><a href="#算法流程：" class="headerlink" title="算法流程："></a>算法流程：</h4><p>特例处理： 当根节点为空，则返回空列表 [] ；<br>初始化： 打印结果列表 res &#x3D; [] ，包含根节点的队列 queue &#x3D; [root] ；<br>BFS 循环： 当队列 queue 为空时跳出；<br>新建一个临时列表 tmp ，用于存储当前层打印结果；<br>当前层打印循环： 循环次数为当前层节点数（即队列 queue 长度）；<br>出队： 队首元素出队，记为 node；<br>打印： 将 node.val 添加至 tmp 尾部；<br>添加子节点： 若 node 的左（右）子节点不为空，则将左（右）子节点加入队列 queue ；<br>将当前层结果 tmp 添加入 res 。<br>返回值： 返回打印结果列表 res 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">// List&lt;List&lt;Integer&gt;&gt;</span><br>        <span class="hljs-keyword">if</span>(root != <span class="hljs-literal">null</span>) queue.add(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty()) &#123;<br>            List&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> queue.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>                tmp.add(node.val);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) queue.add(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) queue.add(node.right);<br>            &#125;<br>            res.add(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/solution/mian-shi-ti-32-ii-cong-shang-dao-xia-da-yin-er-c-5/">参考链接:剑指 Offer 32 - II. 从上到下打印二叉树 II</a></p><h1 id="剑指-Offer-32-III-从上到下打印二叉树-III"><a href="#剑指-Offer-32-III-从上到下打印二叉树-III" class="headerlink" title="剑指 Offer 32 - III. 从上到下打印二叉树 III"></a><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></h1><p>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p><p>例如:<br>给定二叉树: [3,9,20,null,null,15,7],</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">  <span class="hljs-number">3</span><br> / <span class="hljs-string">\</span><br><span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>  /  <span class="hljs-string">\</span><br> <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>返回其层次遍历结果：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[3]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[20,9]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[15,7]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><p>本题额外要求 <strong>打印顺序交替变化</strong></p><p>方法一：层序遍历 + 双端队列<br>利用双端队列的两端皆可添加元素的特性，设打印列表（双端队列） tmp ，并规定：<br>奇数层 则添加至 tmp 尾部 ，<br>偶数层 则添加至 tmp 头部 。<br>算法流程：<br>特例处理： 当树的根节点为空，则直接返回空列表 [] ；<br>初始化： 打印结果空列表 res ，包含根节点的双端队列 deque ；<br>BFS 循环： 当 deque 为空时跳出；<br>新建列表 tmp ，用于临时存储当前层打印结果；<br>当前层打印循环： 循环次数为当前层节点数（即 deque 长度）；<br>出队： 队首元素出队，记为 node；<br>打印： 若为奇数层，将 node.val 添加至 tmp 尾部；否则，添加至 tmp 头部；<br>添加子节点： 若 node 的左（右）子节点不为空，则加入 deque ；<br>将当前层结果 tmp 转化为 list 并添加入 res ；<br>返回值： 返回打印结果列表 res 即可；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root != <span class="hljs-literal">null</span>) queue.add(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty()) &#123;<br>            LinkedList&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">//改成LinkedList,既可以头插法也可以尾插法</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> queue.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>                <span class="hljs-keyword">if</span>(res.size() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) tmp.addLast(node.val); <span class="hljs-comment">// 偶数层 -&gt; 队列头部</span><br>                <span class="hljs-keyword">else</span> tmp.addFirst(node.val); <span class="hljs-comment">// 奇数层 -&gt; 队列尾部</span><br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) queue.add(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) queue.add(node.right);<br>            &#125;<br>            res.add(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法二：层序遍历 + 双端队列（奇偶层逻辑分离）<br>方法一代码简短、容易实现；但需要判断每个节点的所在层奇偶性，即冗余了 NN 次判断。<br>通过将奇偶层逻辑拆分，可以消除冗余的判断。<br>算法流程：<br>与方法一对比，仅 BFS 循环不同。</p><p>BFS 循环： 循环打印奇 &#x2F; 偶数层，当 deque 为空时跳出；<br>打印奇数层： 从左向右 打印，先左后右 加入下层节点；<br>若 deque 为空，说明向下无偶数层，则跳出；<br>打印偶数层： 从右向左 打印，先右后左 加入下层节点；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        Deque&lt;TreeNode&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root != <span class="hljs-literal">null</span>) deque.add(root);<br>        <span class="hljs-keyword">while</span>(!deque.isEmpty()) &#123;<br>            <span class="hljs-comment">// 打印奇数层</span><br>            List&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> deque.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-comment">// 从左向右打印</span><br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> deque.removeFirst();<br>                tmp.add(node.val);<br>                <span class="hljs-comment">// 先左后右加入下层节点</span><br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) deque.addLast(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) deque.addLast(node.right);<br>            &#125;<br>            res.add(tmp);<br>            <span class="hljs-keyword">if</span>(deque.isEmpty()) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 若为空则提前跳出</span><br>            <span class="hljs-comment">// 打印偶数层</span><br>            tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> deque.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-comment">// 从右向左打印</span><br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> deque.removeLast();<br>                tmp.add(node.val);<br>                <span class="hljs-comment">// 先右后左加入下层节点</span><br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) deque.addFirst(node.right);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) deque.addFirst(node.left);<br>            &#125;<br>            res.add(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法三：层序遍历 + 倒序<br>此方法的优点是只用列表即可，无需其他数据结构。<br>偶数层倒序： 若 res 的长度为 奇数 ，说明当前是偶数层，则对 tmp 执行 倒序 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root != <span class="hljs-literal">null</span>) queue.add(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty()) &#123;<br>            List&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> queue.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>                tmp.add(node.val);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) queue.add(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) queue.add(node.right);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(res.size() % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) Collections.reverse(tmp);<br>            res.add(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/solution/mian-shi-ti-32-iii-cong-shang-dao-xia-da-yin-er--3/">参考链接剑指 Offer 32 - III. 从上到下打印二叉树 III</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:构造方法、成员变量初始化以及静态成员变量三者的初始化顺序</title>
    <link href="/2022/07/25/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%A5%E5%8F%8A%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E4%B8%89%E8%80%85%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <url>/2022/07/25/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%A5%E5%8F%8A%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E4%B8%89%E8%80%85%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？"><a href="#构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？" class="headerlink" title="构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？"></a>构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？</h1><h3 id="先后顺序：静态成员变量、成员变量、构造方法。"><a href="#先后顺序：静态成员变量、成员变量、构造方法。" class="headerlink" title="先后顺序：静态成员变量、成员变量、构造方法。"></a>先后顺序：静态成员变量、成员变量、构造方法。</h3><h4 id="详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变-量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。-x3D-x3D-还是有点晕-总之静态优先-其次父优先-最后变量-gt-代码块-gt-构造器-x3D-x3D"><a href="#详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变-量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。-x3D-x3D-还是有点晕-总之静态优先-其次父优先-最后变量-gt-代码块-gt-构造器-x3D-x3D" class="headerlink" title="详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变 量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。 &#x3D;&#x3D;(还是有点晕,总之静态优先,其次父优先,最后变量-&gt;代码块-&gt;构造器)&#x3D;&#x3D;"></a>详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变 量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。 &#x3D;&#x3D;<strong>(还是有点晕,总之静态优先,其次父优先,最后变量-&gt;代码块-&gt;构造器)</strong>&#x3D;&#x3D;</h4><h1 id="为什么Java语言不支持多重继承？"><a href="#为什么Java语言不支持多重继承？" class="headerlink" title="为什么Java语言不支持多重继承？"></a><strong>为什么Java语言不支持多重继承？</strong></h1><ol><li><h3 id="为了程序的结构能够更加清晰从而便于维护。假设Java语言支持多重继承，类C继承自类A和类B-如果类A和B都有自定义的成员方法f-那么当代码中调用类C的f-会产生二义性。-x3D-x3D-Java语言通过实现-多个接口间接支持多重继承-x3D-x3D-，-x3D-x3D-接口由于只包含方法定义，不能有方法的实现，类C继承接口A与接-口B时即使它们都有方法f-也不能直接调用方法，需实现具体的f-方法才能调用，不会产生二义-性。-x3D-x3D-所以接口里不能有方法的实现现在懂了吧"><a href="#为了程序的结构能够更加清晰从而便于维护。假设Java语言支持多重继承，类C继承自类A和类B-如果类A和B都有自定义的成员方法f-那么当代码中调用类C的f-会产生二义性。-x3D-x3D-Java语言通过实现-多个接口间接支持多重继承-x3D-x3D-，-x3D-x3D-接口由于只包含方法定义，不能有方法的实现，类C继承接口A与接-口B时即使它们都有方法f-也不能直接调用方法，需实现具体的f-方法才能调用，不会产生二义-性。-x3D-x3D-所以接口里不能有方法的实现现在懂了吧" class="headerlink" title="为了程序的结构能够更加清晰从而便于维护。假设Java语言支持多重继承，类C继承自类A和类B, 如果类A和B都有自定义的成员方法f(),那么当代码中调用类C的f()会产生二义性。&#x3D;&#x3D;Java语言通过实现 多个接口间接支持多重继承&#x3D;&#x3D;，**&#x3D;&#x3D;接口由于只包含方法定义，不能有方法的实现，类C继承接口A与接 口B时即使它们都有方法f(),也不能直接调用方法，需实现具体的f()方法才能调用，不会产生二义 性。&#x3D;&#x3D;** (所以接口里不能有方法的实现现在懂了吧)"></a>为了程序的结构能够更加清晰从而便于维护。假设Java语言支持多重继承，类C继承自类A和类B, 如果类A和B都有自定义的成员方法f(),那么当代码中调用类C的f()会产生二义性。&#x3D;&#x3D;<strong>Java语言通过实现 多个接口间接支持多重继承</strong>&#x3D;&#x3D;，**&#x3D;&#x3D;接口由于只包含方法定义，不能有方法的实现，类C继承接口A与接 口B时即使它们都有方法f(),也不能直接调用方法，需实现具体的f()方法才能调用，不会产生二义 性。&#x3D;&#x3D;** (所以接口里不能有方法的实现现在懂了吧)</h3></li><li><h3 id="多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。"><a href="#多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。" class="headerlink" title="多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。"></a>多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。</h3></li></ol><h1 id="复习-接口和抽象类的相同点和区别？"><a href="#复习-接口和抽象类的相同点和区别？" class="headerlink" title="(复习)接口和抽象类的相同点和区别？"></a>(复习)接口和抽象类的相同点和区别？</h1><p>相同点: </p><ol><li><p>都不能被实例化。&#x3D;&#x3D;<strong>(但抽象类可以有构造器,但不可以实例化,也要留给继承的子类去使用这个构造器,实现接口没有构造器)</strong>&#x3D;&#x3D; </p></li><li><p>接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。</p></li></ol><p>不同点： </p><ol start="3"><li>接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现&#x3D;&#x3D;。**(抽象类方法不可以有方法体,要留给继承的子类去具体实现,抽象类里的非抽象方法有方法体,接口只有定义，不能有方法的实现)**&#x3D;&#x3D; </li><li>实现接口的关键字为implements,继承抽象类的关键字为extends。一个类可以实现多个接口，只能继承一个抽象类。 </li><li>当子类和父类之间存在&#x3D;&#x3D;<strong>逻辑上的层次结构</strong>&#x3D;&#x3D;，推荐使用抽象类，&#x3D;&#x3D;<strong>有利于功能的累积</strong>。<strong>当功能不需要， 希望支持差别较大的两个或更多对象间的特定交互行为</strong>&#x3D;&#x3D;，推荐使用接口。使用&#x3D;&#x3D;<strong>接口能降低软件系统 的耦合度</strong>&#x3D;&#x3D;，便于日后维护或添加删除方法。</li></ol>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 50. 第一个只出现一次的字符</title>
    <link href="/2022/07/24/%E5%89%91%E6%8C%87%20Offer%2050.%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <url>/2022/07/24/%E5%89%91%E6%8C%87%20Offer%2050.%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-50-第一个只出现一次的字符"><a href="#剑指-Offer-50-第一个只出现一次的字符" class="headerlink" title="剑指 Offer 50. 第一个只出现一次的字符"></a><a href="https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/">剑指 Offer 50. 第一个只出现一次的字符</a></h1><p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p><p>示例 1:</p><figure class="highlight 1c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs 1c">输入：s = <span class="hljs-string">&quot;abaccdeff&quot;</span><br>输出：&#x27;b&#x27;<br>示例 <span class="hljs-number">2</span>:<br><br>输入：s = <span class="hljs-string">&quot;&quot;</span> <br>输出：&#x27; &#x27;<br></code></pre></td></tr></table></figure><p>三个解答,思想相同,和前几天输出出现2次的数组元素差不多,不写算法过程了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">firstUniqChar</span><span class="hljs-params">(String s)</span> &#123;<br>        Map&lt;Character, Integer&gt; frequency = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Character, Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); ++i) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s.charAt(i);<br>            frequency.put(ch, frequency.getOrDefault(ch, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (frequency.get(s.charAt(i)) == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> s.charAt(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><br><br>Map&lt;Character, Boolean&gt; dic = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-type">char</span>[] array = s.toCharArray();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : array) &#123;<br>    dic.put(c, !dic.containsKey(c));<span class="hljs-comment">//第一次,containsKey返回1,!containsKey返回0,下一次重复的c放进去,containsKey返回0,!containsKey返回1</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : array) &#123;<br>    <span class="hljs-keyword">if</span> (dic.get(c)) <span class="hljs-keyword">return</span> c;<span class="hljs-comment">//dic.get(c)获取key为c的value,正常时0,不会执行c,但如果没重复,flag被置为1,执行return c</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">firstUniqChar</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-comment">//注重边界情况的处理！特别是s为空字符串，以及在处理之后判断s是否为空字符串！思路严谨。</span><br>    <span class="hljs-keyword">if</span>(s.isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>    HashSet&lt;Character&gt; counter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:s.toCharArray())&#123;<br>        <span class="hljs-keyword">if</span>(counter.contains(c))<br>            s = s.replace(String.valueOf(c),<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            counter.add(c);<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.isEmpty()?<span class="hljs-string">&#x27; &#x27;</span>:s.charAt(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 11. 旋转数组的最小数字</title>
    <link href="/2022/07/23/%E5%89%91%E6%8C%87%20Offer%2011.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <url>/2022/07/23/%E5%89%91%E6%8C%87%20Offer%2011.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-11-旋转数组的最小数字"><a href="#剑指-Offer-11-旋转数组的最小数字" class="headerlink" title="剑指 Offer 11. 旋转数组的最小数字"></a><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">剑指 Offer 11. 旋转数组的最小数字</a></h1><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为 1。  </p><p>注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs accesslog">示例 <span class="hljs-number">1</span>：<br><br>输入：numbers = <span class="hljs-string">[3,4,5,1,2]</span><br>输出：<span class="hljs-number">1</span><br>示例 <span class="hljs-number">2</span>：<br><br>输入：numbers = <span class="hljs-string">[2,2,2,0,1]</span><br>输出：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="用不解决要face的方式"><a href="#用不解决要face的方式" class="headerlink" title="用不解决要face的方式"></a>用不解决要face的方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] numbers)</span> &#123;<br>        Arrays.sort(numbers);<br>        <span class="hljs-keyword">return</span> numbers[<span class="hljs-number">0</span>];<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说这么多,其实只要输出一维数组中的最小值,就会运行成功,但题目之所以说那么啰嗦,就是不希望你用这种方法,会被别人鄙视,你需要会更高级的方法</p><p>算法流程：<br>初始化： 声明 i, j 双指针分别指向 nums 数组左右两端；<br>循环二分： 设 m &#x3D; (i + j) &#x2F; 2 为每次二分的中点（ “&#x2F;“ 代表向下取整除法，因此恒有 i \leq m &lt; ji≤m&lt;j ），可分为以下三种情况：<br>当 ]nums[m]&gt;nums[j] 时： mm 一定在 左排序数组 中，即旋转点 xx 一定在 [m + 1, j][m+1,j] 闭区间内，因此执行 i &#x3D; m + 1；<br>当 nums[m] &lt; nums[j]时： m 一定在 右排序数组 中，即旋转点 x一定在[i, m][i,m] 闭区间内，因此执行 j &#x3D; m；<br>当 nums[m] &#x3D; nums[j] 时： 无法判断 m 在哪个排序数组中，即无法判断旋转点 x 在 [i, m][i,m] 还是 [m + 1, j][m+1,j] 区间中。解决方案： 执行 j &#x3D; j - 1缩小判断范围，分析见下文。<br>返回值： 当 i &#x3D; j时跳出二分循环，并返回 旋转点的值 nums[i] 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] numbers)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = numbers.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (numbers[m] &gt; numbers[j]) i = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[m] &lt; numbers[j]) j = m;<br>            <span class="hljs-keyword">else</span> j--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> numbers[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上，当出现 nums[m] &#x3D; nums[j]时，一定有区间 [i, m][i,m] 内所有元素相等 或 区间 [m, j][m,j] 内所有元素相等（或两者皆满足）。对于寻找此类数组的最小值问题，可直接放弃二分查找，而使用线性查找替代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] numbers)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = numbers.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (numbers[m] &gt; numbers[j]) i = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[m] &lt; numbers[j]) j = m;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> i;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; k &lt; j; k++) &#123;<br>                    <span class="hljs-keyword">if</span>(numbers[k] &lt; numbers[x]) x = k;<br>                &#125;<br>                <span class="hljs-keyword">return</span> numbers[x];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> numbers[i];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 04. 二维数组中的查找</title>
    <link href="/2022/07/23/%E5%89%91%E6%8C%87%20Offer%2004.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <url>/2022/07/23/%E5%89%91%E6%8C%87%20Offer%2004.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></h1><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p> 示例:</p><figure class="highlight inform7"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs inform7">现有矩阵 matrix 如下：<br><br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,   4,  7, 11, 15]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[2,   5,  8, 12, 19]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[3,   6,  9, 16, 22]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[10, 13, 14, 17, 24]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[18, 21, 23, 26, 30]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><p>给定 target &#x3D; 5，返回 true。</p><p>给定 target &#x3D; 20，返回 false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> matrix.length - <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; matrix[<span class="hljs-number">0</span>].length)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(matrix[i][j] &gt; target) i--;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(matrix[i][j] &lt; target) j++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="算法流程："><a href="#算法流程：" class="headerlink" title="算法流程："></a><strong>算法流程：</strong></h5><ol><li>从矩阵matrix左下角元素（索引设为(i, j)）开始遍历，并与目标值对比：<ul><li>当 <code>matrix[i][j] &gt; target</code> 时，执行 <code>i--</code> ，即消去第 <code>i</code> 行元素；</li><li>当 <code>matrix[i][j] &lt; target</code> 时，执行 <code>j++</code> ，即消去第 <code>j</code> 列元素；</li><li>当 <code>matrix[i][j] = target</code> 时，返回 true，代表找到目标值。</li></ul></li><li>若行索引或列索引越界，则代表矩阵中无目标值，返回 false。</li></ol><blockquote><p>每轮 <code>i</code> 或 <code>j</code> 移动后，相当于生成了“消去一行（列）的新矩阵”， 索引<code>(i,j)</code> 指向新矩阵的左下角元素（标志数），因此可重复使用以上性质消去行（列）。</p></blockquote><h5 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><ul><li>时间复杂度 O(M+N) ：其中，N 和 M 分别为矩阵行数和列数，此算法最多循环M+N 次。</li><li>空间复杂度 O(1) : <code>i</code>, <code>j</code> 指针使用常数大小额外空间。</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof">https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:接口与抽象类</title>
    <link href="/2022/07/23/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <url>/2022/07/23/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h1><p><strong>抽象类有构造器,但不可以实例化,也要留给继承的子类去使用这个构造器,实现接口没有构造器</strong><br><strong>抽象类方法不可以有方法体,要留给继承的子类去具体实现,抽象类里的非抽象方法有方法体,接口只有定义，不能有方法的实现</strong></p><p><strong>“Java中，一个类实现了某接口，则必须实现该接口中的所有方法么？”这句话其实是不准确的，因为我们还没有考虑到抽象类。</strong><br><strong>抽象类实现某个接口，可以不实现所有接口的方法，可以由它的子类实现。而普通类即非抽象类则必须实现接口里的全部方法。</strong><br><strong>同样地，再来讲述一下接口：</strong><br><strong>1 接口的设计解决了java只能单继承的缺点，可以实现多个接口来实现java的多继承。</strong><br><strong>2 实现某个接口必须覆写其中的所有方法，当然也可以是一个空的实现（方法体为空没有任何作用），但是这个类必须是非抽象类，抽象类如上文。</strong></p><h3 id="1、基本语法区别"><a href="#1、基本语法区别" class="headerlink" title="1、基本语法区别"></a>1、基本语法区别</h3><p>Java中接口和抽象类的定义语法分别为interface与abstract关键字。</p><p><strong>抽象类</strong>：在Java中被abstract关键字修饰的类称为抽象类，被abstract关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点：</p><p>a、抽象类不能被实例化只能被继承；</p><p>b、包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法；</p><p>c、抽象类中的抽象方法的修饰符只能为public或者protected，默认为public；</p><p>&#x3D;&#x3D;d、一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类；&#x3D;&#x3D;</p><p>&#x3D;&#x3D;e、抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。&#x3D;&#x3D;</p><p>*<strong>接口*：</strong>Java中接口使用interface关键字修饰，特点为:</p><p>a、接口可以包含变量、方法；变量被隐士指定为public static final，方法被隐士指定为public abstract（JDK1.8之前）；</p><p>b、接口支持多继承，即一个接口可以extends多个接口，间接的解决了Java中类的单继承问题；</p><p>c、一个类可以实现多个接口；</p><p>d、JDK1.8中对接口增加了新的特性：（1）、默认方法（default method）：JDK 1.8允许给接口添加非抽象的方法实现，但必须使用default关键字修饰；定义了default的方法可以不被实现子类所实现，但只能被实现子类的对象调用；如果子类实现了多个接口，并且这些接口包含一样的默认方法，则子类必须重写默认方法；（2）、静态方法（static method）：JDK 1.8中允许使用static关键字修饰一个方法，并提供实现，称为接口静态方法。接口静态方法只能通过接口调用（接口名.静态方法名）。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br>  <span class="hljs-comment">//JDK 1.8 以后，接口允许包含具体实现的方法，该方法称为&quot;默认方法&quot;，默认方法使用 default 关键字修饰。更多内容可参考</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口只能是功能的定义，而抽象类既可以为功能的定义也可以为功能的实现。</p><p><strong>相同点</strong></p><p>（1）都不能被实例化 （2）接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能实例化。</p><p><strong>不同点</strong></p><p>（1）接口只有定义，不能有方法的实现，java 1.8中可以定义default方法体，而抽象类可以有定义与实现，方法可在抽象类中实现。</p><p>（2）实现接口的关键字为implements，继承抽象类的关键字为extends。一个类可以实现多个接口，但一个类只能继承一个抽象类。所以，使用接口可以间接地实现多重继承。</p><p>（3）接口强调特定功能的实现，而抽象类强调所属关系。</p><p>（4）接口成员变量默认为public static final，必须赋初值，不能被修改；其所有的成员方法都是public、abstract的。抽象类中成员变量默认default，可在子类中被重新定义，也可被重新赋值；抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号结尾，不带花括号。</p><p>URL:[深入理解 Java 的接口和抽象类 | 菜鸟教程 (runoob.com)</p><p><a href="https://www.runoob.com/w3cnote/java-abstract-interface-different.html">抽象类方法不可以有方法体,抽象类里的非抽象方法有方法体</a></p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一练:剑指 Offer 03. 数组中重复的数字</title>
    <link href="/2022/07/22/%E5%89%91%E6%8C%87%20Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2022/07/22/%E5%89%91%E6%8C%87%20Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></h1><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs accesslog">输入：<br><span class="hljs-string">[2, 3, 1, 0, 2, 5, 3]</span><br>输出：<span class="hljs-number">2</span> 或 <span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof">https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof</a></p><p>&#x3D;&#x3D;了解到了哈希Set的数据结构&#x3D;&#x3D;</p><p>&#x3D;&#x3D;定义:Set<T> dic &#x3D; new HashSet&lt;&gt;();&#x3D;&#x3D;</p><p>&#x3D;&#x3D;方法:dic.contains(),dic.add()&#x3D;&#x3D;</p><h4 id="方法一：哈希表-x2F-Set"><a href="#方法一：哈希表-x2F-Set" class="headerlink" title="方法一：哈希表 &#x2F; Set"></a>方法一：哈希表 &#x2F; Set</h4><p>利用数据结构特点，容易想到使用哈希表（Set）记录数组的各个数字，当查找到重复数字则直接返回。</p><p>算法流程：<br>初始化： 新建 HashSet ，记为 dicdic ；<br>遍历数组 nums 中的每个数字 num ：<br>当 num 在 dic中，说明重复，直接返回 num ；<br>将 num添加至 dic 中；<br>返回 -1−1 。本题中一定有重复数字，因此这里返回多少都可以。<br>复杂度分析：<br>时间复杂度 O(N)： 遍历数组使用 O(N) ，HashSet 添加与查找元素皆为 O(1) 。<br>空间复杂度 O(N) ： HashSet 占用 O(N) 大小的额外空间。</p><p>作者：jyd<br>链接：<a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/mian-shi-ti-03-shu-zu-zhong-zhong-fu-de-shu-zi-yua/">https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/mian-shi-ti-03-shu-zu-zhong-zhong-fu-de-shu-zi-yua/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Set&lt;Integer&gt; dic = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num : nums)&#123;<br>            <span class="hljs-keyword">if</span>(dic.contains(num)) <span class="hljs-keyword">return</span> num;<br>            dic.add(num);<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二：原地交换-未理解透彻"><a href="#方法二：原地交换-未理解透彻" class="headerlink" title="方法二：原地交换(未理解透彻)"></a>方法二：原地交换(未理解透彻)</h4><p>&#x3D;&#x3D;方法二的解法有一个关键点是只有 nums[i] &#x3D;&#x3D; i 的时候i才递增，这样保证找到相同元素前不会漏掉某些元素的处理&#x3D;&#x3D;</p><p>&#x3D;&#x3D;没有任何重复的情况下，数组的每个下标i处存放的就是i值，这是“正确 ”的位置；&#x3D;&#x3D;</p><p>&#x3D;&#x3D;有重复，遍历时，前面的重复元素会放到它“正确”的位置上，后面一个重复元素在想要也放到该位置时，发现该位置已有“正确”元素了，即判断重复。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;写的时候注意：要交换i，j元素的时候，i的值更新了还需要在下一次遍历中判断，此时i指针不动，只有当值在“正确”位置时，才将i右移一位&#x3D;&#x3D;</p><p>&#x3D;&#x3D;证明一下原地交换的核心算法。swap(nums, nums[i], nums[nums[i]]); 记 int b &#x3D; nums[nums[i]]; 这句话过后，第b个元素num[b] 一定等于b。。说明第b个元素已经放对位置。 证明： 记 int a &#x3D; nums[i]; 记 int b &#x3D; nums[nums[i]] &#x3D; nums[a]; 交换前 nums[a] &#x3D;&#x3D; b, nums[b] &#x3D;&#x3D; c； 交换后 nums[a] &#x3D;&#x3D; c, nums[b] &#x3D;&#x3D; b； 故 第b个元素num[b] 一定等于b。。说明第b个元素已经放对位置。 证毕&#x3D;&#x3D;</p><p>题目说明尚未被充分使用，即 在一个长度为 n 的数组 nums 里的所有数字都在 0 ~ n-1 的范围内 。 此说明含义：数组元素的 索引 和 值 是 一对多 的关系。<br>因此，可遍历数组并通过交换操作，使元素的 索引 与 值 一一对应（即 nums[i] &#x3D; i）。因而，就能通过索引映射对应的值，起到与字典等价的作用。</p><p>遍历中，第一次遇到数字 x 时，将其交换至索引 x 处；而当第二次遇到数字 x 时，一定有 nums[x] &#x3D; x ，此时即可得到一组重复数字。</p><p>算法流程：<br>遍历数组nums ，设索引初始值为 i &#x3D; 0 :</p><p>若 nums[i] &#x3D; i ： 说明此数字已在对应索引位置，无需交换，因此跳过；<br>若 nums[nums[i]] &#x3D; nums[i]： 代表索引 nums[i] 处和索引 i 处的元素值都为 nums[i] ，即找到一组重复值，返回此值 nums[i] ；<br>否则： 交换索引为 i和 nums[i] 的元素值，将此数字交换至对应索引位置。<br>若遍历完毕尚未返回，则返回 −1 。</p><p>复杂度分析：<br>时间复杂度 O(N) ： 遍历数组使用 O(N) ，每轮遍历的判断和交换操作使用 O(1) 。<br>空间复杂度 O(1) ： 使用常数复杂度的额外空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] == i) &#123;<br>                i++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(nums[nums[i]] == nums[i]) <span class="hljs-keyword">return</span> nums[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[i];<br>            nums[i] = nums[tmp];<br>            nums[tmp] = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述Java中的异常</title>
    <link href="/2022/07/22/%E7%AE%80%E8%BF%B0Java%E5%BC%82%E5%B8%B8(%E4%BA%8C)/"/>
    <url>/2022/07/22/%E7%AE%80%E8%BF%B0Java%E5%BC%82%E5%B8%B8(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h1 id="简述Java中的异常"><a href="#简述Java中的异常" class="headerlink" title="简述Java中的异常"></a>简述Java中的异常</h1><p>Java从Throwable直接派生出Exception和Error。</p><p>Exception又分为检查异常和运行时异常。</p><p>**典型的RuntimeException(运行时异常)**包括NullPointerException, ClassCastException(类型转换异常)，IndexOutOfBoundsException(越界异常), IllegalArgumentException(非法参数异常),ArrayStoreException(数组存储异常),AruthmeticException(算术异常),BufferOverflowException(缓冲区溢出异常)等；</p><p>**非RuntimeException(检查异常)**包括IOException, SQLException,InterruptedException(中断异常-调用线程睡眠时候),NumberFormatException(数字格式化异常)等。</p><h2 id="除此以外-还可以用另一种划分方式"><a href="#除此以外-还可以用另一种划分方式" class="headerlink" title="除此以外,还可以用另一种划分方式"></a>除此以外,还可以用另一种划分方式</h2><p>按照编译器检查方式划分，异常又可以分为检查型异常（CheckedException）和非检查型异常 （UncheckedException）。Error和RuntimeException合起来称为UncheckedException，之所以这么 称呼，是因为编译器不检查方法是否处理或者抛出这两种类型的异常，因此编译期间出现这种类型的异常也不会报错，默认由虚拟机提供处理方式。除了Error 和RuntimeException这两种类型的异常外，其它的异常都称为Checked异常。</p><h3 id="理解了检查型异常和非检查型异常的区别"><a href="#理解了检查型异常和非检查型异常的区别" class="headerlink" title="理解了检查型异常和非检查型异常的区别"></a>理解了检查型异常和非检查型异常的区别</h3><p>非检查型异常也就是运行时异常，对于运行时异常即使我们在一个方法上throws声明可能抛出异常，编译器也会检测到是运行时异常而不要求我们在主方法中必须处理；对于检查型异常我们throws声明之后也必须处理才可以编译通过。</p><p>*<em>对于SQLException之类的检查异常必须处理，否则会报错:</em></p><h2 id="Java如何处理异常"><a href="#Java如何处理异常" class="headerlink" title="Java如何处理异常"></a>Java如何处理异常</h2><h3 id="try-catch-try-finally-try-catch-finally"><a href="#try-catch-try-finally-try-catch-finally" class="headerlink" title="try-catch, try-finally, try-catch-finally"></a>try-catch, try-finally, try-catch-finally</h3><p>对于checked类型异常，我们要么对它进行处理，要么在方法头使用throws抛出。</p><p>关于catch需要注意的几点：</p><p>1)、参数的异常类型必须是Throwable类或者其子类。</p><p>2)、从上往下的catch语句，其参数类型必须按照从子类到父类顺序，因为一旦匹配到一个类型，就会忽略往后的catch。比如IOException必须放到Exception前面，否则编译器会报错。</p><p>3)、可以有一个或者多个catch语句，甚至如果有finally语句的情况下，可以没有catch语句，如try-finally。</p><p>想要捕获多个异常，可以使用多个catch语句，JDK7以后提供了另外一种方式：多重捕获（multi-catch)。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">// other code</span><br>&#125; <span class="hljs-keyword">catch</span> (IOException | SQLException ex) &#123;<br>    <span class="hljs-keyword">throw</span> ex;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>4)、不要忽略异常。空的catch块会使异常达不到应有的目的，除非诸如关闭FileInputStream的时候，因为你还没有改变文件的状态，因此不必执行任何恢复动作，并且已经从文件中读取到所需要的信息，因此不用终止正在进行的操作。</p><p>关于finally需要注意的几点：</p><p>1)、finally中的代码总是会被执行，除非在执行try或者catch语句时虚拟机退出（System.exit(1))。</p><p>2)、finally块可以做一些资源清理工作，如关闭文件、关闭游标等操作。</p><p>3)、finally块不是必须的。</p><p>另外，如果在try和finally块中都执行了return语句，最终返回的将是finally中的return值。</p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一练:剑指 Offer 05. 替换空格</title>
    <link href="/2022/07/21/%E5%89%91%E6%8C%87%20Offer%2005.%20%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <url>/2022/07/21/%E5%89%91%E6%8C%87%20Offer%2005.%20%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h1><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例 1：</p><figure class="highlight perl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs perl">输入：s = <span class="hljs-string">&quot;We are happy.&quot;</span><br>输出：<span class="hljs-string">&quot;We%20are%20happy.&quot;</span><br></code></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof">https://leetcode.cn/problems/ti-huan-kong-ge-lcof</a><br>方法一：遍历添加<br>在 Python 和 Java 等语言中，字符串都被设计成「不可变」的类型，即无法直接修改字符串的某一位字符，需要新建一个字符串实现。</p><p>算法流程：<br>初始化一个 list (Python) &#x2F; StringBuilder (Java) ，记为 res ；<br>遍历列表 s 中的每个字符 c ：<br>当 c 为空格时：向 res 后添加字符串 “%20” ；<br>当 c 不为空格时：向 res 后添加字符 c ；<br>将列表 res 转化为字符串并返回。<br>复杂度分析：<br>时间复杂度O(N) ： 遍历使用O(N) ，每轮添加（修改）字符操作使用O(1) ；<br>空间复杂度O(N) ： Python 新建的 list 和 Java 新建的 StringBuilder 都使用了线性大小的额外空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">replaceSpace</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(Character c : s.toCharArray())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27; &#x27;</span>) res.append(<span class="hljs-string">&quot;%20&quot;</span>);<br>            <span class="hljs-keyword">else</span> res.append(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述Java异常的分类</title>
    <link href="/2022/07/21/%E7%AE%80%E8%BF%B0Java%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB/"/>
    <url>/2022/07/21/%E7%AE%80%E8%BF%B0Java%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="简述Java异常的分类"><a href="#简述Java异常的分类" class="headerlink" title="简述Java异常的分类"></a>简述Java异常的分类</h1><p><strong>Java异常分为Error（程序无法处理的错误），和Exception（程序本身可以处理的异常）。这两个类均 继承Throwable。</strong> </p><p><strong>Error常见的有StackOverFlowError,OutOfMemoryError等等。</strong> </p><p><strong>Exception可分为运行时异常和非运行时异常。对于运行时异常，可以利用try catch的方式进行处理，也 可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译。</strong></p><hr><p>更新于2022.7.26</p><h1 id="记录别人博客的提出的一个小问题-写出五个常见的运行时异常-RuntimeException"><a href="#记录别人博客的提出的一个小问题-写出五个常见的运行时异常-RuntimeException" class="headerlink" title="记录别人博客的提出的一个小问题:写出五个常见的运行时异常(RuntimeException)"></a>记录别人博客的提出的一个小问题:写出五个常见的运行时异常(RuntimeException)</h1><p>首先我们想到与之相对的一类异常:检查式异常(CheckedException)</p><p>检查式异常:顾名思义,就是让我们来检查(处理)异常,需要我们对代码块进行try catch去捕捉这些异常</p><p>运行时异常:顾名思义,运行时可以联想到Java虚拟机,毕竟当这种异常出现时,我们会把他交给Java虚拟机接管,比如：我们从来没有人去处理过NullPointerException异常，它就是运行时异常，并且这种异常还是最常见的异常之一。</p><p>答案:</p><ul><li>NullPointereException</li><li>ClassCastException</li><li>IndexOutBoundsException</li><li>BuffetOverflowException</li><li>ArrayStoreException</li></ul><p>既然写出来运行时异常,那就顺便写几个CheckedException</p><ul><li>SQLException</li><li>IOException</li><li>中断异常InterruptException</li><li>数字格式异常NumberFormatException</li></ul>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间的女神(续)</title>
    <link href="/2022/07/20/%E6%97%B6%E9%97%B4%E7%9A%84%E5%A5%B3%E7%A5%9E(2)/"/>
    <url>/2022/07/20/%E6%97%B6%E9%97%B4%E7%9A%84%E5%A5%B3%E7%A5%9E(2)/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="950977390d7516fedffc39185f9f038fe117f37d2c133371eaf5cf917e64d967"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>观后有感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>观后有感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:接口和抽象类有什么区别？</title>
    <link href="/2022/07/20/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/07/20/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="接口和抽象类有什么区别"><a href="#接口和抽象类有什么区别" class="headerlink" title="接口和抽象类有什么区别"></a>接口和抽象类有什么区别</h1><ul><li><p>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。 </p></li><li><p>构造函数：抽象类可以有构造函数；接口不能有。</p></li><li><p>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。 </p></li><li><p>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问 修饰符。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一练:剑指 Offer 30. 包含min函数的栈</title>
    <link href="/2022/07/20/%E5%89%91%E6%8C%87%20Offer%2030.%20%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <url>/2022/07/20/%E5%89%91%E6%8C%87%20Offer%2030.%20%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-30-包含min函数的栈"><a href="#剑指-Offer-30-包含min函数的栈" class="headerlink" title="剑指 Offer 30. 包含min函数的栈"></a><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指 Offer 30. 包含min函数的栈</a></h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><p>示例:</p><figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">MinStack minStack <span class="hljs-operator">=</span> new MinStack()<span class="hljs-comment">;</span><br>minStack.push(-<span class="hljs-number">2</span>)<span class="hljs-comment">;</span><br>minStack.push(<span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br>minStack.push(-<span class="hljs-number">3</span>)<span class="hljs-comment">;</span><br>minStack.min()<span class="hljs-comment">;   --&gt; 返回 -3.</span><br>minStack.pop()<span class="hljs-comment">;</span><br>minStack.top()<span class="hljs-comment">;      --&gt; 返回 0.</span><br>minStack.min()<span class="hljs-comment">;   --&gt; 返回 -2.</span><br></code></pre></td></tr></table></figure><p>提示：</p><p>各函数的调用总次数不超过 20000 次</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof">https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof</a></p><p>解题思路：</p><h4 id="普通栈的-push-和-pop-函数的复杂度为-O-1-O-1-；而获取栈最小值-min-函数需要遍历整个栈，复杂度为-O-N-O-N-。"><a href="#普通栈的-push-和-pop-函数的复杂度为-O-1-O-1-；而获取栈最小值-min-函数需要遍历整个栈，复杂度为-O-N-O-N-。" class="headerlink" title="普通栈的 push() 和 pop() 函数的复杂度为 O(1)O(1) ；而获取栈最小值 min() 函数需要遍历整个栈，复杂度为 O(N)O(N) 。"></a>普通栈的 push() 和 pop() 函数的复杂度为 O(1)O(1) ；而获取栈最小值 min() 函数需要遍历整个栈，复杂度为 O(N)O(N) 。</h4><p>本题难点： 将 min() 函数复杂度降为 O(1)O(1) ，可通过建立辅助栈实现；<br>数据栈 A ： 栈 A 用于存储所有元素，保证入栈 push() 函数、出栈 pop() 函数、获取栈顶 top() 函数的正常逻辑。<br>&#x3D;&#x3D;辅助栈 B ： 栈 B 中存储栈 A中所有 非严格降序 的元素，则栈 A 中的最小元素始终对应栈 B 的栈顶元素，即 min() 函数只需返回栈 B 的栈顶元素即可。&#x3D;&#x3D;<br>&#x3D;&#x3D;因此，只需设法维护好 栈 B 的元素，使其保持非严格降序，即可实现 min() 函数的 O(1)O(1) 复杂度。&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br>    Stack&lt;Integer&gt; A, B;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinStack</span><span class="hljs-params">()</span> &#123;<br>        A = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        B = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        A.add(x);<br>        <span class="hljs-keyword">if</span>(B.empty() || B.peek() &gt;= x)<br>            B.add(x);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(A.pop().equals(B.peek()))<span class="hljs-comment">//关键步骤,如果pop是min,记得要把B栈一起pop出,毕竟B是用来存min的</span><br>            B.pop();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> A.peek();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> B.peek();<br>    &#125;<br>&#125;<br><br>作者：jyd<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/solution/mian-shi-ti-30-bao-han-minhan-shu-de-zhan-fu-zhu-z/</span><br>来源：力扣（LeetCode）<br></code></pre></td></tr></table></figure><p>第二种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br>    <span class="hljs-keyword">public</span> Node node;<br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinStack</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><br>       <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>)<br>            node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(x, x, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">else</span><br>            node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(x, Math.min(node.min, x), node);<span class="hljs-comment">//关键步骤</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        node = node.next;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> node.value;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> node.min;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>         <span class="hljs-type">int</span> value;<br>         <span class="hljs-type">int</span> min;<br>         Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value,<span class="hljs-type">int</span> min,Node next)</span>&#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.min = min;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MinStack object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MinStack obj = new MinStack();</span><br><span class="hljs-comment"> * obj.push(x);</span><br><span class="hljs-comment"> * obj.pop();</span><br><span class="hljs-comment"> * int param_3 = obj.top();</span><br><span class="hljs-comment"> * int param_4 = obj.min();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一练:剑指 Offer 09. 用两个栈实现队列</title>
    <link href="/2022/07/19/%E5%89%91%E6%8C%87%20Offer%2009.%20%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2022/07/19/%E5%89%91%E6%8C%87%20Offer%2009.%20%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-09-用两个栈实现队列"><a href="#剑指-Offer-09-用两个栈实现队列" class="headerlink" title="剑指 Offer 09. 用两个栈实现队列"></a><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指 Offer 09. 用两个栈实现队列</a></h1><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><p>示例 1：</p><p>输入：</p><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog">[<span class="hljs-string">&quot;CQueue&quot;</span>,<span class="hljs-string">&quot;appendTail&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>]<br>[[],[<span class="hljs-number">3</span>],[],[]]<br>输出：[null,null,<span class="hljs-number">3</span>,<span class="hljs-number">-1</span>]<br></code></pre></td></tr></table></figure><p>示例 2：</p><p>示例 2：</p><p>输入：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<span class="hljs-string">&quot;CQueue&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>,<span class="hljs-string">&quot;appendTail&quot;</span>,<span class="hljs-string">&quot;appendTail&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>]<br>[[],[],[<span class="hljs-number">5</span>],[<span class="hljs-number">2</span>],[],[]]<br>输出：[null,<span class="hljs-number">-1</span>,null,null,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>提示：</p><p>提示：</p><p>1 &lt;&#x3D; values &lt;&#x3D; 10000<br>最多会对 appendTail、deleteHead 进行 10000 次调用<br>通过次数445,954提交次数630,208</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof">https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof</a></p><p>解题思路：<br>栈无法实现队列功能： 栈底元素（对应队首元素）无法直接删除，需要将上方所有元素出栈。<br>双栈可实现列表倒序： 设有含三个元素的栈 A &#x3D; [1,2,3]A&#x3D;[1,2,3] 和空栈 B &#x3D; []B&#x3D;[]。若循环执行 AA 元素出栈并添加入栈 BB ，直到栈 AA 为空，则 A &#x3D; []A&#x3D;[] , B &#x3D; [3,2,1]B&#x3D;[3,2,1] ，即 栈 BB 元素实现栈 AA 元素倒序 。<br>利用栈 BB 删除队首元素： 倒序后，BB 执行出栈则相当于删除了 AA 的栈底元素，即对应队首元素。</p><p>函数设计：<br>题目只要求实现 加入队尾appendTail() 和 删除队首deleteHead() 两个函数的正常工作，因此我们可以设计栈 A 用于加入队尾操作，栈 B 用于将元素倒序，从而实现删除队首元素。</p><p>加入队尾 appendTail()函数： 将数字 val 加入栈 A 即可。<br>删除队首deleteHead()函数： 有以下三种情况。<br>当栈 B 不为空： B中仍有已完成倒序的元素，因此直接返回 B 的栈顶元素。<br>否则，当 A 为空： 即两个栈都为空，无元素，因此返回 -1−1 。<br>否则： 将栈 A 元素全部转移至栈 B 中，实现元素倒序，并返回栈 B 的栈顶元素。</p><p>详解链接(<a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-2/">面试题09. 用两个栈实现队列（清晰图解） - 用两个栈实现队列 - 力扣（LeetCode）</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> Stack&lt;Integer&gt; stack1;<br>    <span class="hljs-keyword">private</span> Stack&lt;Integer&gt; stack2;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CQueue</span><span class="hljs-params">()</span> &#123;<br>        stack1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt; ();<br>        stack2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt; ();<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendTail</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>         stack1.push(value);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(!stack2.isEmpty())&#123;<br>            <span class="hljs-keyword">return</span> stack2.pop();<br>            <span class="hljs-comment">//已经将栈stack1中数据回压至stack2(stack1倒序),stack2.pop弹出栈2顶元素则输出stack1栈底元素            </span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span>(!stack1.isEmpty())&#123;<br>                    stack2.push(stack1.pop());<br>                &#125;<span class="hljs-comment">//未将栈stack1中数据回压至stack2(stack1倒序),所以执行while代码块完成将栈stack1中数据回压至stack2(stack1倒序)</span><br>                <span class="hljs-keyword">return</span> stack2.isEmpty()? -<span class="hljs-number">1</span> : stack2.pop();<br>            &#125;<br>            <span class="hljs-comment">//总归要输出-1或者stack2.pop()</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your CQueue object will be instantiated and called as such:</span><br><span class="hljs-comment"> * CQueue obj = new CQueue();</span><br><span class="hljs-comment"> * obj.appendTail(value);</span><br><span class="hljs-comment"> * int param_2 = obj.deleteHead();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>每日一练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>每日一练</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间的女神</title>
    <link href="/2022/07/19/%E6%97%B6%E9%97%B4%E7%9A%84%E5%A5%B3%E7%A5%9E/"/>
    <url>/2022/07/19/%E6%97%B6%E9%97%B4%E7%9A%84%E5%A5%B3%E7%A5%9E/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="315e71536c37342109a6f74db2756e7ba9a77185ebd11a62a867a7abc704c10e">ba8c35434f82bdb0b8749538e49486c541ac37556674ee9d1b84fe637280abec0b89a91354d3e5403ea5ff8c7f5b81f7f8f2aea03bb8ca3ca701d10620a20a8eda88cfb07b49869dc30b671a8260603a8c02a78fd997ccadc8f049b384d9772c7b657f99a7b2e74d88b72c1d67ff1003a98dca09f18918ddccc5377c058981aabec85bcf0bd414f0f70eba22e3d4f745ef6939beaff7c3300f2716cc5f783185cfca9cde8bc29f7929165454a751eaa1758e4ef61518426d5268dec71b69ff9ed74bfc122dfe348969a17df3f6d41aaa46f171a3d616a5d2d58cd27655de5b84391b0b56c0f3250301a38ba063289c0810c4b45409ca08f51a2fb5f26c611f3bc94a7ed03f4bc5c85f7875ff2a01137f0f37bcb056863308cbe845acf85e4d203c52ce2438d9b2715450d8635215a08783100d6f8f0f7668914f68a4f0d6713fbfe1caacaabe63aafa4fd7bb6f67dcb0d84a866c92c87a2cf6a24456cd463de20f19b727ee474f57f007167395f2d8996de9f7c0059ad328fa2774c9e0bf07fd8c422b70be8318b65eeebc7b70b9e9d34388c8701720e50a418a286a2a890aa7952a5f1237883ec8f684578fbc90a0231fd613048a446368972985f3e1d33ba3fc1cdc8255c0f175d3e12b36a708d6ce14b3a153038aa6d01b851f04e4dd370bb0363a88f27a10d0857a3a5439542b5264437c7b69acf14a875ea5d7869ac892343b14969e2fb3f0811164fbea13f06dfb22fd0d13c745f78e077631f7d37e6896e2bc321198c73b0626c790a4668e11c4c5e0079ab8a8b62f06175c27a693b0888bc5fe177fef65a846a29b392e1e6434c1de91c6487ac502b3417bc9c8bd369c8f091a0f89d24185e301db9e4fd3e2884f71559e47e8bef5e8ad8c2c35625f652d350ff6d5e2edf1428c8f2404a3e6957fd24a83412ca15edb14c0814cc27eb66bfc57e16df687530e1900c9968bd57985b4feb3ee744d1b037856aa3e828bc42ff6f0c66deb0a1e949887acba22a1363b57e87d76d41797242c4996ee574c71f0691ebd19ec58b3783f80f8c040e7d92fb376836a372c99c6ed15648278815fd65305e79487a29a31309a66037466bd27f0432c66b9b2dbca8dd9a80c3604de07e3aade067e227b3a3deb0fd8f5de2564976f64c24d6911b3ddb8e64c67ab3c8412de5861a5e109d07d05873d07eb96afcf62d40b32df38ffbe889abe8bf057a5a2029faa1889a99d0fd4e96d7dfa73ecdc5e6533d29a053b1300b4ee7d845d34ecbf7efe3442ed5dc600a120f3835a3483283c305d18478b1bd415cf129c224e87dfbbb6e5778222ef842b338cfdc984eee5dedbb4f13314568923c40dde83eea7415abee003370519d1f7b2dd57ca28315550dd18f39e476f427b22f79be535ec6b7f78bb5a3a9bf0ee150a842cfb9c937db4d0740b052a8afec6f3067f3bfebeaf13efe966f363fdda36af050c3f3a3e9244dcf41c57864dccc43e5081c9abdb29e113725ff4651889ab7ea846843f8371acf37b7ec2b60e92fe50eb3ea398a962886ea9d46ca8d0ab102fce78ab0f867dcaf26d05470529ec98ff49271747777f154172a72d879149b424253f0a3be2d424999553c702c28f6005c8c5e4af4681b524193af2c3086372744ad8a69b369a58e5e17440c628b9648ca8b94e27ab65d99bdf6917f9d5fbd299a7383c55e3d52ea9f597e5febf6fc663fecb92532d6f36be86867979ed7286f706b6cc762e60ba94278954a3b8487b3ea8b4d79e81554abe75365859383d96392e47c8a8875f17c514cbd8ece20dd615ad539d743813612f7594a64655d0f14c5d1ab7bc8119b6b7fa50373e42657cb58f48a81f8b496ce984b4259e707c2811d47932b810764ef80e8110144e1645cf77dc1deea41c8857cec547a44cb6353475447bfdfc48861cd90a4262aaddfec39c74da1cf49c2333207eb82cc1a5237f6ead5597459089f1a84f5cd31631e8acc2753d57d46a0980065b7b87417f5caf8483ce8b2b6fba6653bf0e8f4ee2795988509667fcc76e2b42b2be84490fa0c7a18c1702cfa4818762ff7dd658685c7f21bcc8dada3e38d235b7fa9bcd34fcca6569343b07d7f985f8b8144a27ff852a1143c2fe2426fd0823cc3950770dd4251bdee1211395c412cf3cca9cc4392196ac3cac0bdaaaffcfca6e3100266a98b6c50abd1d73564233810a0902ba2ca24164e38f62b072ca80c2acc92fb120b5b6f40be6211454efe4aa58b6954fbafc39d92ca99f21f53867393ca99764c9c6c1c5d46c595ba442aebe32051ef94f2630f0b203007f823d18c345eed4935cf57a5674d293a9412877af47b34a8a49582c7ca59cfe12a6637466b31bab86935ae3e40f6bfab715c1fb12ffae396e56e653dd6bcb6133a369b1b1dcf6b87b224ec3096a88a4b6f16d6fcf60da86767d24ff97d3eb986ffebb03cc251f813d3b0361c5351a0898f28fab33ba9069c1e8fb001b5334e8b48fd30fd097bd3525ca7866c4e9b7134e84313a233d09f60f350f694b2162a8e8570b159f203b6bc575f8d75d17a2440a96f0345c2a9a97b64faedc807bd5c62d28a938310da8b883239a9743be679a3b8e8f2c05609cf7d38ca2ae6fc920349cb2c247e72ae758550b2835bef7825b6d72dfe4c6bdae653cb68d89f424b008ec8cdd68dc689ddfde3d8ad48b6840c5d33a57f834b73bc3e667f8765b57f4dadd66512b1548ad5c8ccaca8578483d3cd5b35d0c6144c5aa6a46e87dbed80c6c8e23fcc7df59925a68be133877303a7d7a0aebad720289628f614ca5404b262dee7636902176e08667ac8c26c3044a3b71ccc3ece8a21766fe273d02a1c749650d4db066e0fa155951a91dc1266eadd2158d230f7f858849f1127fc59e05d99662c3e69f0a5b78a659670e5c8d7680b2b06eb4183da2820eebffeef68f70af265161d9a5aa2d71e6e7575aa15e4fcf0edf21e6d0bc68858602c17439f451ab13f1d72b0659393a7735af1412a61adaaae24ae8804763ca08dea77fb990c0d6b6dcbec191729038fc90d4cf9a752690888787a993fa9eac57c5dd94783f9bf57fb599db5109bc7496664d014d0b162b835e444d21bb0c82ca4ecb19750abb0a5838a3d7773186a44493f3df058e2fe1bddf2606a85b325fc75a8e78019a694ea3816bcd0a8fcdecd95db57f306dc1e52772abf3041aad0bf9db2b4460cc4858a91f6ad59a0bae32e86ba0ed3668ca9fa1abf64e3733abd7f70af0b50df5e0e73bc706f494133256b850bdae8001a9f357b337806a87459b5fd2c244957ee7ebe263af14bfa3114f9b18fcc4d064af722f245d415565d98cff98be9450af5e427e068e67c60f31883dbfc17bb203657130bb30b7f2d8adaef2e4336779d2c98392f7a07007ba4c3d97f6620426ddab407ff1d91ddff0e2a703f2d1ee70a5e130592f97ff7ba4105bb3a1240fff1807b55196156c8dae66d71cd5c77b6993cd0780bfba91b7e97bc3133739ef8649807f3259edd19556f281a859eb9060654c6afa8f1088527b959dca9be75617c05aabde17ad036ff1354caa7325ef5ce0eab26e352f2d9e4e0aefd362966e72cae835c40631c12052a90f88d12b6c78a8239f1d249733108ef4f936ad2612508fe7f5bec721965e39288539168a2dd65fd61ef0d6fade92503783959664be280084537a0a591b4a52c69c69dab6102a4050d73b6024673a7e18111c6546bdbfde52ba6cb0c6681126fb1d1bbe67674dd9de</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>观后有感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>观后有感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:final、finally和finalize的区别是什么？</title>
    <link href="/2022/07/19/final,finally%E5%92%8Cfinalize%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/07/19/final,finally%E5%92%8Cfinalize%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="final、finally和finalize的区别是什么？"><a href="#final、finally和finalize的区别是什么？" class="headerlink" title="final、finally和finalize的区别是什么？"></a>final、finally和finalize的区别是什么？</h1><ol><li><h4 id="final用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。"><a href="#final用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。" class="headerlink" title="final用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。"></a>final用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。</h4></li><li><h4 id="finally作为异常处理的一部分，只能在try-x2F-catch语句中使用，finally附带一个语句块用来表示这个语-句最终一定被执行，经常被用在需要释放资源的情况下。"><a href="#finally作为异常处理的一部分，只能在try-x2F-catch语句中使用，finally附带一个语句块用来表示这个语-句最终一定被执行，经常被用在需要释放资源的情况下。" class="headerlink" title="finally作为异常处理的一部分，只能在try&#x2F;catch语句中使用，finally附带一个语句块用来表示这个语 句最终一定被执行，经常被用在需要释放资源的情况下。"></a>finally作为异常处理的一部分，只能在try&#x2F;catch语句中使用，finally附带一个语句块用来表示这个语 句最终一定被执行，经常被用在需要释放资源的情况下。</h4></li><li><h4 id="finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的finalize-方法。当垃-圾回收器准备好释放对象占用空间时，首先会调用finalize-方法，并在下一次垃圾回收动作发生时-真正回收对象占用的内存。"><a href="#finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的finalize-方法。当垃-圾回收器准备好释放对象占用空间时，首先会调用finalize-方法，并在下一次垃圾回收动作发生时-真正回收对象占用的内存。" class="headerlink" title="finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的finalize()方法。当垃 圾回收器准备好释放对象占用空间时，首先会调用finalize()方法，并在下一次垃圾回收动作发生时 真正回收对象占用的内存。"></a>finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的finalize()方法。当垃 圾回收器准备好释放对象占用空间时，首先会调用finalize()方法，并在下一次垃圾回收动作发生时 真正回收对象占用的内存。</h4></li></ol>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述泛型擦除</title>
    <link href="/2022/07/18/%E7%AE%80%E8%BF%B0%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/"/>
    <url>/2022/07/18/%E7%AE%80%E8%BF%B0%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="简述泛型擦除"><a href="#简述泛型擦除" class="headerlink" title="简述泛型擦除"></a>简述泛型擦除</h1><h3 id="Java编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为-泛型擦除。"><a href="#Java编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为-泛型擦除。" class="headerlink" title="Java编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为 泛型擦除。"></a>Java编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为 泛型擦除。</h3>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述泛型</title>
    <link href="/2022/07/17/%E7%AE%80%E8%BF%B0%E6%B3%9B%E5%9E%8B/"/>
    <url>/2022/07/17/%E7%AE%80%E8%BF%B0%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="简述泛型"><a href="#简述泛型" class="headerlink" title="简述泛型"></a>简述泛型</h1><h3 id="泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作-的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛-型方法。"><a href="#泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作-的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛-型方法。" class="headerlink" title="泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作 的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛 型方法。"></a>泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作 的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛 型方法。</h3>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述java的多态</title>
    <link href="/2022/07/16/%E7%AE%80%E8%BF%B0Java%E5%A4%9A%E6%80%81/"/>
    <url>/2022/07/16/%E7%AE%80%E8%BF%B0Java%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="简述java的多态"><a href="#简述java的多态" class="headerlink" title="简述java的多态"></a>简述java的多态</h1><h3 id="Java多态可以分为编译时多态和运行时多态。"><a href="#Java多态可以分为编译时多态和运行时多态。" class="headerlink" title="Java多态可以分为编译时多态和运行时多态。"></a>Java多态可以分为编译时多态和运行时多态。</h3><h3 id="编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。"><a href="#编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。" class="headerlink" title="编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。"></a>编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。</h3><h3 id="运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。"><a href="#运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。" class="headerlink" title="运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。"></a>运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。</h3><h3 id="运行时多态的实现：主要依靠方法表，方法表中最先存放的是Object类的方法，接下来是该类的父类的-方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个-方法表项，都被认作是父类的方法。因此可以实现运行时多态。"><a href="#运行时多态的实现：主要依靠方法表，方法表中最先存放的是Object类的方法，接下来是该类的父类的-方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个-方法表项，都被认作是父类的方法。因此可以实现运行时多态。" class="headerlink" title="运行时多态的实现：主要依靠方法表，方法表中最先存放的是Object类的方法，接下来是该类的父类的 方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个 方法表项，都被认作是父类的方法。因此可以实现运行时多态。"></a>运行时多态的实现：主要依靠方法表，方法表中最先存放的是Object类的方法，接下来是该类的父类的 方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个 方法表项，都被认作是父类的方法。因此可以实现运行时多态。</h3>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述重载与重写的区别</title>
    <link href="/2022/07/15/%E7%AE%80%E8%BF%B0%E9%87%8D%E8%BD%BD%E4%B8%8E%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/07/15/%E7%AE%80%E8%BF%B0%E9%87%8D%E8%BD%BD%E4%B8%8E%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="简述重载与重写的区别"><a href="#简述重载与重写的区别" class="headerlink" title="简述重载与重写的区别"></a>简述重载与重写的区别</h3><h3 id="重写即子类重写父类的方法，方法对应的形参和返回值类型都不能变。"><a href="#重写即子类重写父类的方法，方法对应的形参和返回值类型都不能变。" class="headerlink" title="重写即子类重写父类的方法，方法对应的形参和返回值类型都不能变。"></a>重写即子类重写父类的方法，方法对应的形参和返回值类型都不能变。</h3><h3 id="重载即在一个类中，方法名相同，参数类型或数量不同。"><a href="#重载即在一个类中，方法名相同，参数类型或数量不同。" class="headerlink" title="重载即在一个类中，方法名相同，参数类型或数量不同。"></a>重载即在一个类中，方法名相同，参数类型或数量不同。</h3>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:Java提供的多态机制</title>
    <link href="/2022/07/14/Java%E7%9A%84%E5%A4%9A%E6%80%81%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/07/14/Java%E7%9A%84%E5%A4%9A%E6%80%81%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Java提供的多态机制？"><a href="#Java提供的多态机制？" class="headerlink" title="Java提供的多态机制？"></a>Java提供的多态机制？</h1><h3 id="Java提供了两种用于多态的机制，分别是重载与覆盖。"><a href="#Java提供了两种用于多态的机制，分别是重载与覆盖。" class="headerlink" title="Java提供了两种用于多态的机制，分别是重载与覆盖。"></a>Java提供了两种用于多态的机制，分别是重载与覆盖。</h3><h3 id="1-重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定-调用哪个方法。"><a href="#1-重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定-调用哪个方法。" class="headerlink" title="1. 重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定 调用哪个方法。"></a>1. 重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定 调用哪个方法。</h3><h3 id="2-覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向-其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个-对象的方法，即需要到运行期才能确定调用哪个方法。"><a href="#2-覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向-其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个-对象的方法，即需要到运行期才能确定调用哪个方法。" class="headerlink" title="2. 覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向 其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个 对象的方法，即需要到运行期才能确定调用哪个方法。"></a>2. 覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向 其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个 对象的方法，即需要到运行期才能确定调用哪个方法。</h3>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:字节序定义以及Java属于哪种字节序</title>
    <link href="/2022/07/13/%E5%AD%97%E8%8A%82%E5%BA%8F%E5%AE%9A%E4%B9%89%E4%BB%A5%E5%8F%8AJava%E5%B1%9E%E4%BA%8E%E5%93%AA%E7%A7%8D%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    <url>/2022/07/13/%E5%AD%97%E8%8A%82%E5%BA%8F%E5%AE%9A%E4%B9%89%E4%BB%A5%E5%8F%8AJava%E5%B1%9E%E4%BA%8E%E5%93%AA%E7%A7%8D%E5%AD%97%E8%8A%82%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="字节序定义以及Java属于哪种字节序？"><a href="#字节序定义以及Java属于哪种字节序？" class="headerlink" title="字节序定义以及Java属于哪种字节序？"></a>字节序定义以及Java属于哪种字节序？</h1><h3 id="字节序是指多字节数据在计算机内存中存储或网络传输时个字节的存储顺序。通常由小端和大端两组方-式。"><a href="#字节序是指多字节数据在计算机内存中存储或网络传输时个字节的存储顺序。通常由小端和大端两组方-式。" class="headerlink" title="字节序是指多字节数据在计算机内存中存储或网络传输时个字节的存储顺序。通常由小端和大端两组方 式。"></a>字节序是指多字节数据在计算机内存中存储或网络传输时个字节的存储顺序。通常由小端和大端两组方 式。</h3><h3 id="1-小端-低位字节存放在内存的低地址端，高位字节存放在内存的高地址端。"><a href="#1-小端-低位字节存放在内存的低地址端，高位字节存放在内存的高地址端。" class="headerlink" title="1. 小端:低位字节存放在内存的低地址端，高位字节存放在内存的高地址端。"></a>1. 小端:低位字节存放在内存的低地址端，高位字节存放在内存的高地址端。</h3><h3 id="2-大端：高位字节存放在内存的低地址端，低位字节存放在内存的高地址端。"><a href="#2-大端：高位字节存放在内存的低地址端，低位字节存放在内存的高地址端。" class="headerlink" title="2. 大端：高位字节存放在内存的低地址端，低位字节存放在内存的高地址端。"></a>2. 大端：高位字节存放在内存的低地址端，低位字节存放在内存的高地址端。</h3><h3 id="Java语言的字节序是大端。"><a href="#Java语言的字节序是大端。" class="headerlink" title="Java语言的字节序是大端。"></a>Java语言的字节序是大端。</h3>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:Java语言具有哪些特点？</title>
    <link href="/2022/07/12/Java%E8%AF%AD%E8%A8%80%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9/"/>
    <url>/2022/07/12/Java%E8%AF%AD%E8%A8%80%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Java语言具有哪些特点？"><a href="#Java语言具有哪些特点？" class="headerlink" title="Java语言具有哪些特点？"></a>Java语言具有哪些特点？</h1><h3 id="1-Java为纯面向对象的语言。它能够直接反应现实生活中的对象。"><a href="#1-Java为纯面向对象的语言。它能够直接反应现实生活中的对象。" class="headerlink" title="1. Java为纯面向对象的语言。它能够直接反应现实生活中的对象。"></a>1. Java为纯面向对象的语言。它能够直接反应现实生活中的对象。</h3><h3 id="2-具有平台无关性。java利用Java虚拟机运行字节码，无论是在Windows、Linux还是MacOS等其它-平台对Java程序进行编译，编译后的程序可在其它平台运行。"><a href="#2-具有平台无关性。java利用Java虚拟机运行字节码，无论是在Windows、Linux还是MacOS等其它-平台对Java程序进行编译，编译后的程序可在其它平台运行。" class="headerlink" title="2. 具有平台无关性。java利用Java虚拟机运行字节码，无论是在Windows、Linux还是MacOS等其它 平台对Java程序进行编译，编译后的程序可在其它平台运行。"></a>2. 具有平台无关性。java利用Java虚拟机运行字节码，无论是在Windows、Linux还是MacOS等其它 平台对Java程序进行编译，编译后的程序可在其它平台运行。</h3><h3 id="3-Java为解释型语言，编译器把Java代码编译成平台无关的中间代码，然后在JVM上解释运行，具有-很好的可移植性。"><a href="#3-Java为解释型语言，编译器把Java代码编译成平台无关的中间代码，然后在JVM上解释运行，具有-很好的可移植性。" class="headerlink" title="3. Java为解释型语言，编译器把Java代码编译成平台无关的中间代码，然后在JVM上解释运行，具有 很好的可移植性。"></a>3. Java为解释型语言，编译器把Java代码编译成平台无关的中间代码，然后在JVM上解释运行，具有 很好的可移植性。</h3><h3 id="4-Java提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收-器。"><a href="#4-Java提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收-器。" class="headerlink" title="4. Java提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收 器。"></a>4. Java提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收 器。</h3><h3 id="5-Java具有较好的安全性和健壮性。Java提供了异常处理和垃圾回收机制，去除了C-中难以理解的-指针特性。-6-Java语言提供了对Web应用开发的支持。"><a href="#5-Java具有较好的安全性和健壮性。Java提供了异常处理和垃圾回收机制，去除了C-中难以理解的-指针特性。-6-Java语言提供了对Web应用开发的支持。" class="headerlink" title="5. Java具有较好的安全性和健壮性。Java提供了异常处理和垃圾回收机制，去除了C++中难以理解的 指针特性。 6. Java语言提供了对Web应用开发的支持。"></a>5. Java具有较好的安全性和健壮性。Java提供了异常处理和垃圾回收机制，去除了C++中难以理解的 指针特性。 6. Java语言提供了对Web应用开发的支持。</h3>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:面向对象的三大特性？</title>
    <link href="/2022/07/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <url>/2022/07/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象的三大特性？"><a href="#面向对象的三大特性？" class="headerlink" title="面向对象的三大特性？"></a>面向对象的三大特性？</h1><h3 id="1-继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且-派生类可以修改或新增新的方法使之更适合特殊的需求。"><a href="#1-继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且-派生类可以修改或新增新的方法使之更适合特殊的需求。" class="headerlink" title="1. 继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且 派生类可以修改或新增新的方法使之更适合特殊的需求。"></a>1. 继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且 派生类可以修改或新增新的方法使之更适合特殊的需求。</h3><h3 id="2-封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的-进行信息隐藏。"><a href="#2-封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的-进行信息隐藏。" class="headerlink" title="2. 封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的 进行信息隐藏。"></a>2. 封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的 进行信息隐藏。</h3><h3 id="3-多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现-行为是不一样的。"><a href="#3-多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现-行为是不一样的。" class="headerlink" title="3. 多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现 行为是不一样的。"></a>3. 多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现 行为是不一样的。</h3>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:简述throw与throws的区别</title>
    <link href="/2022/07/10/%E7%AE%80%E8%BF%B0throw%E4%B8%8Ethrows%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/07/10/%E7%AE%80%E8%BF%B0throw%E4%B8%8Ethrows%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="简述throw与throws的区别"><a href="#简述throw与throws的区别" class="headerlink" title="简述throw与throws的区别"></a>简述throw与throws的区别</h1><h3 id="throw一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。"><a href="#throw一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。" class="headerlink" title="throw一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。"></a>throw一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。</h3><h3 id="throws一般用于方法声明上，代表该方法可能会抛出的异常列表。"><a href="#throws一般用于方法声明上，代表该方法可能会抛出的异常列表。" class="headerlink" title="throws一般用于方法声明上，代表该方法可能会抛出的异常列表。"></a>throws一般用于方法声明上，代表该方法可能会抛出的异常列表。</h3>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:Java关键字(static)</title>
    <link href="/2022/07/09/Java%E5%85%B3%E9%94%AE%E5%AD%97(static)/"/>
    <url>/2022/07/09/Java%E5%85%B3%E9%94%AE%E5%AD%97(static)/</url>
    
    <content type="html"><![CDATA[<h1 id="Java语言中关键字static的作用是什么？"><a href="#Java语言中关键字static的作用是什么？" class="headerlink" title="Java语言中关键字static的作用是什么？"></a>Java语言中关键字static的作用是什么？</h1><h3 id="static的主要作用有两个："><a href="#static的主要作用有两个：" class="headerlink" title="static的主要作用有两个："></a>static的主要作用有两个：</h3><ol><li><h5 id="为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。"><a href="#为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。" class="headerlink" title="为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。"></a>为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。</h5></li><li><h5 id="使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法-或使用类的属性。"><a href="#使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法-或使用类的属性。" class="headerlink" title="使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法 或使用类的属性。"></a>使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法 或使用类的属性。</h5></li></ol><h4 id="具体而言static又可分为4种使用方式："><a href="#具体而言static又可分为4种使用方式：" class="headerlink" title="具体而言static又可分为4种使用方式："></a>具体而言static又可分为4种使用方式：</h4><ol><li><h5 id="修饰成员变量。用static关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加-载，这个静态变量就会被分配空间，可以使用’’类-静态变量’’和’’对象-静态变量’’的方法使用。"><a href="#修饰成员变量。用static关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加-载，这个静态变量就会被分配空间，可以使用’’类-静态变量’’和’’对象-静态变量’’的方法使用。" class="headerlink" title="修饰成员变量。用static关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加 载，这个静态变量就会被分配空间，可以使用’’类.静态变量’’和’’对象.静态变量’’的方法使用。"></a>修饰成员变量。用static关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加 载，这个静态变量就会被分配空间，可以使用’’类.静态变量’’和’’对象.静态变量’’的方法使用。</h5></li><li><h5 id="修饰成员方法。static修饰的方法无需创建对象就可以被调用。static方法中不能使用this和super关-键字，不能调用非static方法，只能访问所属类的静态成员变量和静态成员方法。"><a href="#修饰成员方法。static修饰的方法无需创建对象就可以被调用。static方法中不能使用this和super关-键字，不能调用非static方法，只能访问所属类的静态成员变量和静态成员方法。" class="headerlink" title="修饰成员方法。static修饰的方法无需创建对象就可以被调用。static方法中不能使用this和super关 键字，不能调用非static方法，只能访问所属类的静态成员变量和静态成员方法。"></a>修饰成员方法。static修饰的方法无需创建对象就可以被调用。static方法中不能使用this和super关 键字，不能调用非static方法，只能访问所属类的静态成员变量和静态成员方法。</h5></li><li><h5 id="修饰代码块。JVM在加载类的时候会执行static代码块。static代码块常用于初始化静态变量。static-代码块只会被执行一次。"><a href="#修饰代码块。JVM在加载类的时候会执行static代码块。static代码块常用于初始化静态变量。static-代码块只会被执行一次。" class="headerlink" title="修饰代码块。JVM在加载类的时候会执行static代码块。static代码块常用于初始化静态变量。static 代码块只会被执行一次。"></a>修饰代码块。JVM在加载类的时候会执行static代码块。static代码块常用于初始化静态变量。static 代码块只会被执行一次。</h5></li><li><h5 id="修饰内部类。static内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同-的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法"><a href="#修饰内部类。static内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同-的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法" class="headerlink" title="修饰内部类。static内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同 的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法"></a>修饰内部类。static内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同 的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法</h5></li></ol>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:Java关键字(访问修饰符)</title>
    <link href="/2022/07/08/Java%E5%85%B3%E9%94%AE%E5%AD%97(%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6)/"/>
    <url>/2022/07/08/Java%E5%85%B3%E9%94%AE%E5%AD%97(%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6)/</url>
    
    <content type="html"><![CDATA[<h1 id="简述Java访问修饰符"><a href="#简述Java访问修饰符" class="headerlink" title="简述Java访问修饰符"></a>简述Java访问修饰符</h1><h4 id="default-默认访问修饰符，在同一包内可见"><a href="#default-默认访问修饰符，在同一包内可见" class="headerlink" title="default: 默认访问修饰符，在同一包内可见"></a>default: 默认访问修饰符，在同一包内可见</h4><h4 id="private-在同一类内可见，不能修饰类"><a href="#private-在同一类内可见，不能修饰类" class="headerlink" title="private: 在同一类内可见，不能修饰类"></a>private: 在同一类内可见，不能修饰类</h4><h4 id="protected-对同一包内的类和所有子类可见，不能修饰类"><a href="#protected-对同一包内的类和所有子类可见，不能修饰类" class="headerlink" title="protected : 对同一包内的类和所有子类可见，不能修饰类"></a>protected : 对同一包内的类和所有子类可见，不能修饰类</h4><h4 id="public-对所有类可见"><a href="#public-对所有类可见" class="headerlink" title="public: 对所有类可见"></a>public: 对所有类可见</h4><p>Java一共提供了3个访问修饰控制符：private、protected、public，代表了三种访问控制级别，另外还有一个不加任何访问控制符的访问控制级别，一共提供了4中访问控制级别。</p><p>我们在Java编程中「直接访问」一个成员变量或者成员方法，有两个形式</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、对象.成员变量<br><span class="hljs-number">2</span>、成员变量<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">第二种多见于类内访问本类的成员变量</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>我们将访问成员变量或者方法的范围限制在三个方面，分别讨论</p><ul><li>本类中</li><li>子类中</li><li>不同包的类中</li></ul><h2 id="一、private-当前类访问权限"><a href="#一、private-当前类访问权限" class="headerlink" title="一、private(当前类访问权限)"></a>一、private(当前类访问权限)</h2><p>如果类里的一个成员（包括成员变量、方法和构造器等）使用private访问控制符来修饰，则这个成员只能在「当前类的内部」被访问。很显然，个访问控制符用于修饰成员变量最合适，使用它来修饰成员变量就可以把成员变量隐藏在该类的内部。</p><blockquote><p>这里尤其要提一下的是，在子类中我们不能通过第二种方式直接访问父类的private修饰成员变量或者方法，这也就是私有成员不能被继承的由来。</p></blockquote><p>本类中：直接通过成员变量名访问</p><p>子类中：不能直接通过两种方式中的任意一种访问</p><p>不同包的类中：不能直接通过两种方式中的任意一种访问</p><h2 id="二、default（包访问权限）"><a href="#二、default（包访问权限）" class="headerlink" title="二、default（包访问权限）"></a>二、default（包访问权限）</h2><p>如果类里的一个成员（包括成员变量、方法和构造器等）或者一个外部类不使用任何访控制符修饰，就称它是包访问权限的。</p><p>default 访问控制的成员或外部类可以被相同包下的其他类访问。</p><p>本类中：直接通过成员变量名访问</p><p>同包的子类中：直接通过成员变量名访问</p><p>同包的其他类：可以通过第二种方式访问</p><p>不同包的类（包括子类）中：不能直接通过两种方式中的任意一种访问</p><h2 id="三、protected（子类访问权限）"><a href="#三、protected（子类访问权限）" class="headerlink" title="三、protected（子类访问权限）"></a>三、protected（子类访问权限）</h2><p>如果一个成员（包括成员变量、方法和构造器等）使用protected访问控制符修饰，那么这个成员既可以被同一个包中的其他类访问，也可以被不同包中的子类访问。</p><p>在通常情况下，如果使用protected来修饰一个方法，通常是希望其子类来重写这个方法。</p><p>本类中：直接通过成员变量名访问</p><p>同包的子类中：直接通过成员变量名访问</p><p>同包的其他类：可以通过第二种方式访问</p><p>不同包的子类：直接通过成员变量名访问</p><p>不同包的类中：不能直接通过两种方式中的任意一种访问</p><h2 id="四、public（公共访问权限）"><a href="#四、public（公共访问权限）" class="headerlink" title="四、public（公共访问权限）"></a>四、public（公共访问权限）</h2><p>这是一个最宽松的访问控制级别，如果一个成员（包括成员变量、方法和构造器等）或者一个外部类使用public访问控制符修饰，那么这个成员或外部类就可以被所有类访问，不管访问类和被访问类是否处于同一个包中，是否具有父子继承关系。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>其实没有必要强行去记同一个包中怎么样、不同子类中怎么样，只要记住四种访问权限的名字，然后对于继承中对于访问权限的定义「私有成员不能被继承」就可以很好理解了。</p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:关于null的几种处理方式</title>
    <link href="/2022/07/07/%E5%85%B3%E4%BA%8Enull%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/07/07/%E5%85%B3%E4%BA%8Enull%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="关于null的几种处理方式"><a href="#关于null的几种处理方式" class="headerlink" title="关于null的几种处理方式"></a>关于null的几种处理方式</h1><h4 id="Java开发中-我们常常会遇到NullPointerException-空指针异常-的问题-java的发明者也曾承认这是个巨大的设计错误"><a href="#Java开发中-我们常常会遇到NullPointerException-空指针异常-的问题-java的发明者也曾承认这是个巨大的设计错误" class="headerlink" title="Java开发中,我们常常会遇到NullPointerException(空指针异常)的问题,java的发明者也曾承认这是个巨大的设计错误."></a>Java开发中,我们常常会遇到NullPointerException(空指针异常)的问题,java的发明者也曾承认这是个巨大的设计错误.</h4><p>关于null,我们应该了解到如下几点,从而避免很多由null引起的错误.</p><ul><li>大小写敏感</li><li>null是任何引用类型的初始值</li><li>null既不是对象,也不是类型,你可以将它赋值给任何引用类型</li><li>null不能赋值给基本数据类型</li><li>将null赋值给包装类,自动拆箱会报NPE</li><li>带有null的引用类型变量,instanceof会报false</li><li>静态变量为null调用静态方法不会抛出NPE</li><li>建议使用null值安全的方法</li><li>使用&#x3D;&#x3D;或者!&#x3D;判断null</li></ul><h4 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h4><p>首先，null是Java中的关键字，像是public、static、final。它是大小写敏感的，你不能将null写 成Null或NULL,编辑器将不能识别它们然后报错。 这个问题已经几乎不会出现，因为eclipse和ldea编译器已经给出了编译器提示，所以你不用考虑这 个问题。</p><h4 id="null是任何引用类型的初始值"><a href="#null是任何引用类型的初始值" class="headerlink" title="null是任何引用类型的初始值"></a>null是任何引用类型的初始值</h4><p>null是所有引用类型的默认值，Java中的任何引用变量都将nul作为默认值，也就是说所有Object类下的引用类型默认值都是null。</p><p>这对所有的引用变量都适用。就像是基本类型的默认值一样，例如int的默认值是0，boolean的默认值是false。 下面是基本数据类型的初始值</p><table><thead><tr><th>类型</th><th>初始值</th></tr></thead><tbody><tr><td>boolean</td><td>false</td></tr><tr><td>char</td><td>&#x2F;u0000</td></tr><tr><td>byte</td><td>(byte)0</td></tr><tr><td>short</td><td>(short)0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>double</td><td>0.0d</td></tr><tr><td>float</td><td>0.0f</td></tr></tbody></table><h4 id="null只是一种特殊的值"><a href="#null只是一种特殊的值" class="headerlink" title="null只是一种特殊的值"></a>null只是一种特殊的值</h4><p>null既不是对象也不是一种类型，它仅是一种特殊的值，你可以将它赋予任何引用类型，你可以将nuIl转换为任何引用类型</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">itr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Double</span> <span class="hljs-variable">dou</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> (Integer) <span class="hljs-literal">null</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> (String)<span class="hljs-literal">null</span>;<br>System.out.println(<span class="hljs-string">&quot;integer = &quot;</span> + integer);<br>System.out.println(<span class="hljs-string">&quot;string = &quot;</span> + string);<br>&#125;<br><br>[Finished in 567ms]<br>integer = <span class="hljs-type">null</span><br><span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>你可以看到在编译期和运行期内，将null转换成任何的引用类型都是可行的，并且不会抛出空指针异 常。 </p><h4 id="null只能赋值给引用变量，不能赋值给基本类型变量。"><a href="#null只能赋值给引用变量，不能赋值给基本类型变量。" class="headerlink" title="null只能赋值给引用变量，不能赋值给基本类型变量。"></a>null只能赋值给引用变量，不能赋值给基本类型变量。</h4><h4 id="持有null的包装类在进行自动拆箱的时候，不能完成转换，会抛出空指针异常，并且null也不能和基本数据类型进行对比"><a href="#持有null的包装类在进行自动拆箱的时候，不能完成转换，会抛出空指针异常，并且null也不能和基本数据类型进行对比" class="headerlink" title="持有null的包装类在进行自动拆箱的时候，不能完成转换，会抛出空指针异常，并且null也不能和基本数据类型进行对比"></a>持有null的包装类在进行自动拆箱的时候，不能完成转换，会抛出空指针异常，并且null也不能和基本数据类型进行对比</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">itr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>System.out.println(itr == i);<br>&#125;<br>&#125;<br><br>[Finished in <span class="hljs-number">1.</span>2s]<br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.NullPointerException<br>at Test.main(Test.java:<span class="hljs-number">5</span>)<br><br></code></pre></td></tr></table></figure><h4 id="使用带有null值的引用对象-instanceof操作会返回false"><a href="#使用带有null值的引用对象-instanceof操作会返回false" class="headerlink" title="使用带有null值的引用对象,instanceof操作会返回false"></a>使用带有null值的引用对象,instanceof操作会返回false</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">isNull</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// instanceof = isInstance 方法</span><br><span class="hljs-keyword">if</span>(isNull <span class="hljs-keyword">instanceof</span> Integer)&#123;<br>System.out.println(<span class="hljs-string">&quot;isNull is instanceof Integer&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;isNull is not instanceof Integer&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br>[Finished in 572ms]<br>isNull is not <span class="hljs-keyword">instanceof</span> Integer<br></code></pre></td></tr></table></figure><p>这是instanceof操作符一个很重要的特性，使得对类型强制转换检查很有用</p><p> 静态变量为null调用静态方法不会抛出NullPointerException。因为静态方法使用了静态绑定。 </p><p>使用Null-Safe方法 你应该使用nul-safe安全的方法，java类库中有很多工具类都提供了静态方法，例如基本数据类型的 包装类，Integer,Double等。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullSafeMethod</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String number;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> String.valueOf(number);<br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> number.toString();<br>System.out.println(<span class="hljs-string">&quot;s = &quot;</span> + s);<br>System.out.println(<span class="hljs-string">&quot;string = &quot;</span> + string);<br>&#125;<br>&#125;<br><br>[Finished in 565ms]<br>s = <span class="hljs-literal">null</span><br>计划输出:string = <span class="hljs-literal">null</span>,但因报错无法输出<br>报错原因<span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> number.toString()此行代码<br></code></pre></td></tr></table></figure><p>number没有赋值，所以默认为null,使用String.value(number)静态方法没有抛出空指针异常， 但是使用toString()却抛出了空指针异常。所以尽量使用对象的静态方法。 </p><h4 id="null判断"><a href="#null判断" class="headerlink" title="null判断"></a>null判断</h4><p>你可以使用&#x3D;或者&#x3D;操作来比较null值，但是不能使用其他算法或者逻辑操作，例如小于或者 大于。跟SQL不一样，在Java中null&#x3D;&#x3D;null将返回true,如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String str1;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String str2;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;str1 == str2 ? &quot;</span> + str1 ==str2);<br>System.out.println(<span class="hljs-literal">null</span> == <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br><br>[Finished in 567ms]<br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:Java 的一点知识点?</title>
    <link href="/2022/07/06/Java-%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2022/07/06/Java-%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-语言有哪些特点-Write-Once-Run-Anywhere"><a href="#Java-语言有哪些特点-Write-Once-Run-Anywhere" class="headerlink" title="Java 语言有哪些特点(Write Once, Run Anywhere)?"></a>Java 语言有哪些特点(Write Once, Run Anywhere)?</h1><ol><li><h4 id="简单易学；"><a href="#简单易学；" class="headerlink" title="简单易学；"></a>简单易学；</h4></li><li><h4 id="面向对象（封装，继承，多态）；"><a href="#面向对象（封装，继承，多态）；" class="headerlink" title="面向对象（封装，继承，多态）；"></a>面向对象（封装，继承，多态）；</h4></li><li><h4 id="平台无关性（-Java-虚拟机实现平台无关性）；"><a href="#平台无关性（-Java-虚拟机实现平台无关性）；" class="headerlink" title="平台无关性（ Java 虚拟机实现平台无关性）；"></a>平台无关性（ Java 虚拟机实现平台无关性）；</h4></li><li><h4 id="支持多线程（-C-语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而-Java-语言却提供了多线程支持）；"><a href="#支持多线程（-C-语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而-Java-语言却提供了多线程支持）；" class="headerlink" title="支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；"></a>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</h4></li><li><h4 id="可靠性；"><a href="#可靠性；" class="headerlink" title="可靠性；"></a>可靠性；</h4></li><li><h4 id="安全性；"><a href="#安全性；" class="headerlink" title="安全性；"></a>安全性；</h4></li><li><h4 id="支持网络编程并且很方便（-Java-语言诞生本身就是为简化网络编程设计的，因此-Java-语言不仅支持网络编程而且很方便）；"><a href="#支持网络编程并且很方便（-Java-语言诞生本身就是为简化网络编程设计的，因此-Java-语言不仅支持网络编程而且很方便）；" class="headerlink" title="支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；"></a>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</h4></li><li><h4 id="编译与解释并存；"><a href="#编译与解释并存；" class="headerlink" title="编译与解释并存；"></a>编译与解释并存；</h4></li></ol><h1 id="Java-和-C-的区别"><a href="#Java-和-C-的区别" class="headerlink" title="Java 和 C++ 的区别?"></a>Java 和 C++ 的区别?</h1><p>   我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过 C++，也要记下来。</p><p>   虽然，Java 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但是，它们还是有挺多不相同的地方：</p><ul><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。</li><li>C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载(例外:String看似对操作符进行进行了重载)（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。</li><li>……</li></ul><h1 id="简述重载与重写的区别"><a href="#简述重载与重写的区别" class="headerlink" title="简述重载与重写的区别"></a>简述重载与重写的区别</h1><h4 id="重写即子类重写父类的方法，方法对应的形参和返回值类型都不能变。"><a href="#重写即子类重写父类的方法，方法对应的形参和返回值类型都不能变。" class="headerlink" title="重写即子类重写父类的方法，方法对应的形参和返回值类型都不能变。"></a>重写即子类重写父类的方法，方法对应的形参和返回值类型都不能变。</h4><ul><li><p>重写的方法必须与父类保持一致,包括返回值类型,方法名,参数列表</p></li><li><p>重写的方法可以使用@Override注释来标识</p></li><li><p>子类中的重写方法的访问权限不能低于父类中的方法的访问权限</p></li></ul><h4 id="重载即在一个类中，方法名相同，参数类型或数量不同。"><a href="#重载即在一个类中，方法名相同，参数类型或数量不同。" class="headerlink" title="重载即在一个类中，方法名相同，参数类型或数量不同。"></a>重载即在一个类中，方法名相同，参数类型或数量不同。</h4><ul><li>每个重载的方法都有独一无二的参数列表</li></ul>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:String的一点知识</title>
    <link href="/2022/07/05/String%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/07/05/String%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="String和StringBuffer有什么区别？"><a href="#String和StringBuffer有什么区别？" class="headerlink" title="String和StringBuffer有什么区别？"></a>String和StringBuffer有什么区别？</h1><h4 id="String用于字符串操作，属于不可变类。String对象一旦被创建，其值将不能被改变。而StringBuffer是-可变类，当对象创建后，仍然可以对其值进行修改。"><a href="#String用于字符串操作，属于不可变类。String对象一旦被创建，其值将不能被改变。而StringBuffer是-可变类，当对象创建后，仍然可以对其值进行修改。" class="headerlink" title="String用于字符串操作，属于不可变类。String对象一旦被创建，其值将不能被改变。而StringBuffer是 可变类，当对象创建后，仍然可以对其值进行修改。"></a>String用于字符串操作，属于不可变类。String对象一旦被创建，其值将不能被改变。而StringBuffer是 可变类，当对象创建后，仍然可以对其值进行修改。</h4><h1 id="为什么要把String设计为不变量？"><a href="#为什么要把String设计为不变量？" class="headerlink" title="为什么要把String设计为不变量？"></a>为什么要把String设计为不变量？</h1><ol><li><h4 id="节省空间：字符串常量存储在JVM的字符串池中可以被用户共享。"><a href="#节省空间：字符串常量存储在JVM的字符串池中可以被用户共享。" class="headerlink" title="节省空间：字符串常量存储在JVM的字符串池中可以被用户共享。"></a>节省空间：字符串常量存储在JVM的字符串池中可以被用户共享。</h4></li><li><h4 id="提高效率-String会被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。"><a href="#提高效率-String会被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。" class="headerlink" title="提高效率:String会被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。"></a>提高效率:String会被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。</h4></li><li><h4 id="安全：String常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修-改。"><a href="#安全：String常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修-改。" class="headerlink" title="安全：String常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修 改。"></a>安全：String常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修 改。</h4></li></ol><h1 id="简述String-x2F-StringBuffer与StringBuilder"><a href="#简述String-x2F-StringBuffer与StringBuilder" class="headerlink" title="简述String&#x2F;StringBuffer与StringBuilder"></a>简述String&#x2F;StringBuffer与StringBuilder</h1><h4 id="String类采用利用final修饰的字符数组进行字符串保存，因此不可变。如果对String类型对象修改，需要-新建对象，将老字符和新增加的字符一并存进去。"><a href="#String类采用利用final修饰的字符数组进行字符串保存，因此不可变。如果对String类型对象修改，需要-新建对象，将老字符和新增加的字符一并存进去。" class="headerlink" title="String类采用利用final修饰的字符数组进行字符串保存，因此不可变。如果对String类型对象修改，需要 新建对象，将老字符和新增加的字符一并存进去。"></a>String类采用利用final修饰的字符数组进行字符串保存，因此不可变。如果对String类型对象修改，需要 新建对象，将老字符和新增加的字符一并存进去。</h4><h4 id="StringBuilder，采用无final修饰的字符数组进行保存，因此可变。但线程不安全。"><a href="#StringBuilder，采用无final修饰的字符数组进行保存，因此可变。但线程不安全。" class="headerlink" title="StringBuilder，采用无final修饰的字符数组进行保存，因此可变。但线程不安全。"></a>StringBuilder，采用无final修饰的字符数组进行保存，因此可变。但线程不安全。</h4><h4 id="StringBuffer，采用无final修饰的字符数组进行保存，可理解为实现线程安全的StringBuilder。"><a href="#StringBuffer，采用无final修饰的字符数组进行保存，可理解为实现线程安全的StringBuilder。" class="headerlink" title="StringBuffer，采用无final修饰的字符数组进行保存，可理解为实现线程安全的StringBuilder。"></a>StringBuffer，采用无final修饰的字符数组进行保存，可理解为实现线程安全的StringBuilder。</h4><h1 id="String-属于基础的数据类型吗？"><a href="#String-属于基础的数据类型吗？" class="headerlink" title="String 属于基础的数据类型吗？"></a>String 属于基础的数据类型吗？</h1><h4 id="不属于-属于引用数据类型"><a href="#不属于-属于引用数据类型" class="headerlink" title="不属于,属于引用数据类型"></a>不属于,属于引用数据类型</h4><h4 id="基础数据类型有四类八种"><a href="#基础数据类型有四类八种" class="headerlink" title="基础数据类型有四类八种"></a>基础数据类型有四类八种</h4><ul><li>整数型:byte,short,int,long<ul><li>byte:字节,1byte &#x3D; 8bits,默认值为0</li><li>short:两字节,16位,默认值0</li><li>int:四字节,32位,0</li><li>long:八字节,64位,0</li><li>占用空间long&gt;int&gt;short&gt;byte</li></ul></li><li>浮点型:float,double<ul><li>单精度float,占用四位,1float &#x3D; 32bits,默认值:0.0f;</li><li>双精度double,占用8位,1double &#x3D; 64bits,默认值0.0d;</li></ul></li><li>字符型:char<ul><li>单一的16位Unicode字符</li><li>最小值\u0000</li><li>最大值\uffff</li></ul></li><li>布尔型:boolean</li></ul><h1 id="Java-中操作字符串都有哪些类？它们之间有什么区别？-同上"><a href="#Java-中操作字符串都有哪些类？它们之间有什么区别？-同上" class="headerlink" title="Java 中操作字符串都有哪些类？它们之间有什么区别？(同上)"></a>Java 中操作字符串都有哪些类？它们之间有什么区别？(同上)</h1><h4 id="操作字符串的类有：String、StringBuffer、StringBuilder。"><a href="#操作字符串的类有：String、StringBuffer、StringBuilder。" class="headerlink" title="操作字符串的类有：String、StringBuffer、StringBuilder。"></a>操作字符串的类有：String、StringBuffer、StringBuilder。</h4><h4 id="String-和-StringBuffer、StringBuilder-的区别在于-String-声明的是不可变的对象，-每次操作都会生成新的-String-对象，然后将指针指向新的-String-对象，而-StringBuffer、-StringBuilder-可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下-最好不要使用-String。-StringBuffer-和-StringBuilder-最大的区别在于，StringBuffer-是线程安全的，而-StringBuilder-是非线程安全的，但-StringBuilder-的性能却高于-StringBuffer，所以-在单线程环境下推荐使用-StringBuilder，多线程环境下推荐使用-StringBuffer。"><a href="#String-和-StringBuffer、StringBuilder-的区别在于-String-声明的是不可变的对象，-每次操作都会生成新的-String-对象，然后将指针指向新的-String-对象，而-StringBuffer、-StringBuilder-可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下-最好不要使用-String。-StringBuffer-和-StringBuilder-最大的区别在于，StringBuffer-是线程安全的，而-StringBuilder-是非线程安全的，但-StringBuilder-的性能却高于-StringBuffer，所以-在单线程环境下推荐使用-StringBuilder，多线程环境下推荐使用-StringBuffer。" class="headerlink" title="String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象， 每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、 StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下 最好不要使用 String。 StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以 在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。"></a>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象， 每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、 StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下 最好不要使用 String。 StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以 在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</h4><h1 id="String-str-x3D-”i”与-String-str-x3D-new-String-“i”-一样吗？"><a href="#String-str-x3D-”i”与-String-str-x3D-new-String-“i”-一样吗？" class="headerlink" title="String str&#x3D;”i”与 String str&#x3D;new String(“i”)一样吗？"></a>String str&#x3D;”i”与 String str&#x3D;new String(“i”)一样吗？</h1><h4 id="不一样，因为内存的分配方式不一样。String-str-x3D-”i”的方式，Java-虚拟机会将其分配到-常量池中；而-String-str-x3D-new-String-“i”-则会被分到堆内存中。"><a href="#不一样，因为内存的分配方式不一样。String-str-x3D-”i”的方式，Java-虚拟机会将其分配到-常量池中；而-String-str-x3D-new-String-“i”-则会被分到堆内存中。" class="headerlink" title="不一样，因为内存的分配方式不一样。String str&#x3D;”i”的方式，Java 虚拟机会将其分配到 常量池中；而 String str&#x3D;new String(“i”) 则会被分到堆内存中。"></a>不一样，因为内存的分配方式不一样。String str&#x3D;”i”的方式，Java 虚拟机会将其分配到 常量池中；而 String str&#x3D;new String(“i”) 则会被分到堆内存中。</h4><h1 id="如何将字符串反转？"><a href="#如何将字符串反转？" class="headerlink" title="如何将字符串反转？"></a>如何将字符串反转？</h1><h4 id="使用-StringBuilder-或者-stringBuffer-的-reverse-方法。-示例代码："><a href="#使用-StringBuilder-或者-stringBuffer-的-reverse-方法。-示例代码：" class="headerlink" title="使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。 示例代码："></a>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。 示例代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// StringBuffer reverse</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>stringBuffer. append(<span class="hljs-string">&quot;abcdefg&quot;</span>);<br>System. out. println(stringBuffer. reverse()); <span class="hljs-comment">// gfedcba</span><br><span class="hljs-comment">// StringBuilder reverse</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>stringBuilder. append(<span class="hljs-string">&quot;abcdefg&quot;</span>);<br>System. out. println(stringBuilder. reverse()); <span class="hljs-comment">// gfedcba</span><br></code></pre></td></tr></table></figure><h1 id="String-类的常用方法都有那些？"><a href="#String-类的常用方法都有那些？" class="headerlink" title="String 类的常用方法都有那些？"></a>String 类的常用方法都有那些？</h1><p>• indexOf()：返回指定字符的索引。 </p><p>• charAt()：返回指定索引处的字符。 </p><p>• replace()：字符串替换。 </p><p>• trim()：去除字符串两端空白。 </p><p>• split()：分割字符串，返回一个分割后的字符串数组。 </p><p>• getBytes()：返回字符串的 byte 类型数组。 </p><p>• length()：返回字符串长度。 </p><p>• toLowerCase()：将字符串转成小写字母。 </p><p>• toUpperCase()：将字符串转成大写字符。 </p><p>• substring()：截取字符串。</p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:成员变量 类变量 成员方法 类方法</title>
    <link href="/2022/07/04/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%B1%BB%E5%8F%98%E9%87%8F/"/>
    <url>/2022/07/04/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%B1%BB%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="变量辨析"><a href="#变量辨析" class="headerlink" title="变量辨析"></a>变量辨析</h1><h2 id="成员变量和局部变量区别"><a href="#成员变量和局部变量区别" class="headerlink" title="成员变量和局部变量区别"></a>成员变量和局部变量区别</h2><table><thead><tr><th></th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>位置不同</td><td>类中方法之外</td><td>类方法内</td></tr><tr><td>内存位置</td><td>堆(员)</td><td>栈(忽局)</td></tr><tr><td>生命周期</td><td>随对象</td><td>随方法</td></tr><tr><td>初始值</td><td>有默认初始值</td><td>无初始值,使用前需赋值</td></tr></tbody></table><p><strong>1、在类中的位置不同</strong></p><p>成员变量：在类中方法外面</p><p>局部变量：在方法或者代码块中，或者方法的声明上（即在参数列表中）</p><p><strong>2、在内存中的位置不同，可以看看Java程序内存的简单分析</strong></p><p>成员变量：在堆中（方法区中的静态区）</p><p>局部变量：在栈中</p><p><strong>3、生命周期不同</strong></p><p>成员变量：随着对象的创建而存在，随着对象的消失而消失</p><p>局部变量：随着方法的调用或者代码块的执行而存在，随着方法的调用完毕或者代码块的执行完毕而消失</p><p><strong>4、初始值</strong></p><p>成员变量：有默认初始值</p><p>局部变量：没有默认初始值，使用之前需要赋值，否则编译器会报错（The local variable xxx may not have been initialized）</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">variab</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;成员变量&quot;</span>;<span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">stcvari</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;类变量属于成员变量的特例&quot;</span><br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//成员属性不能直接被外部访问或修改，需要get和set方法来访问或修改属性值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//成员属性一般用private关键字修改，表明为私有成员，禁止外部直接访问。</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">variab</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;局部变量&quot;</span>;<span class="hljs-comment">//局部变量</span><br>        System.out.println(variab);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stcshow</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<span class="hljs-comment">//类方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="成员变量-类变量-成员方法-类方法-static"><a href="#成员变量-类变量-成员方法-类方法-static" class="headerlink" title="成员变量 类变量 成员方法 类方法(static)"></a>成员变量 类变量 成员方法 类方法(<strong>static</strong>)</h2><p><strong>成员变量</strong>：包括实例变量和类变量，用static修饰的是类变量，不用static修饰的是实例变量，所有类的成员变量可以通过this来引用。</p><p><strong>类变量：</strong>静态域，静态字段，或叫静态变量，<strong>它属于该类所有实例共有的属性</strong>。而且所有的实例都可以修改这个类变量的值（这个类变量没有被final修饰的情况,因为final修饰后不能再次更改值），而且访问类变量的时候不用实例，<strong>直接用类名.的方式</strong>就可以。</p><p>成员方法：包括实例方法和类方法，用static的方法就是类方法，不用static修饰的就是实例方法。实例方法必须在创建实例之后才可以调用。</p><p><strong>类方法：</strong>和类变量一样，可以不用实例，直接用类就可以调用类方法。类方法这不是一个名词，只是单纯的类中描述的一个方法。加了static的方法，在程序中只运行一次，比如你两次实例化对象了，但你实际上只调用了一次static标识的方法。</p><p>在定义类时，经常需要抽象出它的属性，并定义在类的主体中。下面就来介绍与属性相关的内容。</p><p><strong>常量属性</strong></p><p>在类中定义的属性有常量属性和成员属性之分。<strong>常量属性用final关键字修饰，常量只能赋值一次，在程序中不能修改它的值。一般来说，在类中定义的常量属性用大写字母命名。</strong></p><p><strong>成员属性</strong></p><p>成员属性是抽象出来的类属性，<strong>成员属性不能直接被外部访问或修改，需要通过get和set方法来访问或修改属性值，成员属性一般用private关键字修改，表明为私有成员，禁止外部直接访问。</strong></p><p>成员属性的作用范围为整个类文件，作用范围就是成员属性的有效工作范围，在整个类文件中，成员属性都可以被访问和使用。</p><p><strong>（1）使用默认值初始化</strong></p><p>Java为声明的成员属性或变量提供了默认初始化机制，当声明成员属性或变量时即使没有显式赋值，Java也会为以下类型的成员属性或变量提供默认值：</p><p><strong>（2）使用显式值初始化</strong></p><p>声明成员属性的同时，进行赋值。</p><p><strong>（3）使用类构造方法初始化</strong></p><p>通过类构造方法来初始化属性（类构造方法后面介绍）</p><p><strong>成员变量</strong></p><p>变量前面已经介绍过了，变量的主要作用是存储程序运行过程中的临时数据，程序退出后，变量存储的内容不再存在。在类体中声明的变量称为成员变量。</p><p>成员变量的作用范围为整个类文件，在整个类文件中，成员变量都可以被访问和使用</p><p>与成员属性不同的是，成员变量无需提供get和set方法。成员变量一般用于类内部存储临时数据使用。</p><p><strong>局部变量</strong></p><p>在类方法体中声明的变量为局部变量。</p><p>局部变量的作用范围为方法体，在方法体中，局部变量可以被访问和使用，局部变量在方法体外无效，不能被访问和使用。</p><p>Java类的成员属性和成员变量有<strong>所区别****，</strong>成员属性是类所表述事物的共同特征，成员属性不能被外部直接访问和修改，必须通过类提供的get和set方法访问和修改成员属性。成员变量一般用于类内部存储临时数据使用，不需要提供get和set方法。</p><p>其实成员变量和成员属性有细微差别,属性要有get,set方法来访问,变量不需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//有get,set方法,视为成员属性</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">private</span> String gender;<span class="hljs-comment">//未提供get,set方法,视为成员变量</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//height也是Person的属性</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1.75f</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeight</span><span class="hljs-params">(<span class="hljs-type">float</span> height)</span> &#123;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
      <tag>Ctrl cv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:final关键字的作⽤是什么？</title>
    <link href="/2022/07/03/final%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <url>/2022/07/03/final%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<h1 id="final关键字的作用是什么？"><a href="#final关键字的作用是什么？" class="headerlink" title="final关键字的作用是什么？"></a>final关键字的作用是什么？</h1><p><strong>修饰类：表示类不可被继承修饰⽅法：表示方法不可被⼦类覆盖，但是可以重载</strong><br><strong>修饰变量：表示变量⼀旦被赋值就不可以更改它的值。</strong><br><strong>修饰成员变量：</strong><br><strong>如果final修饰的是类变量，只能在静态初始化块中指定初始值或者声明该类变量时指定初始值。</strong><br><strong>如果final修饰的是成员变量，可以在非静态初始化块、声明该变量或者构造器中执⾏初始值。</strong><br><strong>修饰局部变量：</strong><br><strong>系统不会为局部变量进行初始化，局部变量必须由程序员显示初始化。因此使⽤final修饰局部变量时，</strong><br><strong>即可以在定义时指定默认值（后⾯的代码不能对变量再赋值），也可以不指定默认值，而在后⾯的代码</strong><br><strong>中对final变量赋初值（仅⼀次）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalVar</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//再声明的时候就需要赋值 或者静态代码块赋值</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">static&#123;</span><br><span class="hljs-comment">a = 0;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//再声明的时候就需要赋值 或者代码块中赋值 或者构造器赋值</span><br><span class="hljs-comment">/*&#123;</span><br><span class="hljs-comment">b = 0;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> localA; <span class="hljs-comment">//局部变量只声明没有初始化，不会报错,与final⽆关。</span><br>localA = <span class="hljs-number">0</span>;<span class="hljs-comment">//在使⽤之前⼀定要赋值</span><br><span class="hljs-comment">//localA = 1; 但是不允许第⼆次赋值</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修饰类：表示类不可被继承</strong><br><strong>修饰⽅法：表示⽅法不可被⼦类覆盖，但是可以重载</strong><br><strong>修饰变量：表示变量⼀旦被赋值就不可以更改它的值。</strong></p><ul><li><strong>修饰成员变量：</strong></li></ul><p><strong>如果final修饰的是类变量，只能在静态初始化块中指定初始值或者声明该类变量时指定初始值。</strong><br><strong>如果final修饰的是成员变量，可以在非静态初始化块、声明该变量或者构造器中执行初始值。</strong></p><ul><li><strong>修饰局部变量：</strong></li></ul><p><strong>系统不会为局部变量进⾏初始化，局部变量必须由程序员显示初始化。因此使⽤final修饰局部变量时，</strong><br><strong>即可以在定义时指定默认值（后⾯的代码不能对变量再赋值），也可以不指定默认值，而在后⾯的代码</strong><br><strong>中对final变量赋初值（仅⼀次）</strong></p>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
      <tag>Ctrl cv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:==和equals⽅法之间的区别</title>
    <link href="/2022/07/02/==%E5%92%8Cequals%E6%96%B9%E6%B3%95%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <url>/2022/07/02/==%E5%92%8Cequals%E6%96%B9%E6%B3%95%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<h1 id="x3D-x3D-和equals⽅法之前的区别"><a href="#x3D-x3D-和equals⽅法之前的区别" class="headerlink" title="&#x3D;&#x3D;和equals⽅法之前的区别"></a>&#x3D;&#x3D;和equals⽅法之前的区别</h1><h5 id="x3D-x3D-：对⽐的是栈中的值，基本数据类型是变量值，引⽤类型是堆中内存对象的地址"><a href="#x3D-x3D-：对⽐的是栈中的值，基本数据类型是变量值，引⽤类型是堆中内存对象的地址" class="headerlink" title="&#x3D;&#x3D;：对⽐的是栈中的值，基本数据类型是变量值，引⽤类型是堆中内存对象的地址"></a>&#x3D;&#x3D;：对⽐的是栈中的值，基本数据类型是变量值，引⽤类型是堆中内存对象的地址</h5><h5 id="equals：object中默认也是采⽤-x3D-x3D-⽐较，通常会重写"><a href="#equals：object中默认也是采⽤-x3D-x3D-⽐较，通常会重写" class="headerlink" title="equals：object中默认也是采⽤&#x3D;&#x3D;⽐较，通常会重写"></a>equals：object中默认也是采⽤&#x3D;&#x3D;⽐较，通常会重写</h5><h4 id="Object"><a href="#Object" class="headerlink" title="Object:"></a>Object:</h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span> == obj)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object anObject)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == anObject) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">anotherString</span> <span class="hljs-operator">=</span> (String)anObject;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> value.length;<br><span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br><span class="hljs-type">char</span> v1[] = value;<br><span class="hljs-type">char</span> v2[] = anotherString.value;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (v1[i] != v2[i])<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>i++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="上述代码可以看出，String类中被复写的equals-⽅法其实是⽐较两个字符串的内容。"><a href="#上述代码可以看出，String类中被复写的equals-⽅法其实是⽐较两个字符串的内容。" class="headerlink" title="上述代码可以看出，String类中被复写的equals()⽅法其实是⽐较两个字符串的内容。"></a>上述代码可以看出，String类中被复写的equals()⽅法其实是⽐较两个字符串的内容。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> str2; <span class="hljs-comment">// 引⽤传递</span><br>        System.out.println(str1 == str2); <span class="hljs-comment">// false</span><br>        System.out.println(str1 == str3); <span class="hljs-comment">// false</span><br>        System.out.println(str2 == str3); <span class="hljs-comment">// true</span><br>        System.out.println(str1.equals(str2)); <span class="hljs-comment">// true</span><br>        System.out.println(str1.equals(str3)); <span class="hljs-comment">// true</span><br>        System.out.println(str2.equals(str3)); <span class="hljs-comment">// true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结-equals算是特殊的”-x3D-x3D-”-部分类里面重写-有了更细节的毕竟能力-而”-x3D-x3D-”只比较”值或地址”"><a href="#总结-equals算是特殊的”-x3D-x3D-”-部分类里面重写-有了更细节的毕竟能力-而”-x3D-x3D-”只比较”值或地址”" class="headerlink" title="总结:equals算是特殊的”&#x3D;&#x3D;”,部分类里面重写,有了更细节的毕竟能力,而”&#x3D;&#x3D;”只比较”值或地址”"></a>总结:equals算是特殊的”&#x3D;&#x3D;”,部分类里面重写,有了更细节的毕竟能力,而”&#x3D;&#x3D;”只比较”值或地址”</h4>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一烤:JDK,JRE,JVM三者之间的关系</title>
    <link href="/2022/07/01/JDKJREJVM/"/>
    <url>/2022/07/01/JDKJREJVM/</url>
    
    <content type="html"><![CDATA[<h1 id="每日一烤"><a href="#每日一烤" class="headerlink" title="每日一烤"></a>每日一烤</h1><h2 id="JDK-JRE-JVM的关系"><a href="#JDK-JRE-JVM的关系" class="headerlink" title="JDK , JRE , JVM的关系"></a>JDK , JRE , JVM的关系</h2><h3 id="关系"><a href="#关系" class="headerlink" title="关系:"></a>关系:</h3><h5 id="JDK-x3D-JRE-Java开发工具包"><a href="#JDK-x3D-JRE-Java开发工具包" class="headerlink" title="JDK &#x3D; JRE + Java开发工具包"></a>JDK &#x3D; JRE + Java开发工具包</h5><h5 id="JRE-x3D-JVM-JAVASE标准类库"><a href="#JRE-x3D-JVM-JAVASE标准类库" class="headerlink" title="JRE &#x3D; JVM + JAVASE标准类库"></a>JRE &#x3D; JVM + JAVASE标准类库</h5><p><img src="https://cdn.jsdelivr.net/gh/fuchajun/Picture/20220501173153.png" alt="关系图"></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h5 id="JDK（Java-Development-Kit）是针对Java开发员的产品，是整个Java的核心，包括了Java运行环境JRE、Java工具和Java基础类库。-开发"><a href="#JDK（Java-Development-Kit）是针对Java开发员的产品，是整个Java的核心，包括了Java运行环境JRE、Java工具和Java基础类库。-开发" class="headerlink" title="JDK（Java Development Kit）是针对Java开发员的产品，是整个Java的核心，包括了Java运行环境JRE、Java工具和Java基础类库。(开发)"></a>JDK（Java Development Kit）是针对Java开发员的产品，是整个Java的核心，包括了Java运行环境JRE、Java工具和Java基础类库。(开发)</h5><h5 id="Java-Runtime-Environment（JRE）是运行JAVA程序所必须的环境的集合，包含JVM标准实现及Java核心类库。-运行"><a href="#Java-Runtime-Environment（JRE）是运行JAVA程序所必须的环境的集合，包含JVM标准实现及Java核心类库。-运行" class="headerlink" title="Java Runtime Environment（JRE）是运行JAVA程序所必须的环境的集合，包含JVM标准实现及Java核心类库。(运行)"></a>Java Runtime Environment（JRE）是运行JAVA程序所必须的环境的集合，包含JVM标准实现及Java核心类库。(运行)</h5><h5 id="JVM是Java-Virtual-Machine（Java虚拟机）的缩写，是整个java实现跨平台的最核心的部分，能够运行以Java语言写作的软件程序。-虚拟机"><a href="#JVM是Java-Virtual-Machine（Java虚拟机）的缩写，是整个java实现跨平台的最核心的部分，能够运行以Java语言写作的软件程序。-虚拟机" class="headerlink" title="JVM是Java Virtual Machine（Java虚拟机）的缩写，是整个java实现跨平台的最核心的部分，能够运行以Java语言写作的软件程序。(虚拟机)"></a>JVM是Java Virtual Machine（Java虚拟机）的缩写，是整个java实现跨平台的最核心的部分，能够运行以Java语言写作的软件程序。(虚拟机)</h5>]]></content>
    
    
    <categories>
      
      <category>每日一烤</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日一烤</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 简易 音乐播放器</title>
    <link href="/2022/06/17/Android%E7%AE%80%E6%98%93%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <url>/2022/06/17/Android%E7%AE%80%E6%98%93%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-简易-音乐播放器"><a href="#Android-简易-音乐播放器" class="headerlink" title="Android 简易 音乐播放器"></a>Android 简易 音乐播放器</h1><h2 id="Mediaplayer简介"><a href="#Mediaplayer简介" class="headerlink" title="Mediaplayer简介"></a>Mediaplayer简介</h2><h5 id="Android多媒体中的——MediaPlayer，我们可以通过这个API来播放音频和视频-该类是Androd多媒体框架中的一个重要组件，通过该类，我们可以以最小的步骤来获取，解码-和播放音视频。它支持三种不同的媒体来源"><a href="#Android多媒体中的——MediaPlayer，我们可以通过这个API来播放音频和视频-该类是Androd多媒体框架中的一个重要组件，通过该类，我们可以以最小的步骤来获取，解码-和播放音视频。它支持三种不同的媒体来源" class="headerlink" title="Android多媒体中的——MediaPlayer，我们可以通过这个API来播放音频和视频 该类是Androd多媒体框架中的一个重要组件，通过该类，我们可以以最小的步骤来获取，解码 和播放音视频。它支持三种不同的媒体来源:"></a>Android多媒体中的——MediaPlayer，我们可以通过这个API来播放音频和视频 该类是Androd多媒体框架中的一个重要组件，通过该类，我们可以以最小的步骤来获取，解码 和播放音视频。它支持三种不同的媒体来源:</h5><ul><li><p>本地资源</p></li><li><p>内部url,如ContentResolver来获取</p></li><li><p>外部url(流) 对于Android所支持的的媒体格式表</p></li></ul><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> MediaPlayer mediaPlayer;<br>mediaPlayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>();<span class="hljs-comment">//可以放在onCreate()方法里</span><br>mediaPlayer = MediaPlayer.create(getApplicationContext(),R.raw.zebrazebra);<span class="hljs-comment">//   可以放在class MusicControl extends Binder中</span><br></code></pre></td></tr></table></figure><h4 id="设置播放文件"><a href="#设置播放文件" class="headerlink" title="设置播放文件"></a>设置播放文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//①raw下的资源：</span><br>MediaPlayer.create(<span class="hljs-built_in">this</span>, R.raw.test);<br><br><span class="hljs-comment">//②本地文件路径：</span><br>mp.setDataSource(<span class="hljs-string">&quot;/sdcard/test.mp3&quot;</span>);<br><br><span class="hljs-comment">//③网络URL文件：</span><br>mp.setDataSource(<span class="hljs-string">&quot;http://www.xxx.com/music/test.mp3&quot;</span>);<br><span class="hljs-comment">//关于setDataSource,下一篇博文会做更加详细的介绍</span><br></code></pre></td></tr></table></figure><h3 id="Mediaplayer中的常用方法"><a href="#Mediaplayer中的常用方法" class="headerlink" title="Mediaplayer中的常用方法"></a>Mediaplayer中的常用方法</h3><ul><li><p><strong>void reset() 重置MediaPlayer至未初始化状态</strong></p></li><li><p><strong>void start () 开始</strong></p></li><li><p><strong>void stop () 停止</strong></p></li><li><p><strong>void pause () 暂停</strong></p></li><li><p><strong>int getCurrentPosition() 获取当前播放的位置</strong></p></li><li><p><strong>int getDuration() 得到文件的时间</strong></p></li><li><p><strong>void release () 回收流媒体资源。</strong></p></li><li><p><strong>void seekTo(int msec) 指定播放的位置（以毫秒为单位的时间）</strong></p></li><li><p><strong>void setLooping(boolean looping) 设置是否单曲循环</strong></p></li><li><p><strong>boolean isLooping () 是否循环播放</strong></p></li><li><p><strong>boolean isPlaying() 是否正在播放</strong></p></li></ul><h3 id="音乐播放器的一般步骤"><a href="#音乐播放器的一般步骤" class="headerlink" title="音乐播放器的一般步骤"></a>音乐播放器的一般步骤</h3><ul><li><p>reset();  &#x2F;&#x2F;重置</p></li><li><p>setDataSource(song_path);</p></li><li><p>prepare(); &#x2F;&#x2F;准备</p></li><li><p>start();  &#x2F;&#x2F;播放</p></li><li><p>pause();  &#x2F;&#x2F;暂停</p></li><li><p>start(); &#x2F;&#x2F;继续播放</p></li><li><p>stop(); &#x2F;&#x2F;停止</p></li><li><p>release(); &#x2F;&#x2F;释放音乐播放器</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><h4 id="activity-music-xml"><a href="#activity-music-xml" class="headerlink" title="activity_music.xml"></a>activity_music.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MediaPlayer.MusicActivity&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@drawable/image14&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/iv_disk&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@drawable/disk&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">&quot;120dp&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">SeekBar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/sb_pg&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:progressBackgroundTint</span>=<span class="hljs-string">&quot;#000000&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_pg&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;00:00&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginLeft</span>=<span class="hljs-string">&quot;20dp&quot;</span>/&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_tt&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginLeft</span>=<span class="hljs-string">&quot;300dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;00:00&quot;</span> /&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">&quot;30dp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_pm&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;播放音乐&quot;</span> /&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_sp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_toEndOf</span>=<span class="hljs-string">&quot;@+id/btn_pm&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;暂停播放&quot;</span></span><br><span class="hljs-tag">            /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_cp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;继续播放&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_toEndOf</span>=<span class="hljs-string">&quot;@+id/btn_sp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_ep&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;退出播放&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_toEndOf</span>=<span class="hljs-string">&quot;@id/btn_cp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fuchajun/Picture/20220418102858.png" alt="布局效果"></p><h3 id="Mediaplayer实现类"><a href="#Mediaplayer实现类" class="headerlink" title="Mediaplayer实现类"></a>Mediaplayer实现类</h3><h4 id="public-class-MediaPlayerService-extends-Service"><a href="#public-class-MediaPlayerService-extends-Service" class="headerlink" title="public class MediaPlayerService extends Service"></a>public class MediaPlayerService extends Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qst.helloworld.MediaPlayer;<br><br><span class="hljs-keyword">import</span> android.app.Service;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.media.MediaPlayer;<br><span class="hljs-keyword">import</span> android.os.Binder;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.os.IBinder;<br><span class="hljs-keyword">import</span> android.os.Message;<br><br><span class="hljs-keyword">import</span> com.qst.helloworld.R;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MediaPlayerService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">private</span> MediaPlayer mediaPlayer;<br>    <span class="hljs-keyword">private</span> Timer timer;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MediaPlayerService</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Return the communication channel to the service.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MusicControl</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>            mediaPlayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>    &#125;<br><br>    <span class="hljs-comment">//增加计时器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTimer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(timer == <span class="hljs-literal">null</span>)&#123;<br>            timer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>            <span class="hljs-type">TimerTask</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> mediaPlayer.getDuration();<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">currentPos</span> <span class="hljs-operator">=</span> mediaPlayer.getCurrentPosition();<br>                    <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> MusicActivity.handler.obtainMessage();<br>                    <span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>                    bundle.putInt(<span class="hljs-string">&quot;duration&quot;</span>,duration);<br>                    bundle.putInt(<span class="hljs-string">&quot;currentPosition&quot;</span>,currentPos);<br>                    msg.setData(bundle);<br>                    <span class="hljs-comment">//将消息发送到主线程队列</span><br>                    MusicActivity.handler.sendMessage(msg);<br>                &#125;<br>            &#125;;<br>            <span class="hljs-comment">//开始计时任务后的5ms,第一次执行task任务,之后每500ms执行一次</span><br>            timer.schedule(task,<span class="hljs-number">5</span>,<span class="hljs-number">500</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MusicControl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Binder</span>&#123;<br>        <span class="hljs-comment">//播放</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>&#123;<br>            mediaPlayer.reset();<br>            mediaPlayer = MediaPlayer.create(getApplicationContext(),R.raw.zebrazebra);<br>            mediaPlayer.start();<br>            addTimer();<br>        &#125;<br><br><br>        <span class="hljs-comment">//暂停</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pause</span><span class="hljs-params">()</span>&#123;<br>            mediaPlayer.pause();<br>        &#125;<br><br>        <span class="hljs-comment">//继续</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resume</span><span class="hljs-params">()</span>&#123;<br>            mediaPlayer.start();<br>        &#125;<br>        <span class="hljs-comment">//退出</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>            mediaPlayer.stop();<br>            mediaPlayer.release();<br>            <span class="hljs-keyword">try</span> &#123;<br>                timer.cancel();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//打带</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seekTo</span><span class="hljs-params">(<span class="hljs-type">int</span> ms)</span>&#123;<br>            mediaPlayer.seekTo(ms);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><h4 id="MusicActivity-class"><a href="#MusicActivity-class" class="headerlink" title="MusicActivity.class"></a>MusicActivity.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qst.helloworld.MediaPlayer;<br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> android.animation.ObjectAnimator;<br><span class="hljs-keyword">import</span> android.content.ComponentName;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.content.ServiceConnection;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.os.Handler;<br><span class="hljs-keyword">import</span> android.os.IBinder;<br><span class="hljs-keyword">import</span> android.os.Looper;<br><span class="hljs-keyword">import</span> android.os.Message;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.animation.LinearInterpolator;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.ImageView;<br><span class="hljs-keyword">import</span> android.widget.SeekBar;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">import</span> com.qst.helloworld.R;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MusicActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Button btnPlay,btnPause,btnContinue,btnExit;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> TextView tvCurrentTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TextView tvTotalTime;<br>    <span class="hljs-keyword">private</span> ImageView ivDisk;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SeekBar sbProgress;<br>    <span class="hljs-keyword">private</span> ObjectAnimator animator;<br><br>    <span class="hljs-keyword">private</span> MediaPlayerService.MusicControl control;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ServiceConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceConnection</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceConnected</span><span class="hljs-params">(ComponentName componentName, IBinder iBinder)</span> &#123;<br>            control = (MediaPlayerService.MusicControl)iBinder;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceDisconnected</span><span class="hljs-params">(ComponentName componentName)</span> &#123;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_music);<br>        init();<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        btnPlay = findViewById(R.id.btn_pm);<br>        btnPause = findViewById(R.id.btn_sp);<br>        btnContinue = findViewById(R.id.btn_cp);<br>        btnExit = findViewById(R.id.btn_ep);<br><br>        tvCurrentTime = findViewById(R.id.tv_pg);<br>        tvTotalTime = findViewById(R.id.tv_tt);<br>        ivDisk = findViewById(R.id.iv_disk);<br>        sbProgress = findViewById(R.id.sb_pg);<br><br>        <span class="hljs-type">OnClick</span> <span class="hljs-variable">onClick</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OnClick</span>();<br>        btnPlay.setOnClickListener(onClick);<br>        btnPause.setOnClickListener(onClick);<br>        btnContinue.setOnClickListener(onClick);<br>        btnExit.setOnClickListener(onClick);<br><br>        <span class="hljs-comment">//动画</span><br>        animator = ObjectAnimator.ofFloat(ivDisk,<span class="hljs-string">&quot;rotation&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">360.0F</span>);<br>        animator.setDuration(<span class="hljs-number">10000</span>);<br>        animator.setInterpolator(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearInterpolator</span>());<br>        animator.setRepeatCount(-<span class="hljs-number">1</span>);<br><br><br><br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(getApplicationContext(),MediaPlayerService.class);<br>        bindService(intent,conn,BIND_AUTO_CREATE);<br><br>        sbProgress.setOnSeekBarChangeListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SeekBar</span>.OnSeekBarChangeListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgressChanged</span><span class="hljs-params">(SeekBar seekBar, <span class="hljs-type">int</span> progress, <span class="hljs-type">boolean</span> fromUser)</span> &#123;<br>                <span class="hljs-keyword">if</span>(fromUser)&#123;<br>                    control.seekTo(progress);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(progress == seekBar.getMax())&#123;<br>                    animator.pause();<br>                &#125;<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartTrackingTouch</span><span class="hljs-params">(SeekBar seekBar)</span> &#123;<br>                control.pause();<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStopTrackingTouch</span><span class="hljs-params">(SeekBar seekBar)</span> &#123;<br>                control.resume();<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnClick</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>            <span class="hljs-keyword">switch</span> (view.getId())&#123;<br>                <span class="hljs-keyword">case</span> R.id.btn_pm:<br>                    control.play();<br>                    animator.start();<br>                    <span class="hljs-keyword">break</span> ;<br>                <span class="hljs-keyword">case</span> R.id.btn_sp:<br>                    control.pause();<br>                    animator.pause();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> R.id.btn_cp:<br>                    control.resume();<br>                    animator.resume();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> R.id.btn_ep:<br>                    finish();<br>                    <span class="hljs-keyword">break</span>;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        control.stop();<br>        unbindService(conn);<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>    &#125;<br>    <span class="hljs-comment">//获取从MediaPlayerService传递过来的消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(Looper.myLooper())&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> &#123;<br>            <span class="hljs-built_in">super</span>.handleMessage(msg);<br>            <span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> msg.getData();<span class="hljs-comment">//获取从子线程发过来的音乐播放进度</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> bundle.getInt(<span class="hljs-string">&quot;duration&quot;</span>);<span class="hljs-comment">//歌曲总时长</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">currentPosition</span> <span class="hljs-operator">=</span> bundle.getInt(<span class="hljs-string">&quot;currentPosition&quot;</span>);<br>            sbProgress.setMax(duration);<br>            sbProgress.setProgress(currentPosition);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">totalTime</span> <span class="hljs-operator">=</span> msToMinSec(duration);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> msToMinSec(currentPosition);<br>            tvTotalTime.setText(totalTime);<br>            tvCurrentTime.setText(currentTime);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">msToMinSec</span><span class="hljs-params">(<span class="hljs-type">int</span> ms)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sec</span> <span class="hljs-operator">=</span> ms / <span class="hljs-number">1000</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> sec /<span class="hljs-number">60</span>;<br>        sec -= min * <span class="hljs-number">60</span>;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%02d:%02d&quot;</span>,min,sec);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/fuchajun/Picture/20220418103210.png" alt="运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Service</category>
      
      <category>Mediaplayer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Service</tag>
      
      <tag>Mediaplayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Download Service</title>
    <link href="/2022/06/16/AndroidDownloadService/"/>
    <url>/2022/06/16/AndroidDownloadService/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Service-DownloadTask"><a href="#Android-Service-DownloadTask" class="headerlink" title="Android Service DownloadTask"></a>Android Service DownloadTask</h1><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="Service简介"><a href="#Service简介" class="headerlink" title="Service简介"></a>Service简介</h3><h5 id="Service后台服务-与Activity相比-Service运行在后台-Activity运行在前台-一般我们会把在后台长时间运行的代码放在Service中"><a href="#Service后台服务-与Activity相比-Service运行在后台-Activity运行在前台-一般我们会把在后台长时间运行的代码放在Service中" class="headerlink" title="Service后台服务:与Activity相比,Service运行在后台,Activity运行在前台,一般我们会把在后台长时间运行的代码放在Service中"></a>Service后台服务:与Activity相比,Service运行在后台,Activity运行在前台,一般我们会把在后台长时间运行的代码放在Service中</h5><h5 id="后台任务-不需要前台界面或者前台界面关闭仍然能够运行的任务"><a href="#后台任务-不需要前台界面或者前台界面关闭仍然能够运行的任务" class="headerlink" title="后台任务:不需要前台界面或者前台界面关闭仍然能够运行的任务"></a>后台任务:不需要前台界面或者前台界面关闭仍然能够运行的任务</h5><h5 id="Eg-后台下载任务-音乐播放任务-录音服务"><a href="#Eg-后台下载任务-音乐播放任务-录音服务" class="headerlink" title="Eg:后台下载任务,音乐播放任务,录音服务"></a>Eg:后台下载任务,音乐播放任务,录音服务</h5><h3 id="开发Service"><a href="#开发Service" class="headerlink" title="开发Service"></a>开发Service</h3><h4 id="继承Service"><a href="#继承Service" class="headerlink" title="继承Service"></a>继承Service</h4><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus">Service是个抽象类，里面有一个抽象方法，自己重写生命周期方法<br><span class="hljs-function"><span class="hljs-title">onCreate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">onStartCommand</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">onDestory</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h4 id="注册Service"><a href="#注册Service" class="headerlink" title="注册Service"></a>注册Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">totalSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span>; <span class="hljs-comment">//总大小</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//当前进度</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span>(current&lt;totalSize)&#123;<br>            Log.d(<span class="hljs-string">&quot;download&quot;</span>, <span class="hljs-string">&quot;run: &quot;</span>+current);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            current++;<br>          &#125;<br>        &#125;<br>    &#125;<br>    DownloadTask task;<br>    <span class="hljs-comment">//第一次创建会启动</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>        task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadTask</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task);<br>        thread.start();<br>    &#125;<br>    <span class="hljs-comment">//每次启动Service都会执行</span><br>    <span class="hljs-comment">//同一个Service可以重复多次启动，只有第一次回创建Service</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>    &#125;<br>    <span class="hljs-comment">//定义DownloadBinder这个IBinder</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadBinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Binder</span>&#123;<br>        <span class="hljs-comment">//设置进度总大小</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotal</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> task.totalSize;<br>        &#125;<br>        <span class="hljs-comment">//里面实现与Activity需要交互的方法,拿到子进程中的下载进度</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCurrent</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> task.current;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//当Activity绑定Service时，就会调用onBind方法</span><br>    <span class="hljs-comment">//并且返回一个IBinder对象，这个对象最终会返回给Activity，Activity和Service就靠这个IBinder进行交互</span><br>    <span class="hljs-comment">//IBinder是个接口，需要我们自己写这个类，IBinder自己也有实现类Binder，可以直接继承这个实现类</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-type">IBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadBinder</span>();<br>        <span class="hljs-keyword">return</span> binder;<br>    &#125;<br>    <span class="hljs-comment">//停止Service就会销毁</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="启动Service"><a href="#启动Service" class="headerlink" title="启动Service"></a>启动Service</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">this</span>.startService(<span class="hljs-built_in">int</span>ent)<br></code></pre></td></tr></table></figure><h4 id="停止Service"><a href="#停止Service" class="headerlink" title="停止Service"></a>停止Service</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">this</span>.stopService(<span class="hljs-built_in">int</span>ent);<br>停止Service就是销毁Service<br></code></pre></td></tr></table></figure><h3 id="绑定Service"><a href="#绑定Service" class="headerlink" title="绑定Service"></a>绑定Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**Service虽然运行在后台，但是经常也需要跟前台进行交互</span><br><span class="hljs-comment">比如：</span><br><span class="hljs-comment">下载服务：前台界面至少需要知道下载进度</span><br><span class="hljs-comment">音乐播放：前台不仅需要知道音乐播放进度，还能控制播放的开始暂停和进度</span><br><span class="hljs-comment">等等</span><br><span class="hljs-comment">如果要跟Service进行交互，那么必须绑定Service</span><br><span class="hljs-comment">（1）绑定Service</span><br><span class="hljs-comment">this.bindService(intent,conn,flag)</span><br><span class="hljs-comment">绑定时，如果Service没有启动，会自动启动，但是这样启动的Service在解绑时候，会自动销毁</span><br><span class="hljs-comment">（2）解绑Service</span><br><span class="hljs-comment">this.unbindService(conn)</span><br><span class="hljs-comment">Activity绑定Service进行交互的核心</span><br><span class="hljs-comment">Service中的onBind方法返回IBing对象</span><br><span class="hljs-comment">Activity中BindService绑定时，需要定义一个ServiceConnection**/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">totalSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span>; <span class="hljs-comment">//总大小</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//当前进度</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span>(current&lt;totalSize)&#123;<br>            Log.d(<span class="hljs-string">&quot;download&quot;</span>, <span class="hljs-string">&quot;run: &quot;</span>+current);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            current++;<br>          &#125;<br>        &#125;<br>    &#125;<br>    DownloadTask task;<br>    <span class="hljs-comment">//第一次创建会启动</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>        task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadTask</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task);<br>        thread.start();<br>    &#125;<br>    <span class="hljs-comment">//每次启动Service都会执行</span><br>    <span class="hljs-comment">//同一个Service可以重复多次启动，只有第一次回创建Service</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>    &#125;<br>    <span class="hljs-comment">//定义DownloadBinder这个IBinder</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadBinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Binder</span>&#123;<br>        <span class="hljs-comment">//设置进度总大小</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotal</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> task.totalSize;<br>        &#125;<br>        <span class="hljs-comment">//里面实现与Activity需要交互的方法,拿到子进程中的下载进度</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCurrent</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> task.current;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//当Activity绑定Service时，就会调用onBind方法</span><br>    <span class="hljs-comment">//并且返回一个IBinder对象，这个对象最终会返回给Activity，Activity和Service就靠这个IBinder进行交互</span><br>    <span class="hljs-comment">//IBinder是个接口，需要我们自己写这个类，IBinder自己也有实现类Binder，可以直接继承这个实现类</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-type">IBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadBinder</span>();<br>        <span class="hljs-keyword">return</span> binder;<br>    &#125;<br>    <span class="hljs-comment">//停止Service就会销毁</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Service</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建个人博客教程</title>
    <link href="/2022/06/09/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <url>/2022/06/09/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo搭建个人博客教程"><a href="#Hexo搭建个人博客教程" class="headerlink" title="Hexo搭建个人博客教程"></a>Hexo搭建个人博客教程</h1><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><h4 id="Hexo是一款基于Node-js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。Hexo-使用-Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。这是Hexo官网-有关Hexo配置的具体说明可以从上面得到答案"><a href="#Hexo是一款基于Node-js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。Hexo-使用-Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。这是Hexo官网-有关Hexo配置的具体说明可以从上面得到答案" class="headerlink" title="Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。这是Hexo官网,有关Hexo配置的具体说明可以从上面得到答案."></a>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。这是<a href="https://hexo.io/zh-cn/">Hexo官网</a>,有关Hexo配置的具体说明可以从上面得到答案.</h4><h2 id="Hexo搭建准备工作"><a href="#Hexo搭建准备工作" class="headerlink" title="Hexo搭建准备工作"></a>Hexo搭建准备工作</h2><h3 id="预备安装程序"><a href="#预备安装程序" class="headerlink" title="预备安装程序:"></a>预备安装程序:</h3><ul><li>Node.js</li><li><a href="https://gitforwindows.org/">Git</a></li><li>Hexo</li></ul><h2 id="Github-Pages上搭建博客"><a href="#Github-Pages上搭建博客" class="headerlink" title="Github Pages上搭建博客"></a>Github Pages上搭建博客</h2><h3 id="Github创建仓库"><a href="#Github创建仓库" class="headerlink" title="Github创建仓库"></a>Github创建仓库</h3><h6 id="仓库名与GitHub用户名相同"><a href="#仓库名与GitHub用户名相同" class="headerlink" title="仓库名与GitHub用户名相同"></a>仓库名与GitHub用户名相同</h6><p>eg:fuchajun.github.io</p><h6 id="生成SSH密钥添加到Github"><a href="#生成SSH密钥添加到Github" class="headerlink" title="生成SSH密钥添加到Github"></a>生成SSH密钥添加到Github</h6><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;fuchajun&quot;<br>git config --global user.email &quot;bolanfucha@126.com&quot;<br></code></pre></td></tr></table></figure><h6 id="验证配置是否成功"><a href="#验证配置是否成功" class="headerlink" title="验证配置是否成功"></a>验证配置是否成功</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><h6 id="创建SSH"><a href="#创建SSH" class="headerlink" title="创建SSH"></a>创建SSH</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;bolanfucha@126.com&quot;<br></code></pre></td></tr></table></figure><h6 id="一路回车-Enter-电脑C-x2F-用户名-x2F-ssh中生成密钥"><a href="#一路回车-Enter-电脑C-x2F-用户名-x2F-ssh中生成密钥" class="headerlink" title="一路回车(Enter),电脑C&#x2F;用户名&#x2F;.ssh中生成密钥"></a>一路回车(Enter),电脑C&#x2F;用户名&#x2F;.ssh中生成密钥</h6><p>id_rsa(私钥)</p><p>id_rsa.pub(公钥)</p><h6 id="打开id-rsa-pub文件-复制到Github-gt-gt-Setting-gt-gt-SSH-and-GPG-keys-gt-gt-New-SSH-key-gt-gt-key-gt-gt-title-随意"><a href="#打开id-rsa-pub文件-复制到Github-gt-gt-Setting-gt-gt-SSH-and-GPG-keys-gt-gt-New-SSH-key-gt-gt-key-gt-gt-title-随意" class="headerlink" title="打开id_rsa.pub文件,复制到Github&gt;&gt;Setting&gt;&gt;SSH and GPG keys&gt;&gt;New SSH key&gt;&gt;key&gt;&gt;title 随意"></a>打开id_rsa.pub文件,复制到Github&gt;&gt;Setting&gt;&gt;SSH and GPG keys&gt;&gt;New SSH key&gt;&gt;key&gt;&gt;title 随意</h6><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/Picture/image-20220409180929213.png" alt="Github&gt;&gt;Setting&gt;&gt;SSH and GPG keys&gt;&gt;New SSH key"></p><h6 id="验证SSH"><a href="#验证SSH" class="headerlink" title="验证SSH"></a>验证SSH</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/Picture/image-20220409181248830.png" alt="验证ssh"></p><h6 id="but-Github-does-not-provide-shell-access-不是什么重要信息-前半句即可证明验证成功"><a href="#but-Github-does-not-provide-shell-access-不是什么重要信息-前半句即可证明验证成功" class="headerlink" title="but Github does not provide shell access 不是什么重要信息,前半句即可证明验证成功"></a>but Github does not provide shell access 不是什么重要信息,前半句即可证明验证成功</h6><h6 id="如下图-配置Hexo-config-yml文件-将Hexo部署至Github-config-yml所指的是Hexo下的配置文件-注意不要与theme的配置文件相混淆"><a href="#如下图-配置Hexo-config-yml文件-将Hexo部署至Github-config-yml所指的是Hexo下的配置文件-注意不要与theme的配置文件相混淆" class="headerlink" title="如下图 配置Hexo _config.yml文件,将Hexo部署至Github,-config.yml所指的是Hexo下的配置文件,注意不要与theme的配置文件相混淆."></a>如下图 配置Hexo _config.yml文件,将Hexo部署至Github,-config.yml所指的是Hexo下的配置文件,注意不要与theme的配置文件相混淆.</h6><p><img src="https://gcore.jsdelivr.net/gh/fuchajun/Picture/image-20220409191119206.png"></p><h6 id="同理-也可以将Hexo部署到Gittee或者Coding上-类似于国内的Github-一个是阿里的一个是腾讯的-国内访问速度会快一些"><a href="#同理-也可以将Hexo部署到Gittee或者Coding上-类似于国内的Github-一个是阿里的一个是腾讯的-国内访问速度会快一些" class="headerlink" title="同理,也可以将Hexo部署到Gittee或者Coding上(类似于国内的Github,一个是阿里的一个是腾讯的,国内访问速度会快一些)"></a>同理,也可以将Hexo部署到Gittee或者Coding上(类似于国内的Github,一个是阿里的一个是腾讯的,国内访问速度会快一些)</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <br>  <span class="hljs-attr">repository:</span> <br>    <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:fuchajun/fuchajun.github.io.git</span><br>    <span class="hljs-attr">coding:</span> <span class="hljs-string">git@e.coding.net:fuchajun/fuchajun/fuchajun.git</span><br>    <span class="hljs-string">//gittee:git@...........</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h6 id="安装deploy-git"><a href="#安装deploy-git" class="headerlink" title="安装deploy-git"></a>安装deploy-git</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h6 id="git三部曲"><a href="#git三部曲" class="headerlink" title="git三部曲"></a>git三部曲</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean//清除hexo缓存<br>hexo generate//生成<br>hexo deploy//部署<br></code></pre></td></tr></table></figure><h6 id="得到下图就说明部署成功了，过一会儿就可以在-http-fuchajun-github-io-这个网站看到我的博客了"><a href="#得到下图就说明部署成功了，过一会儿就可以在-http-fuchajun-github-io-这个网站看到我的博客了" class="headerlink" title="得到下图就说明部署成功了，过一会儿就可以在(http://fuchajun.github.io) 这个网站看到我的博客了!!!"></a>得到下图就说明部署成功了，过一会儿就可以在(<a href="http://fuchajun.github.io/">http://fuchajun.github.io</a>) 这个网站看到我的博客了!!!</h6>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/05/hello-world/"/>
    <url>/2022/06/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate(hexo g)<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy(hexo d)<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
